// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.10.4.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res != "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseDouble: function(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = C.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        if (H.Primitives__saneNativeClassName(dispatchName))
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && H.Primitives__saneNativeClassName(constructorName))
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives__saneNativeClassName: function($name) {
      var t1 = $name !== "Object" && $name !== "";
      return t1;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H._asIntS(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value != "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      if (ex == null)
        return new H.NullThrownFromJavaScriptException(ex);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace: function(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t1, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return H.saveStackTrace(ex, H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asStringS(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asStringS(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1)
              return H.saveStackTrace(ex, H.NullError$(H._asStringS(message), match));
          }
        }
        return H.saveStackTrace(ex, new H.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return H.saveStackTrace(ex, new P.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asIntS(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      return new Function("return function(" + $arguments + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var stubName, arity, lookedUpFunction, t1, t2, $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = $.BoundClosure_receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._self), recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      return t1 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = H._asStringS($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _.__js_helper$_target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe: function(rti) {
      return rti._canonicalRecipe;
    },
    findType: function(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(t1);
        result.push(t2);
        result.push(substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asIntS(index);
      table = init.types;
      type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      var rti = object instanceof H.Closure ? H.closureFunctionType(object) : null;
      return H.createRuntimeType(rti == null ? H.instanceType(object) : rti);
    },
    createRuntimeType: function(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new H._Type(rti);
      starErasedRti = H._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new H._Type(starErasedRti) : type;
    },
    typeLiteral: function(recipe) {
      return H.createRuntimeType(H._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest: function(object) {
      var unstarred, isFn, testRti = this,
        t1 = type$.Object;
      if (testRti === t1)
        return H._finishIsFn(testRti, object, H._isObject);
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = testRti === t1;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return H._finishIsFn(testRti, object, H._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = H._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = H._isNum;
      else if (unstarred === type$.String)
        isFn = H._isString;
      else
        isFn = unstarred === type$.bool ? H._isBool : null;
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        t1 = unstarred._primary;
        if (unstarred._rest.every(H.isTopType)) {
          testRti._specializedTestResource = "$is" + t1;
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (t1 === 7)
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck: function(object) {
      var t1, asFn, testRti = this;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = testRti === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = H._asTop;
      else if (testRti === type$.Object)
        asFn = H._asObject;
      else
        asFn = H._generalNullableAsCheckImplementation;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs: function(testRti) {
      var t2,
        t1 = testRti._kind;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t2 = testRti === type$.Object;
        else
          t2 = true;
      else
        t2 = true;
      return t2 || testRti === type$.legacy_Never || t1 === 7 || testRti === type$.Null || testRti === type$.JSNull;
    },
    _generalIsTestImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty: function(object) {
      var t1 = this,
        tag = t1._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + H.S(objectTypeDescription) + "' is not a subtype of type '" + H.S(checkedTypeDescription) + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      return object;
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += C.JSString_methods.$add(sep, H._rtiToString(array[i], genericContext));
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, t3, typeParametersText, typeSep, t4, t5, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, t3 = type$.Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t4 = genericContext.length;
          t5 = t4 - 1 - i;
          if (t5 < 0)
            return H.ioore(genericContext, t5);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t5]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t4 = boundRti === t3;
            else
              t4 = true;
          else
            t4 = true;
          if (!t4)
            typeParametersText += C.JSString_methods.$add(" extends ", H._rtiToString(boundRti, genericContext));
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += C.JSString_methods.$add(sep, H._rtiToString(requiredPositional[i], genericContext));
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += C.JSString_methods.$add(sep, H._rtiToString(optionalPositional[i], genericContext));
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += J.$add$ans(H._rtiToString(named[i + 2], genericContext), " ") + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + H.S(returnTypeText);
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return J.$add$ans(argumentKind === 11 || argumentKind === 12 ? C.JSString_methods.$add("(", s) + ")" : s, "?");
      }
      if (kind === 8)
        return "FutureOr<" + H.S(H._rtiToString(rti._primary, genericContext)) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length !== 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        genericContext.toString;
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = universe.eT,
        probe = metadata[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = [];
        for (i = 0; i < $length; ++i)
          $arguments.push(erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        cache = universe.eC,
        probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, null, recipe, normalize));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests: function(universe, rti) {
      rti._as = H._installSpecializedAsCheck;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = baseType === type$.Object;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length !== 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + H._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse: function(parser) {
      var t1, i, ch, universe, array, head, base, u, parameters, optionalPositional, named, item,
        source = parser.r,
        stack = parser.s;
      for (t1 = source.length, i = 0; i < t1;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, stack);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              stack.push(false);
              break;
            case 33:
              stack.push(true);
              break;
            case 59:
              stack.push(H._Parser_toType(parser.u, parser.e, stack.pop()));
              break;
            case 94:
              stack.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, stack.pop()));
              break;
            case 35:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 62:
              universe = parser.u;
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              head = stack.pop();
              if (typeof head == "string")
                stack.push(H._Universe__lookupInterfaceRti(universe, head, array));
              else {
                base = H._Parser_toType(universe, parser.e, head);
                switch (base._kind) {
                  case 11:
                    stack.push(H._Universe__lookupGenericFunctionRti(universe, base, array, parser.n));
                    break;
                  default:
                    stack.push(H._Universe__lookupBindingRti(universe, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, stack);
              break;
            case 42:
              u = parser.u;
              stack.push(H._Universe__lookupStarRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 63:
              u = parser.u;
              stack.push(H._Universe__lookupQuestionRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 47:
              u = parser.u;
              stack.push(H._Universe__lookupFutureOrRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 40:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 41:
              universe = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = universe.sEA;
              named = universe.sEA;
              head = stack.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = stack.pop();
                    break;
                  case -2:
                    named = stack.pop();
                    break;
                  default:
                    stack.push(head);
                    break;
                }
              else
                stack.push(head);
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              stack.push(H._Universe__lookupFunctionRti(universe, H._Parser_toType(universe, parser.e, stack.pop()), parameters));
              break;
            case 91:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 93:
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-1);
              break;
            case 123:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 125:
              array = stack.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = stack.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType: function(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = s === type$.Null || s === type$.JSNull;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = t._primary;
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return t1;
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t1;
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          if (sName < tName)
            continue;
          t1 = sNamed[sIndex - 1];
          if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, t1, t2, rule, supertypeArgs,
        sName = s._primary,
        tName = t._primary;
      if (sName === tName) {
        sArgs = s._rest;
        tArgs = t._rest;
        $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
            return false;
        }
        return true;
      }
      if (t === type$.Object)
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = rule[tName];
      if (supertypeArgs == null)
        return false;
      $length = supertypeArgs.length;
      tArgs = t._rest;
      for (i = 0; i < $length; ++i)
        if (!H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, supertypeArgs[i]), sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[J.JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, J.JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JS_INTEROP_INTERCEPTOR_TAG: function() {
      var t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
      return t1 == null ? $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js") : t1;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$a: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ans: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$as: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$a: function(receiver) {
      return J.getInterceptor$a(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$onClick$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onClick(receiver);
    },
    get$runtimeType$: function(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $add$ans: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ans(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    _addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    add$1$a: function(receiver, a0) {
      return J.getInterceptor$a(receiver).add$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    elementAt$1$a: function(receiver, a0) {
      return J.getInterceptor$a(receiver).elementAt$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      type$.void_Function._as(callback);
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, t2 === 2;)
        source = t1._as(source._resultOrListeners);
      if (t2 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, t4, _box_0, hasError, asyncError, nextListener, nextListener0, t5, sourceResult, t6, t7, zone, oldZone, result, current, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = t2._as(t1._resultOrListeners);
            P._rootHandleUncaughtError(_null, _null, t1._zone, asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t6 = !hasError;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t7 = t5._zone === zone;
            t7 = !(t7 || t7);
          } else
            t7 = false;
          if (t7) {
            t2._as(sourceResult);
            P._rootHandleUncaughtError(_null, _null, t5._zone, sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            result = _box_0.listener.result;
            if (t1._state >= 4) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 4;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = type$.dynamic_Function_Object_StackTrace;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace;
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      return new P.AsyncError(error, t1);
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      type$.void_Function._as(f);
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    HashMap_HashMap: function($K, $V) {
      return new P._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    HashMap_HashMap$from: function(other, $K, $V) {
      var result = P.HashMap_HashMap($K, $V);
      other.forEach$1(0, new P.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = J.get$iterator$a(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var t1, _i,
        result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__id: function(x) {
      return x;
    },
    MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, element;
      for (t1 = iterable.get$iterator(iterable); t1.moveNext$0();) {
        element = t1.get$current();
        map.$indexSet(0, P.collection_MapBase__id$closure().call$1(element), value.call$1(element));
      }
    },
    MapBase__fillMapWithIterables: function(map, keys, values) {
      var cur,
        t1 = keys.$ti,
        keyIterator = new H.MappedIterator(J.get$iterator$a(keys.__internal$_iterable), keys._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>")),
        valueIterator = new J.ArrayIterator(values, values.length, H._arrayInstanceType(values)._eval$1("ArrayIterator<1>")),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        cur = keyIterator.__internal$_current;
        map.$indexSet(0, cur, valueIterator._current);
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    _dynamicCompare: function(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    _defaultCompare: function($K) {
      if ($K._eval$1("int(0,0)")._is(P.core_Comparable_compare$closure()))
        return P.core_Comparable_compare$closure();
      return P.collection___dynamicCompare$closure();
    },
    _SplayTreeKeyIterator$: function(map, $K, $Node) {
      var t1 = new P._SplayTreeKeyIterator(map, H.setRuntimeTypeInfo([], $Node._eval$1("JSArray<0>")), map._modificationCount, map._splayCount, $K._eval$1("@<0>")._bind$1($Node)._eval$1("_SplayTreeKeyIterator<1,2>"));
      t1._findLeftMostDescendent$1(map._root);
      return t1;
    },
    SplayTreeSet$: function(compare, isValidKey, $E) {
      var t1 = P._defaultCompare($E);
      return new P.SplayTreeSet(t1, new P.SplayTreeSet_closure($E), $E._eval$1("SplayTreeSet<0>"));
    },
    SplayTreeSet_SplayTreeSet$from: function(elements, $E) {
      var t1, result, _null = null;
      if ($E._eval$1("Iterable<0>")._is(elements)) {
        t1 = P.SplayTreeSet$(_null, _null, $E);
        t1.addAll$1(0, elements);
        return t1;
      }
      result = P.SplayTreeSet$(_null, _null, $E);
      for (t1 = J.get$iterator$a(elements); t1.moveNext$0();)
        result.add$1(0, $E._as(t1.get$current()));
      return result;
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._nums = _._strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    IterableMixin: function IterableMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeSetNode: function _SplayTreeSetNode(t0, t1) {
      var _ = this;
      _.key = t0;
      _.right = _.left = null;
      _.$ti = t1;
    },
    _SplayTree: function _SplayTree() {
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    SplayTreeSet: function SplayTreeSet(t0, t1, t2) {
      var _ = this;
      _._root = null;
      _._compare = t0;
      _._validKey = t1;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t2;
    },
    SplayTreeSet_closure: function SplayTreeSet_closure(t0) {
      this.E = t0;
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    double_parse: function(source) {
      var value = H.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw H.wrapException(new P.FormatException("Invalid double", source));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    List_List$filled: function($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, growable, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$a(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      return list;
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$a(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    Comparable_compare: function(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull: function(argument, $name, $T) {
      if (argument == null)
        throw H.wrapException(new P.ArgumentError(false, null, $name, "Must not be null"));
      return argument;
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (start > end || end > $length)
        throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
      return end;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asIntS($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    print: function(object) {
      H.printString(H.S(J.toString$0$(object)));
    },
    _combineSurrogatePair: function(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1) {
      this.message = t0;
      this.source = t1;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    SvgElement: function SvgElement() {
    }
  },
  W = {
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), type$.Event),
        t2 = t1 != null;
      if (t2 && true) {
        type$.nullable_dynamic_Function_Event._as(t1);
        if (t2)
          J._addEventListener$3$x(_target, _eventType, t1, false);
      }
      return new W._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    DomException: function DomException() {
    },
    Element: function Element() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FormElement: function FormElement() {
    },
    MouseEvent: function MouseEvent() {
    },
    Node: function Node() {
    },
    SelectElement: function SelectElement() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    UIEvent: function UIEvent() {
    },
    EventStreamProvider: function EventStreamProvider(t0) {
      this.$ti = t0;
    },
    _EventStream: function _EventStream() {
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    }
  },
  Y = {
    abs: function(operand) {
      if (operand instanceof F.Negative)
        operand = operand.operand;
      if (operand instanceof T.Number)
        return operand;
      return new Y.AbsoluteValue(operand, null);
    },
    AbsoluteValue: function AbsoluteValue(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    arcosh: function(operand) {
      return operand instanceof D.CosH ? operand.operand : new Y.ArCosH(operand, null);
    },
    ArCosH: function ArCosH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    arcsec: function(operand) {
      return operand instanceof S.Sec ? operand.operand : new Y.ArcSec(operand, null);
    },
    ArcSec: function ArcSec(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    EmptySet: function EmptySet() {
    },
    sgn: function(operand) {
      var _f1 = B.extractFromNegative(operand, type$.legacy_Number),
        t1 = _f1.first;
      if (t1 != null) {
        if (t1.absvalue === 0)
          t1 = T.n(0);
        else
          t1 = T.n(H.boolConversionCheck(_f1.second) ? -1 : 1);
        return t1;
      }
      if (H.boolConversionCheck(B.extractFromNegative(operand, type$.legacy_AbsoluteValue).second))
        return T.n(-1);
      return new Y.Signum(operand, null);
    },
    Signum: function Signum(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    SingleVariableLinearSolver: function SingleVariableLinearSolver(t0, t1, t2) {
      var _ = this;
      _._left = _._comp = null;
      _.a = t0;
      _.b = t1;
      _.invertedInequality = false;
      _.expr = t2;
      _.doesApply = false;
    },
    SingleVariableLinearSolver_appliesInternal_closure: function SingleVariableLinearSolver_appliesInternal_closure(t0) {
      this.$this = t0;
    }
  },
  R = {And: function And(t0, t1) {
      this.left = t0;
      this.right = t1;
    }, BSInstance: function BSInstance(t0, t1) {
      this._class = t0;
      this._fields = t1;
    }},
  N = {
    arccos: function(operand) {
      return operand instanceof A.Cos ? operand.operand : new N.ArcCos(operand, null);
    },
    ArcCos: function ArcCos(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    arsech: function(operand) {
      return operand instanceof D.SecH ? operand.operand : new N.ArSecH(operand, null);
    },
    ArSecH: function ArSecH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    GreaterThan: function GreaterThan(t0, t1) {
      this.left = t0;
      this.right = t1;
      this._foundEverySolution = false;
    },
    closure: function closure() {
    },
    PartialDerivative: function PartialDerivative(t0) {
      this.v = t0;
    },
    PartialDerivative_visitSum_closure: function PartialDerivative_visitSum_closure(t0) {
      this.$this = t0;
    },
    PlainFunctionStringifier: function PlainFunctionStringifier() {
    },
    main: function() {
      var t3,
        t1 = document,
        t2 = type$.legacy_TextAreaElement._as(t1.getElementById("source"));
      (t2 && C.TextAreaElement_methods).set$value(t2, "let f(x) = sin(x)\n  \nlet g = f(cos(x))\n  \nprint g\n\nprint f + g\n\nprint e^x\n\nlet h(x, y, z) = 0\n\nprint h(1, 2, arcosh(z))\n\nlet i(y,x) = pi + 2 - log(y, 33)*sec(y/x)\nprint i(11, 2)\nprint ~i(11, 2)\n\nlet j(x, y, z) = x^2*y^3\n\nprint del(j)/del(x, y, x)\n\nlet A = {x | x > 2}\nlet B = [-10, 5)\nprint A union B\nprint A\\B\nprint A contained B\nprint A'\n");
      t1 = J.get$onClick$x(t1.getElementById("interpretButton"));
      t2 = t1.$ti;
      t3 = t2._eval$1("~(1)?")._as(new N.main_closure());
      type$.nullable_void_Function._as(null);
      W._EventStreamSubscription$(t1._target, t1._eventType, t3, false, t2._precomputed1);
      return 0;
    },
    main_closure: function main_closure() {
    },
    UserRoutine: function UserRoutine(t0, t1, t2) {
      this._declaration = t0;
      this._closure = t1;
      this._isInitializer = t2;
    }
  },
  L = {
    arccsc: function(operand) {
      return operand instanceof U.Csc ? operand.operand : new L.ArcCsc(operand, null);
    },
    ArcCsc: function ArcCsc(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    arcsch: function(operand) {
      return operand instanceof M.CscH ? operand.operand : new L.ArCscH(operand, null);
    },
    ArCscH: function ArCscH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    arcsin: function(operand) {
      return operand instanceof U.Sin ? operand.operand : new L.ArcSin(operand, null);
    },
    ArcSin: function ArcSin(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    Or: function Or(t0, t1) {
      this.left = t0;
      this.right = t1;
    },
    Resolver$: function(_interpreter) {
      var t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_HashMap_of_legacy_String_and_legacy_bool),
        t2 = $.$get$nativeGlobals().get$keys(),
        map = P.HashMap_HashMap(type$.legacy_String, type$.legacy_bool);
      P.MapBase__fillMapWithMappedIterable(map, t2, null, new L.Resolver_closure());
      return new L.Resolver(_interpreter, C.RoutineType_0, C.ClassType_0, t1, map);
    },
    RoutineType: function RoutineType(t0) {
      this._resolver$_name = t0;
    },
    ClassType: function ClassType(t0) {
      this._resolver$_name = t0;
    },
    Resolver: function Resolver(t0, t1, t2, t3, t4) {
      var _ = this;
      _._interpreter = t0;
      _._currentRoutine = t1;
      _._currentClass = t2;
      _._scopes = t3;
      _._globals = t4;
    },
    Resolver_closure: function Resolver_closure() {
    },
    TokenType: function TokenType(t0) {
      this._token$_name = t0;
    },
    Token: function Token(t0, t1, t2, t3) {
      var _ = this;
      _.type = t0;
      _.lexeme = t1;
      _.literal = t2;
      _.line = t3;
    }
  },
  U = {
    arcctg: function(operand) {
      return operand instanceof X.Ctg ? operand.operand : new U.ArcCtg(operand, null);
    },
    ArcCtg: function ArcCtg(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    Contains: function Contains(t0) {
      this._methodTable = t0;
    },
    csc: function(operand) {
      return operand instanceof L.ArcCsc ? operand.operand : new U.Csc(operand, null);
    },
    Csc: function Csc(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    sin: function(operand) {
      return operand instanceof L.ArcSin ? operand.operand : new U.Sin(operand, null);
    },
    Sin: function Sin(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    tanh: function(operand) {
      return operand instanceof T.ArTanH ? operand.operand : new U.TanH(operand, null);
    },
    TanH: function TanH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    }
  },
  Q = {
    arctan: function(operand) {
      return operand instanceof M.Tan ? operand.operand : new Q.ArcTan(operand, null);
    },
    ArcTan: function ArcTan(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    Equal: function Equal(t0, t1) {
      this.left = t0;
      this.right = t1;
      this._foundEverySolution = false;
    },
    LessOrEqual: function LessOrEqual(t0, t1) {
      this.left = t0;
      this.right = t1;
      this._foundEverySolution = false;
    },
    MethodTable: function MethodTable(t0, t1) {
      this.hashMap = t0;
      this.$ti = t1;
    }
  },
  V = {
    arctgh: function(operand) {
      return operand instanceof A.CtgH ? operand.operand : new V.ArCtgH(operand, null);
    },
    ArCtgH: function ArCtgH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    Disjoined: function Disjoined(t0) {
      this._methodTable = t0;
    },
    Expr: function Expr() {
    },
    AssignExpr: function AssignExpr(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    BinaryExpr: function BinaryExpr(t0, t1, t2) {
      this.left = t0;
      this.op = t1;
      this.right = t2;
    },
    CallExpr: function CallExpr(t0, t1, t2) {
      this.callee = t0;
      this.paren = t1;
      this.$arguments = t2;
    },
    GetExpr: function GetExpr(t0, t1) {
      this.object = t0;
      this.name = t1;
    },
    GroupingExpr: function GroupingExpr(t0) {
      this.expression = t0;
    },
    LiteralExpr: function LiteralExpr(t0) {
      this.value = t0;
    },
    UnaryExpr: function UnaryExpr(t0, t1) {
      this.op = t0;
      this.operand = t1;
    },
    VariableExpr: function VariableExpr(t0) {
      this.name = t0;
    },
    LogicBinaryExpr: function LogicBinaryExpr(t0, t1, t2) {
      this.left = t0;
      this.op = t1;
      this.right = t2;
    },
    SetExpr: function SetExpr(t0, t1, t2) {
      this.object = t0;
      this.name = t1;
      this.value = t2;
    },
    ThisExpr: function ThisExpr(t0) {
      this.keyword = t0;
    },
    SuperExpr: function SuperExpr(t0, t1) {
      this.keyword = t0;
      this.method = t1;
    },
    DerivativeExpr: function DerivativeExpr(t0, t1, t2) {
      this.keyword = t0;
      this.derivand = t1;
      this.variables = t2;
    },
    IntervalDefinitionExpr: function IntervalDefinitionExpr(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.a = t1;
      _.b = t2;
      _.right = t3;
    },
    RosterDefinitionExpr: function RosterDefinitionExpr(t0, t1, t2) {
      this.left = t0;
      this.elements = t1;
      this.right = t2;
    },
    BuilderDefinitionExpr: function BuilderDefinitionExpr(t0, t1, t2, t3, t4) {
      var _ = this;
      _.left = t0;
      _.parameters = t1;
      _.rule = t2;
      _.bar = t3;
      _.right = t4;
    },
    SetBinaryExpr: function SetBinaryExpr(t0, t1, t2) {
      this.left = t0;
      this.operator = t1;
      this.right = t2;
    }
  },
  Z = {
    arsinh: function(operand) {
      return operand instanceof D.SinH ? operand.operand : new Z.ArSinH(operand, null);
    },
    ArSinH: function ArSinH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    LessThan: function LessThan(t0, t1) {
      this.left = t0;
      this.right = t1;
      this._foundEverySolution = false;
    },
    SetVisitor: function SetVisitor() {
    },
    add: function(operands) {
      var t1 = operands.length;
      if (t1 === 0)
        return T.n(0);
      Z._openOtherSums(operands);
      Z._SumNumbers(operands);
      Z._createMultiplications(operands);
      t1 = operands.length;
      if (t1 === 0)
        return T.n(0);
      else if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(operands, 0);
        return operands[0];
      } else
        return new Z.Sum(operands, null);
    },
    _openOtherSums: function(operands) {
      var t1, t2, i, _op, s, newOperands, t3, t4, _i, f;
      for (t1 = type$.legacy_Sum, t2 = type$.JSArray_legacy_BSFunction, i = 0; i < operands.length;) {
        _op = B.extractFromNegative(operands[i], t1);
        if (_op.first != null) {
          s = t1._as(C.JSArray_methods.removeAt$1(operands, i));
          newOperands = H.setRuntimeTypeInfo([], t2);
          if (H.boolConversionCheck(_op.second))
            for (t3 = s.operands, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
              f = t3[_i];
              f.toString;
              C.JSArray_methods.add$1(newOperands, F.negative(f));
            }
          else
            newOperands = s.operands;
          C.JSArray_methods.insertAll$2(operands, i, newOperands);
        } else
          ++i;
      }
    },
    _SumNumbers: function(operands) {
      var t1, number, i, op, _negative, t2, t3, t4, numbers, t5,
        namedNumbers = P.HashMap_HashMap(type$.legacy_String, type$.legacy_Pair_of_legacy_double_and_legacy_int);
      for (t1 = type$.Pair_of_legacy_double_and_legacy_int, number = 0, i = 0; i < operands.length;) {
        op = operands[i];
        _negative = op instanceof F.Negative;
        if (_negative)
          op = op.operand;
        if (op instanceof T.Number) {
          C.JSArray_methods.removeAt$1(operands, i);
          if (!op.isNamed) {
            t2 = op.absvalue;
            t3 = _negative ? -1 : 1;
            if (typeof t2 !== "number")
              return t2.$mul();
            number += t2 * t3;
          } else {
            t2 = op.name;
            if (!namedNumbers.containsKey$1(t2))
              namedNumbers.$indexSet(0, t2, new G.Pair(op.absvalue, 0, t1));
            t2 = namedNumbers.$index(0, t2);
            t3 = t2.second;
            t4 = _negative ? -1 : 1;
            if (typeof t3 !== "number")
              return t3.$add();
            t2.set$second(t3 + t4);
          }
        } else
          ++i;
      }
      t1 = type$.JSArray_legacy_BSFunction;
      numbers = H.setRuntimeTypeInfo([], t1);
      if (number > 0)
        C.JSArray_methods.add$1(numbers, T.n(number));
      else if (number < 0)
        C.JSArray_methods.add$1(operands, T.n(number));
      for (t2 = new P._HashMapKeyIterable(namedNumbers, H._instanceType(namedNumbers)._eval$1("_HashMapKeyIterable<1>")), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2._collection$_current;
        if (namedNumbers.$index(0, t3).second !== 0) {
          t4 = T.n(namedNumbers.$index(0, t3).second);
          t5 = namedNumbers.$index(0, t3).first;
          t4.toString;
          C.JSArray_methods.add$1(numbers, F.multiply(H.setRuntimeTypeInfo([t4, new T.Number(true, t5, t3, null)], t1)));
        }
      }
      C.JSArray_methods.insertAll$2(operands, 0, numbers);
    },
    _createMultiplications: function(operands) {
      var t1, t2, t3, i, f, _mul, t4, t5, otherOps, h, originalFactor, factor, _f, j, j0, g, t6, _g;
      if (operands.length < 2)
        return;
      for (t1 = type$.legacy_BSFunction, t2 = type$.legacy_Multiplication, t3 = type$.JSArray_legacy_BSFunction, i = 0; i < operands.length; i = j) {
        f = operands[i];
        _mul = B.extractFromNegative(f, t2);
        t4 = _mul.first;
        if (t4 != null) {
          t5 = t4.operands;
          t5 = t5.length >= 2 && t5[0] instanceof T.Number;
        } else
          t5 = false;
        if (t5) {
          t4 = t4.operands;
          otherOps = H.setRuntimeTypeInfo(t4.slice(0), H._arrayInstanceType(t4));
          C.JSArray_methods.removeAt$1(otherOps, 0);
          h = new F.Multiplication(otherOps, null);
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t4 = t4[0];
          t5 = T.n(H.boolConversionCheck(_mul.second) ? -1 : 1);
          t4.toString;
          originalFactor = F.multiply(H.setRuntimeTypeInfo([t4, t5], t3));
          factor = originalFactor;
        } else {
          _f = B.extractFromNegative(f, t1);
          h = _f.first;
          originalFactor = T.n(H.boolConversionCheck(_f.second) ? -1 : 1);
          factor = originalFactor;
        }
        for (j = i + 1, t4 = J.getInterceptor$(h), j0 = j; j0 < operands.length; ++j0) {
          g = operands[j0];
          _mul = B.extractFromNegative(g, t2);
          t5 = _mul.first;
          if (t5 != null) {
            t6 = t5.operands;
            t6 = t6.length >= 2 && t6[0] instanceof T.Number;
          } else
            t6 = false;
          if (t6) {
            t5 = t5.operands;
            otherOps = H.setRuntimeTypeInfo(t5.slice(0), H._arrayInstanceType(t5));
            C.JSArray_methods.removeAt$1(otherOps, 0);
            if (t4.$eq(h, new F.Multiplication(otherOps, null))) {
              C.JSArray_methods.removeAt$1(operands, j0);
              if (0 >= t5.length)
                return H.ioore(t5, 0);
              t5 = t5[0];
              t6 = T.n(H.boolConversionCheck(_mul.second) ? -1 : 1);
              t5.toString;
              t6 = F.multiply(H.setRuntimeTypeInfo([t5, t6], t3));
              factor.toString;
              factor = Z.add(H.setRuntimeTypeInfo([factor, t6], t3));
            }
          } else {
            _g = B.extractFromNegative(g, t1);
            if (J.$eq$(_g.first, h)) {
              C.JSArray_methods.removeAt$1(operands, j0);
              t5 = T.n(H.boolConversionCheck(_g.second) ? -1 : 1);
              factor.toString;
              factor = Z.add(H.setRuntimeTypeInfo([factor, t5], t3));
            }
          }
        }
        if (!J.$eq$(factor, originalFactor)) {
          C.JSArray_methods.removeAt$1(operands, i);
          factor.toString;
          C.JSArray_methods.insert$2(operands, i, F.multiply(H.setRuntimeTypeInfo([factor, h], t3)));
        }
      }
    },
    Sum: function Sum(t0, t1) {
      this.operands = t0;
      this._parameters = t1;
    },
    Sum_evaluate_closure: function Sum_evaluate_closure(t0) {
      this.p = t0;
    }
  },
  T = {
    artanh: function(operand) {
      return operand instanceof U.TanH ? operand.operand : new T.ArTanH(operand, null);
    },
    ArTanH: function ArTanH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    n: function(value) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        return F.negative(T.Number$_(Math.abs(value), null));
      return T.Number$_(value, null);
    },
    Number$_: function(value, params) {
      var t1;
      if (typeof value !== "number")
        return value.abs$0();
      t1 = T.Number__makeName(value);
      C.JSNumber_methods.toInt$0(value);
      return new T.Number(false, Math.abs(value), t1, params);
    },
    Number__makeName: function(value) {
      var t1;
      if (value === 1 / 0)
        return "\u221e";
      t1 = C.JSNumber_methods.toInt$0(value);
      if (value === t1)
        return C.JSInt_methods.toString$0(Math.abs(t1));
      else
        return C.JSNumber_methods.toString$0(Math.abs(value));
    },
    Number: function Number(t0, t1, t2, t3) {
      var _ = this;
      _.isNamed = t0;
      _.absvalue = t1;
      _.name = t2;
      _._parameters = t3;
    },
    Union: function Union(t0) {
      this._methodTable = t0;
    },
    Union_operateRosterSetInterval_closure: function Union_operateRosterSetInterval_closure(t0) {
      this.first = t0;
    }
  },
  M = {
    BetaScript_runForWeb: function(source) {
      var t1 = {};
      t1.output = "";
      $.BetaScript_hadError = false;
      $.BetaScript__interpreter = A.BSInterpreter$();
      $.BetaScript_printCallback = new M.BetaScript_runForWeb_closure(t1);
      M.BetaScript__run(source);
      return t1.output;
    },
    BetaScript__run: function(source) {
      var statements, resolver,
        scanner = new O.BSScanner(source, H.setRuntimeTypeInfo([], type$.JSArray_legacy_Token), M.betascript_BetaScript_error$closure());
      scanner._initializeMap$0();
      statements = new G.BSParser(scanner.scanTokens$0(), M.betascript_BetaScript_error$closure()).parse$0();
      if ($.BetaScript_hadError)
        return;
      resolver = L.Resolver$($.$get$BetaScript__interpreter());
      C.JSArray_methods.forEach$1(type$.legacy_List_legacy_Stmt._as(statements), resolver.get$_resolveStmt());
      if ($.BetaScript_hadError)
        return;
      $.$get$BetaScript__interpreter().interpret$1(statements);
    },
    BetaScript_error: function(value, message) {
      var t1, t2, t3;
      if (H._isInt(value)) {
        $.BetaScript_printCallback.call$1("[Line " + H.S(value) + "] Error : " + message);
        $.BetaScript_hadError = true;
      } else if (value instanceof L.Token)
        if (value.type === C.TokenType_56) {
          t1 = value.line;
          $.BetaScript_printCallback.call$1("[Line " + t1 + "] Error  at end: " + message);
          $.BetaScript_hadError = true;
        } else {
          t1 = value.lexeme;
          t2 = $.BetaScript_printCallback;
          t3 = value.line;
          if (t1 === "\n") {
            t2.call$1("[Line " + t3 + "] Error  at linebreak ('\\n'): " + message);
            $.BetaScript_hadError = true;
          } else {
            t1 = " at '" + t1 + "'";
            t2.call$1("[Line " + t3 + "] Error " + t1 + ": " + message);
            $.BetaScript_hadError = true;
          }
        }
      else {
        t1 = "at unknown location: '" + H.S(value) + "'";
        $.BetaScript_printCallback.call$1("[Line " + -1 + "] Error " + t1 + ": " + message);
        $.BetaScript_hadError = true;
      }
    },
    BetaScript_runForWeb_closure: function BetaScript_runForWeb_closure(t0) {
      this._box_0 = t0;
    },
    Comparison: function Comparison() {
    },
    Comparison_solution_closure: function Comparison_solution_closure() {
    },
    Comparison_parameters_closure: function Comparison_parameters_closure() {
    },
    csch: function(operand) {
      return operand instanceof L.ArCscH ? operand.operand : new M.CscH(operand, null);
    },
    CscH: function CscH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    PlainSetStringifier: function PlainSetStringifier() {
    },
    PlainSetStringifier_visitBuilderSet_closure: function PlainSetStringifier_visitBuilderSet_closure() {
    },
    PlainSetStringifier_visitRosterSet_closure: function PlainSetStringifier_visitRosterSet_closure() {
    },
    PlainSetStringifier_visitSetUnion_closure: function PlainSetStringifier_visitSetUnion_closure() {
    },
    SingleOperandFunction: function SingleOperandFunction() {
    },
    tan: function(operand) {
      return operand instanceof Q.ArcTan ? operand.operand : new M.Tan(operand, null);
    },
    Tan: function Tan(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    }
  },
  K = {
    builderSet: function(rule, parameters) {
      var t1, t2, t3,
        sol = rule.get$solution();
      if (rule.get$foundEverySolution())
        return sol;
      else {
        if (parameters == null) {
          t1 = rule.get$parameters();
          t2 = t1.$ti;
          t3 = t2._eval$1("EfficientLengthMappedIterable<1,Variable*>");
          parameters = P.List_List$from(new H.EfficientLengthMappedIterable(t1, t2._eval$1("Variable*(1)")._as(new K.builderSet_closure()), t3), true, t3._eval$1("Iterable.E"));
        }
        return new K.BuilderSet(parameters, rule);
      }
    },
    builderSet_closure: function builderSet_closure() {
    },
    BuilderSet: function BuilderSet(t0, t1) {
      this.parameters = t0;
      this.rule = t1;
    }
  },
  X = {BSClass: function BSClass(t0, t1, t2) {
      this.name = t0;
      this._superclass = t1;
      this._methods = t2;
    },
    ctg: function(operand) {
      return operand instanceof U.ArcCtg ? operand.operand : new X.Ctg(operand, null);
    },
    Ctg: function Ctg(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    exp: function(exponent, base) {
      var t2,
        t1 = J.getInterceptor$(exponent);
      if (t1.$eq(exponent, T.n(1)))
        return base;
      if (t1.$eq(exponent, T.n(0)))
        return T.n(1);
      if (exponent instanceof T.Number && base instanceof T.Number && !exponent.isNamed && !base.isNamed) {
        t1 = base.absvalue;
        t2 = exponent.absvalue;
        H.checkNum(t1);
        H.checkNum(t2);
        return T.n(Math.pow(t1, t2));
      } else if (base instanceof X.Exponentiation) {
        t1 = base.base;
        t2 = base.exponent;
        exponent.toString;
        t2 = F.multiply(H.setRuntimeTypeInfo([exponent, t2], type$.JSArray_legacy_BSFunction));
        t1.toString;
        return X.exp(t2, t1);
      } else
        return new X.Exponentiation(base, exponent, null);
    },
    Exponentiation: function Exponentiation(t0, t1, t2) {
      this.base = t0;
      this.exponent = t1;
      this._parameters = t2;
    },
    SetDefinitionError$: function(message) {
      return new X.SetDefinitionError(message);
    },
    BSSet: function BSSet() {
    },
    SetDefinitionError: function SetDefinitionError(t0) {
      this.message = t0;
    },
    SetOperation: function SetOperation() {
    },
    EmptyFilteringSetOperation: function EmptyFilteringSetOperation() {
    },
    EmptyTreatingSetOperation: function EmptyTreatingSetOperation() {
    },
    EmptyFilteringComutativeSetOperation: function EmptyFilteringComutativeSetOperation() {
    }
  },
  A = {
    cos: function(operand) {
      return operand instanceof N.ArcCos ? operand.operand : new A.Cos(operand, null);
    },
    Cos: function Cos(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    ctgh: function(operand) {
      return operand instanceof V.ArCtgH ? operand.operand : new A.CtgH(operand, null);
    },
    CtgH: function CtgH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    BSInterpreter$: function() {
      var t1 = type$.legacy_String,
        t2 = type$.legacy_Object;
      t2 = new A.BSInterpreter(new O.Environment(P.HashMap_HashMap(t1, t2), null), P.HashMap_HashMap(type$.legacy_Expr, type$.legacy_int), new D.DirectiveManager(P.LinkedHashMap_LinkedHashMap$_literal(["bs_tt_interpret", false], t1, t2), P.LinkedHashMap_LinkedHashMap$_empty(t1, t2)));
      t2.BSInterpreter$0();
      return t2;
    },
    BSInterpreter__istruthy: function(object) {
      var t1;
      if (object instanceof S.BSLogical)
        return object._value === C._logic_0;
      t1 = J.getInterceptor$(object);
      return !t1.$eq(object, false) && object != null && !t1.$eq(object, C.C_EmptySet);
    },
    BSInterpreter__isEqual: function(a, b) {
      return a.$eq(0, b);
    },
    RuntimeError$: function(token, message) {
      return new A.RuntimeError0(token, message);
    },
    BSInterpreter: function BSInterpreter(t0, t1, t2) {
      var _ = this;
      _.globals = t0;
      _._locals = t1;
      _._environment = null;
      _.directives = t2;
    },
    RuntimeError0: function RuntimeError0(t0, t1) {
      this.token = t0;
      this.message = t1;
    },
    Return: function Return(t0) {
      this.value = t0;
    },
    Not: function Not(t0) {
      this.operand = t0;
    },
    Solver: function Solver() {
    },
    BetascriptSolverError: function BetascriptSolverError(t0, t1) {
      this.message = t0;
      this.expression = t1;
    }
  },
  D = {
    cosh: function(operand) {
      return operand instanceof Y.ArCosH ? operand.operand : new D.CosH(operand, null);
    },
    CosH: function CosH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    DirectiveManager: function DirectiveManager(t0, t1) {
      this._globalDirectives = t0;
      this._localDirectives = t1;
    },
    Intersection: function Intersection(t0) {
      this._methodTable = t0;
    },
    Intersection_operateRosterSetBuilderSet_closure: function Intersection_operateRosterSetBuilderSet_closure(t0) {
      this.second = t0;
    },
    Intersection_operateRosterSetInterval_closure: function Intersection_operateRosterSetInterval_closure(t0) {
      this.second = t0;
    },
    Intersection_operateRosterSetRosterSet_closure: function Intersection_operateRosterSetRosterSet_closure(t0) {
      this.second = t0;
    },
    Intersection_operateSetUnionInterval_closure: function Intersection_operateSetUnionInterval_closure(t0) {
      this.second = t0;
    },
    Intersection_operateSetUnionRosterSet_closure: function Intersection_operateSetUnionRosterSet_closure(t0) {
      this.first = t0;
    },
    Intersection_operateSetUnionSetUnion_closure: function Intersection_operateSetUnionSetUnion_closure(t0) {
      this.first = t0;
    },
    sech: function(operand) {
      return operand instanceof N.ArSecH ? operand.operand : new D.SecH(operand, null);
    },
    SecH: function SecH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    sinh: function(operand) {
      return operand instanceof Z.ArSinH ? operand.operand : new D.SinH(operand, null);
    },
    SinH: function SinH(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    }
  },
  S = {
    divide: function(numeratorList, denominatorList) {
      var numerator, denominator, t1, t2, t3, div;
      S._openMultiplicationsAndDivisions(numeratorList, denominatorList);
      S._createExponents0(numeratorList);
      S._createExponents0(denominatorList);
      S._eliminateDuplicates(numeratorList, denominatorList);
      numerator = F.multiply(numeratorList);
      if (denominatorList.length === 0)
        return numerator;
      denominator = F.multiply(denominatorList);
      t1 = J.getInterceptor$(numerator);
      if (t1.$eq(numerator, denominator))
        return T.n(1);
      if (t1.$eq(numerator, T.n(0)))
        return T.n(0);
      t1 = denominator.asConstant$0();
      t1 = t1 == null ? null : t1.get$approx();
      t1 = J.$eq$(t1, T.n(0));
      if (t1)
        if (C.JSBool_methods.$xor(numerator instanceof F.Negative, denominator instanceof F.Negative))
          return C.Negative_T3K;
        else
          return C.Number_8xB;
      t1 = numerator instanceof F.Negative;
      t2 = t1 ? numerator.operand : numerator;
      t3 = denominator instanceof F.Negative;
      div = new S.Division(t2, t3 ? denominator.operand : denominator, null);
      return C.JSBool_methods.$xor(t1, t3) ? F.negative(div) : div;
    },
    _eliminateDuplicates: function(numeratorList, denominatorList) {
      var t1, i, t2, f, base, exponent, j, g;
      for (t1 = type$.JSArray_legacy_BSFunction, i = 0; t2 = numeratorList.length, i < t2; ++i) {
        f = numeratorList[i];
        if (f instanceof X.Exponentiation) {
          base = f.base;
          exponent = f.exponent;
        } else {
          exponent = T.n(1);
          base = f;
        }
        for (j = 0; j < denominatorList.length; ++j) {
          g = denominatorList[j];
          if (g instanceof X.Exponentiation) {
            if (J.$eq$(g.base, base)) {
              C.JSArray_methods.removeAt$1(denominatorList, j);
              t2 = g.exponent;
              exponent.toString;
              t2.toString;
              exponent = Z.add(H.setRuntimeTypeInfo([exponent, F.negative(t2)], t1));
            }
          } else if (J.$eq$(g, base)) {
            C.JSArray_methods.removeAt$1(denominatorList, j);
            t2 = T.n(1);
            exponent.toString;
            t2.toString;
            exponent = Z.add(H.setRuntimeTypeInfo([exponent, F.negative(t2)], t1));
          }
        }
        C.JSArray_methods.removeAt$1(numeratorList, i);
        if (exponent instanceof F.Negative && exponent.operand instanceof T.Number) {
          t2 = F.negative(exponent);
          base.toString;
          C.JSArray_methods.add$1(denominatorList, X.exp(t2, base));
        } else {
          base.toString;
          C.JSArray_methods.insert$2(numeratorList, i, X.exp(exponent, base));
        }
      }
      if (t2 === 0)
        C.JSArray_methods.add$1(numeratorList, T.n(1));
    },
    _openMultiplicationsAndDivisions: function(numeratorList, denominatorList) {
      var i, f, numerator, denominator;
      for (i = 0; i < numeratorList.length;) {
        f = numeratorList[i];
        if (f instanceof F.Multiplication) {
          C.JSArray_methods.removeAt$1(numeratorList, i);
          C.JSArray_methods.insertAll$2(numeratorList, i, f.operands);
        } else if (f instanceof S.Division) {
          C.JSArray_methods.removeAt$1(numeratorList, i);
          numerator = f.numerator;
          if (numerator instanceof F.Multiplication)
            C.JSArray_methods.insertAll$2(numeratorList, i, numerator.operands);
          else
            C.JSArray_methods.insert$2(numeratorList, i, numerator);
          denominator = f.denominator;
          if (denominator instanceof F.Multiplication)
            C.JSArray_methods.addAll$1(denominatorList, denominator.operands);
          else
            C.JSArray_methods.add$1(denominatorList, denominator);
        } else
          ++i;
      }
      for (i = 0; i < denominatorList.length;) {
        f = denominatorList[i];
        if (f instanceof F.Multiplication) {
          C.JSArray_methods.removeAt$1(denominatorList, i);
          C.JSArray_methods.insertAll$2(denominatorList, i, f.operands);
        } else if (f instanceof S.Division) {
          C.JSArray_methods.removeAt$1(denominatorList, i);
          numerator = f.numerator;
          if (numerator instanceof F.Multiplication)
            C.JSArray_methods.insertAll$2(denominatorList, i, numerator.operands);
          else
            C.JSArray_methods.insert$2(denominatorList, i, numerator);
          denominator = f.denominator;
          if (denominator instanceof F.Multiplication)
            C.JSArray_methods.addAll$1(numeratorList, denominator.operands);
          else
            C.JSArray_methods.add$1(numeratorList, denominator);
        } else
          ++i;
      }
    },
    _createExponents0: function(operands) {
      var t1, i, f, base, exponent, j, j0, g, t2;
      for (t1 = type$.JSArray_legacy_BSFunction, i = 0; i < operands.length; i = j) {
        f = operands[i];
        if (f instanceof X.Exponentiation) {
          base = f.base;
          exponent = f.exponent;
        } else {
          exponent = T.n(1);
          base = f;
        }
        for (j = i + 1, j0 = j; j0 < operands.length; ++j0) {
          g = operands[j0];
          if (g instanceof X.Exponentiation) {
            if (J.$eq$(g.base, base)) {
              C.JSArray_methods.removeAt$1(operands, j0);
              t2 = g.exponent;
              exponent.toString;
              exponent = Z.add(H.setRuntimeTypeInfo([exponent, t2], t1));
            }
          } else if (J.$eq$(g, base)) {
            C.JSArray_methods.removeAt$1(operands, j0);
            t2 = T.n(1);
            exponent.toString;
            exponent = Z.add(H.setRuntimeTypeInfo([exponent, t2], t1));
          }
        }
        if (!J.$eq$(exponent, T.n(1))) {
          C.JSArray_methods.removeAt$1(operands, i);
          base.toString;
          C.JSArray_methods.insert$2(operands, i, X.exp(exponent, base));
        }
      }
    },
    Division: function Division(t0, t1, t2) {
      this.numerator = t0;
      this.denominator = t1;
      this._parameters = t2;
    },
    sec: function(operand) {
      return operand instanceof Y.ArcSec ? operand.operand : new S.Sec(operand, null);
    },
    Sec: function Sec(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    SingleVariableSolver: function SingleVariableSolver(t0) {
      this._everySolutionFound = false;
      this.expr = t0;
      this.doesApply = false;
    },
    _logic: function _logic(t0) {
      this._three_valued_logic$_name = t0;
    },
    BSLogical: function BSLogical(t0, t1) {
      this._three_valued_logic$_name = t0;
      this._value = t1;
    },
    variable: function($name) {
      return new S.Variable($name, null);
    },
    Variable: function Variable(t0, t1) {
      this.name = t0;
      this._parameters = t1;
    }
  },
  O = {Environment: function Environment(t0, t1) {
      this.values = t0;
      this.enclosing = t1;
    },
    interval: function(a, b, leftClosed, rightClosed) {
      a = a.asConstant$0();
      b = b.asConstant$0();
      if (a == null || b == null)
        throw H.wrapException(F.BetascriptFunctionError$("sets can only be defined in numbers"));
      if (J.$eq$(a, b))
        return leftClosed && rightClosed ? E.rosterSet(H.setRuntimeTypeInfo([a], type$.JSArray_legacy_BSFunction)) : C.C_EmptySet;
      else if (a.$gt(0, b))
        return C.C_EmptySet;
      else
        return new O.Interval(leftClosed, rightClosed, a, b);
    },
    Interval: function Interval(t0, t1, t2, t3) {
      var _ = this;
      _.leftClosed = t0;
      _.rightClosed = t1;
      _.a = t2;
      _.b = t3;
    },
    log: function(operand, base) {
      var t1 = J.getInterceptor$(operand);
      if (t1.$eq(operand, T.n(1)))
        return T.n(0);
      else if (t1.$eq(operand, base))
        return T.n(1);
      else
        return new O.Log(base, operand, null);
    },
    Log: function Log(t0, t1, t2) {
      this.base = t0;
      this.operand = t1;
      this._parameters = t2;
    },
    RelativeComplement: function RelativeComplement(t0) {
      this._methodTable = t0;
    },
    RelativeComplement__removeIteratively_closure: function RelativeComplement__removeIteratively_closure(t0) {
      this.first = t0;
    },
    RelativeComplement__removeWhereBelongs_closure: function RelativeComplement__removeWhereBelongs_closure(t0) {
      this.second = t0;
    },
    RelativeComplement_operateRosterSetRosterSet_closure: function RelativeComplement_operateRosterSetRosterSet_closure(t0) {
      this.second = t0;
    },
    RelativeComplement__complementFromEvery_closure: function RelativeComplement__complementFromEvery_closure(t0) {
      this.other = t0;
    },
    root: function(operand) {
      var t1, t2, t3, t4;
      if (operand instanceof X.Exponentiation) {
        t1 = operand.base;
        t2 = operand.exponent;
        t3 = T.n(2);
        t2.toString;
        t4 = type$.JSArray_legacy_BSFunction;
        t4 = S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t3], t4));
        t1.toString;
        return X.exp(t4, t1);
      } else
        return new O.Root(operand, null);
    },
    Root: function Root(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    BSScanner_IsDigit: function(c) {
      var t1 = c == null ? null : c.length;
      return (t1 == null ? 0 : t1) === 1 && (J._codeUnitAt$1$s(c, 0) ^ 48) <= 9;
    },
    BSScanner_isAlpha: function(c) {
      var t1 = c == null ? null : c.length;
      if ((t1 == null ? 0 : t1) === 1)
        if (c !== "")
          if (!(C.JSString_methods.compareTo$1("a", c) <= 0 && C.JSString_methods.compareTo$1("z", c) >= 0))
            t1 = C.JSString_methods.compareTo$1("A", c) <= 0 && C.JSString_methods.compareTo$1("Z", c) >= 0;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = false;
      return t1;
    },
    BSScanner: function BSScanner(t0, t1, t2) {
      var _ = this;
      _.source = t0;
      _.tokens = t1;
      _.errorCallback = t2;
      _.charToLexeme = null;
      _.current = _.start = 0;
      _.line = 1;
    },
    BSScanner__initializeMap_closure: function BSScanner__initializeMap_closure(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure0: function BSScanner__initializeMap_closure0(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure1: function BSScanner__initializeMap_closure1(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure2: function BSScanner__initializeMap_closure2(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure3: function BSScanner__initializeMap_closure3(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure4: function BSScanner__initializeMap_closure4(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure5: function BSScanner__initializeMap_closure5(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure6: function BSScanner__initializeMap_closure6(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure7: function BSScanner__initializeMap_closure7(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure8: function BSScanner__initializeMap_closure8(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure9: function BSScanner__initializeMap_closure9(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure10: function BSScanner__initializeMap_closure10(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure11: function BSScanner__initializeMap_closure11(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure12: function BSScanner__initializeMap_closure12(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure13: function BSScanner__initializeMap_closure13(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure14: function BSScanner__initializeMap_closure14(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure15: function BSScanner__initializeMap_closure15(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure16: function BSScanner__initializeMap_closure16(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure17: function BSScanner__initializeMap_closure17(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure18: function BSScanner__initializeMap_closure18(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure19: function BSScanner__initializeMap_closure19(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure20: function BSScanner__initializeMap_closure20(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure21: function BSScanner__initializeMap_closure21(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure22: function BSScanner__initializeMap_closure22(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure23: function BSScanner__initializeMap_closure23(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure24: function BSScanner__initializeMap_closure24() {
    },
    BSScanner__initializeMap_closure25: function BSScanner__initializeMap_closure25() {
    },
    BSScanner__initializeMap_closure26: function BSScanner__initializeMap_closure26() {
    },
    BSScanner__initializeMap_closure27: function BSScanner__initializeMap_closure27(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure28: function BSScanner__initializeMap_closure28(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure29: function BSScanner__initializeMap_closure29(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure30: function BSScanner__initializeMap_closure30(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure31: function BSScanner__initializeMap_closure31(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure32: function BSScanner__initializeMap_closure32(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure33: function BSScanner__initializeMap_closure33(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure34: function BSScanner__initializeMap_closure34(t0) {
      this.$this = t0;
    },
    BSScanner__initializeMap_closure35: function BSScanner__initializeMap_closure35(t0) {
      this.$this = t0;
    }
  },
  F = {
    BetascriptFunctionError$: function(_message) {
      return new F.BetascriptFunctionError(_message);
    },
    BSFunction: function BSFunction() {
    },
    BSFunction_call_closure: function BSFunction_call_closure() {
    },
    BetascriptFunctionError: function BetascriptFunctionError(t0) {
      this._function$_message = t0;
    },
    FunctionAdapter: function FunctionAdapter(t0) {
      this.adaptee = t0;
    },
    FunctionAdapter_callThing_closure: function FunctionAdapter_callThing_closure() {
    },
    multiply: function(operands) {
      var t2, divisionNegatives, i, divisions, i0, _op, t3, _i, dens, f, numerator, denominator, _negative, _mul,
        t1 = operands.length;
      if (t1 === 0)
        return T.n(0);
      F._openOtherMultiplications(operands);
      for (t1 = type$.legacy_Division, t2 = type$.JSArray_legacy_Division, divisionNegatives = false, i = 0; i < operands.length; ++i) {
        divisions = H.setRuntimeTypeInfo([], t2);
        for (i0 = 0; i0 < operands.length;) {
          _op = B.extractFromNegative(operands[i0], t1);
          t3 = _op.first;
          if (t3 != null) {
            C.JSArray_methods.removeAt$1(operands, i0);
            if (H.boolConversionCheck(_op.second))
              divisionNegatives = !divisionNegatives;
            C.JSArray_methods.add$1(divisions, t3);
          } else
            ++i0;
        }
        if (divisions.length !== 0) {
          t1 = type$.JSArray_legacy_BSFunction;
          t2 = H.setRuntimeTypeInfo([], t1);
          for (t3 = operands.length, _i = 0; _i < operands.length; operands.length === t3 || (0, H.throwConcurrentModificationError)(operands), ++_i)
            C.JSArray_methods.add$1(t2, operands[_i]);
          dens = H.setRuntimeTypeInfo([], t1);
          for (t1 = divisions.length, _i = 0; _i < divisions.length; divisions.length === t1 || (0, H.throwConcurrentModificationError)(divisions), ++_i) {
            f = divisions[_i];
            numerator = f.numerator;
            if (numerator instanceof F.Multiplication)
              C.JSArray_methods.addAll$1(t2, numerator.operands);
            else
              C.JSArray_methods.add$1(t2, numerator);
            denominator = f.denominator;
            if (denominator instanceof F.Multiplication)
              C.JSArray_methods.addAll$1(dens, denominator.operands);
            else
              C.JSArray_methods.add$1(dens, denominator);
          }
          return S.divide(t2, dens);
        }
      }
      _negative = C.JSBool_methods.$xor(C.JSBool_methods.$xor(F._multiplyNumbers(operands), F._consolidateNegatives(operands)), divisionNegatives);
      F._createExponents(operands);
      t1 = operands.length;
      if (t1 === 0)
        return T.n(0);
      else if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(operands, 0);
        _mul = operands[0];
      } else
        _mul = new F.Multiplication(operands, null);
      return _negative ? F.negative(_mul) : _mul;
    },
    _openOtherMultiplications: function(operands) {
      var t1, i, _op, t2;
      for (t1 = type$.legacy_Multiplication, i = 0; i < operands.length;) {
        _op = B.extractFromNegative(operands[i], t1);
        t2 = _op.first;
        if (t2 != null) {
          C.JSArray_methods.removeAt$1(operands, i);
          C.JSArray_methods.insertAll$2(operands, i, t2.operands);
          if (H.boolConversionCheck(_op.second))
            C.JSArray_methods.add$1(operands, T.n(-1));
        } else
          ++i;
      }
    },
    _multiplyNumbers: function(operands) {
      var t1, t2, number, i, _op, t3, t4, negative, numbers,
        namedNumbers = P.HashMap_HashMap(type$.legacy_String, type$.legacy_Pair_of_legacy_double_and_legacy_int);
      for (t1 = type$.legacy_Number, t2 = type$.Pair_of_legacy_double_and_legacy_int, number = 1, i = 0; i < operands.length;) {
        _op = B.extractFromNegative(operands[i], t1);
        t3 = _op.first;
        if (t3 != null) {
          C.JSArray_methods.removeAt$1(operands, i);
          if (!t3.isNamed) {
            t3 = t3.absvalue;
            t4 = H.boolConversionCheck(_op.second) ? -1 : 1;
            if (typeof t3 !== "number")
              return t3.$mul();
            number *= t3 * t4;
          } else {
            t4 = t3.name;
            if (!namedNumbers.containsKey$1(t4))
              namedNumbers.$indexSet(0, t4, new G.Pair(t3.absvalue, 0, t2));
            t3 = namedNumbers.$index(0, t4);
            t4 = t3.second;
            if (typeof t4 !== "number")
              return t4.$add();
            t3.set$second(t4 + 1);
            if (H.boolConversionCheck(_op.second))
              number *= -1;
          }
        } else
          ++i;
      }
      if (number === 0) {
        C.JSArray_methods.set$length(operands, 0);
        negative = false;
      } else {
        numbers = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSFunction);
        negative = number < 0 && true;
        t1 = Math.abs(number);
        t2 = t1 === 1;
        if (!t2)
          C.JSArray_methods.add$1(numbers, T.n(t1));
        for (t1 = new P._HashMapKeyIterable(namedNumbers, H._instanceType(namedNumbers)._eval$1("_HashMapKeyIterable<1>")), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t3 = t1._collection$_current;
          if (namedNumbers.$index(0, t3).second !== 0) {
            t4 = namedNumbers.$index(0, t3).first;
            C.JSArray_methods.add$1(numbers, X.exp(T.n(namedNumbers.$index(0, t3).second), new T.Number(true, t4, t3, null)));
          }
        }
        C.JSArray_methods.insertAll$2(operands, 0, numbers);
        if (t2 && operands.length === 0)
          C.JSArray_methods.add$1(operands, T.n(1));
      }
      return negative;
    },
    _consolidateNegatives: function(operands) {
      var t2, t3, newOperands, t1 = {};
      t1._negative = false;
      t2 = H._arrayInstanceType(operands);
      t3 = t2._eval$1("MappedListIterable<1,BSFunction*>");
      newOperands = P.List_List$from(new H.MappedListIterable(operands, t2._eval$1("BSFunction*(1)")._as(new F._consolidateNegatives_closure(t1)), t3), true, t3._eval$1("ListIterable.E"));
      C.JSArray_methods.set$length(operands, 0);
      C.JSArray_methods.insertAll$2(operands, 0, newOperands);
      return t1._negative;
    },
    _createExponents: function(operands) {
      var t1, i, f, base, exponent, j, j0, g, t2;
      for (t1 = type$.JSArray_legacy_BSFunction, i = 0; i < operands.length; i = j) {
        f = operands[i];
        if (f instanceof X.Exponentiation) {
          base = f.base;
          exponent = f.exponent;
        } else {
          exponent = T.n(1);
          base = f;
        }
        for (j = i + 1, j0 = j; j0 < operands.length; ++j0) {
          g = operands[j0];
          if (g instanceof X.Exponentiation) {
            if (J.$eq$(g.base, base)) {
              C.JSArray_methods.removeAt$1(operands, j0);
              t2 = g.exponent;
              exponent.toString;
              exponent = Z.add(H.setRuntimeTypeInfo([exponent, t2], t1));
            }
          } else if (J.$eq$(g, base)) {
            C.JSArray_methods.removeAt$1(operands, j0);
            t2 = T.n(1);
            exponent.toString;
            exponent = Z.add(H.setRuntimeTypeInfo([exponent, t2], t1));
          }
        }
        if (!J.$eq$(exponent, T.n(1))) {
          C.JSArray_methods.removeAt$1(operands, i);
          base.toString;
          C.JSArray_methods.insert$2(operands, i, X.exp(exponent, base));
        }
      }
    },
    Multiplication: function Multiplication(t0, t1) {
      this.operands = t0;
      this._parameters = t1;
    },
    _consolidateNegatives_closure: function _consolidateNegatives_closure(t0) {
      this._box_0 = t0;
    },
    negative: function(op) {
      if (op instanceof F.Negative)
        return op.operand;
      if (J.$eq$(op, T.n(0)))
        return op;
      else
        return new F.Negative(op, null);
    },
    Negative: function Negative(t0, t1) {
      this.operand = t0;
      this._parameters = t1;
    },
    Stmt: function Stmt() {
    },
    ExpressionStmt: function ExpressionStmt(t0) {
      this.expression = t0;
    },
    PrintStmt: function PrintStmt(t0) {
      this.expression = t0;
    },
    VarStmt: function VarStmt(t0, t1, t2) {
      this.name = t0;
      this.parameters = t1;
      this.initializer = t2;
    },
    BlockStmt: function BlockStmt(t0) {
      this.statements = t0;
    },
    IfStmt: function IfStmt(t0, t1, t2) {
      this.condition = t0;
      this.thenBranch = t1;
      this.elseBranch = t2;
    },
    RoutineStmt: function RoutineStmt(t0, t1, t2) {
      this.name = t0;
      this.parameters = t1;
      this.body = t2;
    },
    WhileStmt: function WhileStmt(t0, t1, t2) {
      this.token = t0;
      this.condition = t1;
      this.body = t2;
    },
    ReturnStmt: function ReturnStmt(t0, t1) {
      this.keyword = t0;
      this.value = t1;
    },
    ClassStmt: function ClassStmt(t0, t1, t2) {
      this.name = t0;
      this.superclass = t1;
      this.methods = t2;
    },
    DirectiveStmt: function DirectiveStmt(t0) {
      this.directive = t0;
    }
  },
  B = {GreaterOrEqual: function GreaterOrEqual(t0, t1) {
      this.left = t0;
      this.right = t1;
      this._foundEverySolution = false;
    }, NativeCallable: function NativeCallable(t0, t1) {
      this._arity = t0;
      this._function = t1;
    },
    toNums: function(a, b, op) {
      var _a = a.toNum$0(),
        _b = b.toNum$0();
      if (_a == null || _b == null)
        if (op != null)
          throw H.wrapException(F.BetascriptFunctionError$("operand " + op + " can only be used on numbers"));
        else
          return null;
      return new G.Pair(_a, _b, type$.Pair_of_legacy_num_and_legacy_num);
    },
    min: function(x, y) {
      var v = B.toNums(x, y, "min"),
        t1 = v.first,
        t2 = v.second;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2 ? x : y;
    },
    max: function(x, y) {
      var v = B.toNums(x, y, "max"),
        t1 = v.first,
        t2 = v.second;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 > t2 ? x : y;
    },
    extractFromNegative: function(f, $T) {
      var _isInNegative, t1;
      if (f instanceof F.Negative) {
        f = f.operand;
        _isInNegative = true;
      } else
        _isInNegative = false;
      t1 = $T._eval$1("0*")._is(f) ? f : null;
      return new G.Pair(t1, _isInNegative, $T._eval$1("Pair<0*,bool*>"));
    }
  },
  E = {IntensionalSetIntersection: function IntensionalSetIntersection(t0, t1) {
      this.first = t0;
      this.second = t1;
    },
    rosterSet: function(elements) {
      var t2,
        t1 = J.getInterceptor$as(elements);
      if (t1.get$isEmpty(elements))
        return C.C_EmptySet;
      P.print(elements);
      t2 = type$.legacy_BSFunction;
      elements = t1.map$1$1(elements, new E.rosterSet_closure(), t2);
      P.print(elements);
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        if (t1.get$current() == null)
          throw H.wrapException(X.SetDefinitionError$(string$.Roster));
      return new E.RosterSet(P.SplayTreeSet_SplayTreeSet$from(elements, t2));
    },
    rosterSet_closure: function rosterSet_closure() {
    },
    RosterSet: function RosterSet(t0) {
      this.elements = t0;
    }
  },
  G = {LogicExpression: function LogicExpression() {
    }, ParseError: function ParseError() {
    }, BSParser: function BSParser(t0, t1) {
      this._tokens = t0;
      this._errorCallback = t1;
      this._parser$_current = 0;
    },
    setUnion: function(subsets) {
      var i, j, j0, t3, t4, element, rosterElements, _set,
        t1 = J.getInterceptor$a(subsets),
        t2 = t1.where$1(subsets, new G.setUnion_closure()),
        _subsets = P.List_List$from(t2, true, t2.$ti._eval$1("Iterable.E"));
      t2 = _subsets.length;
      if (t2 === 0)
        return C.C_EmptySet;
      if (t2 === 1)
        return t1.elementAt$1(subsets, 0);
      for (t1 = type$.legacy_BSSet, i = 0; i < t2; i = j) {
        j = i + 1;
        for (j0 = j; t2 = _subsets.length, j0 < t2;) {
          if (i !== j0) {
            if (i >= t2)
              return H.ioore(_subsets, i);
            t2 = _subsets[i];
            t3 = _subsets[j0];
            t2.toString;
            t1._as(t3);
            t4 = $.$get$BSSet__disjoined();
            t4.toString;
            t1._as(t2);
            t2 = t2 === C.C_EmptySet || t3 === C.C_EmptySet ? t4.onEmpty$2(t2, t3) : t4._methodTable.call$2(t2, t3);
            t2 = H._instanceType(t4)._eval$1("EmptyFilteringSetOperation.0*")._as(t2)._value !== C._logic_0;
          } else
            t2 = false;
          if (t2) {
            t2 = _subsets.length;
            if (i >= t2)
              return H.ioore(_subsets, i);
            t3 = _subsets[i];
            if (j0 >= t2)
              return H.ioore(_subsets, j0);
            t2 = _subsets[j0];
            t3.toString;
            t1._as(t2);
            t4 = $.$get$BSSet__union();
            t4.toString;
            t1._as(t3);
            t2 = t3 === C.C_EmptySet || t2 === C.C_EmptySet ? t4.onEmpty$2(t3, t2) : t4._methodTable.call$2(t3, t2);
            C.JSArray_methods.$indexSet(_subsets, i, H._instanceType(t4)._eval$1("EmptyFilteringSetOperation.0*")._as(t2));
            C.JSArray_methods.removeAt$1(_subsets, j0);
            j0 = j;
          } else
            ++j0;
        }
      }
      for (i = 0; i < _subsets.length; ++i) {
        element = _subsets[i];
        if (element instanceof G.SetUnion) {
          C.JSArray_methods.removeAt$1(_subsets, i);
          C.JSArray_methods.insertAll$2(_subsets, i, element.subsets);
        }
      }
      t1 = H._arrayInstanceType(_subsets);
      t2 = t1._eval$1("WhereIterable<1>");
      _subsets = P.List_List$from(new H.WhereIterable(_subsets, t1._eval$1("bool(1)")._as(new G.setUnion_closure0()), t2), true, t2._eval$1("Iterable.E"));
      rosterElements = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSFunction);
      for (i = 0; i < _subsets.length;) {
        _set = _subsets[i];
        if (_set instanceof E.RosterSet) {
          C.JSArray_methods.addAll$1(rosterElements, _set.elements);
          C.JSArray_methods.removeAt$1(_subsets, i);
        } else if (_set instanceof Y.EmptySet)
          C.JSArray_methods.removeAt$1(_subsets, i);
        else
          ++i;
      }
      if (rosterElements.length !== 0)
        C.JSArray_methods.add$1(_subsets, E.rosterSet(rosterElements));
      t1 = _subsets.length;
      if (t1 === 0)
        return C.C_EmptySet;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(_subsets, 0);
        return _subsets[0];
      }
      return new G.SetUnion(_subsets);
    },
    setUnion_closure: function setUnion_closure() {
    },
    setUnion_closure0: function setUnion_closure0() {
    },
    SetUnion: function SetUnion(t0) {
      this.subsets = t0;
    },
    SetUnion_complement_closure: function SetUnion_complement_closure() {
    },
    SetUnion_knownElements_closure: function SetUnion_knownElements_closure() {
    },
    Pair: function Pair(t0, t1, t2) {
      this.first = t0;
      this.second = t1;
      this.$ti = t2;
    }
  };
  var holders = [C, H, J, P, W, Y, R, N, L, U, Q, V, Z, T, M, K, X, A, D, S, O, F, B, E, G];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'";
    },
    get$runtimeType: function(receiver) {
      return H.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $or: function(receiver, other) {
      return other || receiver;
    },
    $xor: function(receiver, other) {
      return receiver !== other;
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      var t1;
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, end;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      t1 = receiver.length;
      if (index > t1)
        H.throwExpression(P.RangeError$range(index, 0, t1, "index", null));
      insertionLength = iterable.length;
      receiver.length = t1 + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    where$1: function(receiver, f) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.WhereIterable(receiver, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$a(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      var t1 = receiver.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, "start", null));
      if (start === t1)
        return H.setRuntimeTypeInfo([], H._arrayInstanceType(receiver));
      return H.setRuntimeTypeInfo(receiver.slice(start, t1), H._arrayInstanceType(receiver));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherList, i, t1;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      otherList = iterable;
      if (skipCount + $length > otherList.length)
        throw H.wrapException(P.StateError$("Too few elements"));
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i) {
          t1 = skipCount + i;
          if (t1 >= otherList.length)
            return H.ioore(otherList, t1);
          receiver[start + i] = otherList[t1];
        }
      else
        for (i = 0; i < $length; ++i) {
          t1 = skipCount + i;
          if (t1 >= otherList.length)
            return H.ioore(otherList, t1);
          receiver[start + i] = otherList[t1];
        }
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, H._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $indexSet: function(receiver, index, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || false)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H._asNumS(b);
      if (typeof b != "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_num_cv7;
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other != "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H._asStringS(other);
      if (typeof other != "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$runtimeType: function(receiver) {
      return C.Type_String_k8F;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isComparable: 1,
    $isString: 1
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), H._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      var cur = this.__internal$_current;
      return cur;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this.__internal$_iterable,
        $length = t1.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = _this.__internal$_index;
      if (t2 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t1.elementAt$1(0, t2));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return new H.MappedIterator(J.get$iterator$a(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    }
  };
  H.EfficientLengthMappedIterable.prototype = {};
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      var cur = this.__internal$_current;
      return cur;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$a(this._source, index));
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$a(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1: function(_, f, $T) {
      var t1 = this.$ti;
      return new H.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.ConstantMap.prototype = {
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H._asStringS(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key,
        t1 = H._instanceType(this);
      t1._eval$1("~(1,2)")._as(f);
      keys = this.__js_helper$_keys;
      for (t2 = keys.length, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, t1._as(this._fetch$1(key)));
      }
    },
    get$keys: function() {
      return new H._ConstantMapKeyIterable(this, H._instanceType(this)._eval$1("_ConstantMapKeyIterable<1>"));
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this.__js_helper$_map.__js_helper$_keys;
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length: function(_) {
      return this.__js_helper$_map.__js_helper$_keys.length;
    }
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0: function(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this.__js_helper$_target === other.__js_helper$_target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + this.message;
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, H._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    containsKey$1: function(key) {
      var strings, t1;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return false;
        return this._containsTableEntry$2(strings, key);
      } else {
        t1 = this.internalContainsKey$1(key);
        return t1;
      }
    },
    internalContainsKey$1: function(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff), key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else {
        rest = _this.__js_helper$_rest;
        if (rest == null)
          rest = _this.__js_helper$_rest = _this._newHashTable$0();
        hash = J.get$hashCode$(key) & 0x3ffffff;
        bucket = _this._getTableBucket$2(rest, hash);
        if (bucket == null)
          _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
        else {
          index = _this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(_this._newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 67108863;
      return cell;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$iterator: function(_) {
      var t1 = this.__js_helper$_map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 42
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 54
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asStringS(tag));
    },
    $signature: 55
  };
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1: function(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Type.prototype = {
    toString$0: function(_) {
      return H._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  H._Error.prototype = {
    toString$0: function(_) {
      return this.__rti$_message;
    }
  };
  H._TypeError.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 40
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 53
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 1
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 1
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = this.$ti._eval$1("2/"),
        t4 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t3._as(t4.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t3._as(t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), asyncError.error, t1, t2));
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0: function() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, t1, _this = this;
      type$.StackTrace._as(stackTrace);
      listeners = _this._removeListeners$0();
      t1 = P.AsyncError$(error, stackTrace);
      _this._state = 8;
      _this._resultOrListeners = t1;
      P._Future__propagateToListeners(_this, listeners);
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 1
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 1
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 40
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.target._completeError$2(error, type$.StackTrace._as(stackTrace));
    },
    $signature: 56
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners).error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && completeResult._state >= 4) {
        if (completeResult._state === 8) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 57
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, exception, t2, t3, t4, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (H.boolConversionCheck(t1.listener.matchesErrorTest$1(asyncError)) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t2, t3, _this = this, t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      t2 = _this.$ti;
      t3 = t2._eval$1("~(1)?")._as(new P.Stream_length_closure(t1, _this));
      type$.nullable_void_Function._as(new P.Stream_length_closure0(t1, future));
      W._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2._precomputed1);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      this.$this.$ti._precomputed1._as(_);
      ++this._box_0.count;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 1
  };
  P.StreamSubscription.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error = H.wrapException(this.error);
      error.stack = J.toString$0$(this.stackTrace);
      throw error;
    },
    $signature: 1
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return this.R._eval$1("0()");
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P._HashMap.prototype = {
    get$length: function(_) {
      return this._collection$_length;
    },
    get$keys: function() {
      return new P._HashMapKeyIterable(this, H._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    containsKey$1: function(key) {
      var strings, t1;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else {
        t1 = this._containsKey$1(key);
        return t1;
      }
    },
    _containsKey$1: function(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = P._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = P._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t1 = t1._precomputed1, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(t1._as(key), _this.$index(0, key));
        if (keys !== _this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._keys;
      if (result != null)
        return result;
      result = P.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      var t1 = H._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2: function(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    },
    $isHashMap: 1
  };
  P._HashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    }
  };
  P._HashMapKeyIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._collection$_modifications, H._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var t1 = this._contains$1(object);
      return t1;
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    get$last: function(_) {
      var last = this._collection$_last;
      if (last == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H._instanceType(this)._precomputed1._as(last._element);
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    _addHashTableEntry$2: function(table, element) {
      H._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_newLinkedCell$1: function(element) {
      var _this = this,
        cell = new P._LinkedHashSetCell(H._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else
        _this._collection$_last = _this._collection$_last._collection$_next = cell;
      ++_this._collection$_length;
      _this._collection$_modifications = 1073741823 & _this._collection$_modifications + 1;
      return cell;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  P.HashMap_HashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 58
  };
  P.IterableMixin.prototype = {
    get$length: function(_) {
      var count,
        t1 = this.$ti,
        it = P._SplayTreeKeyIterator$(this, t1._precomputed1, t1._eval$1("_SplayTreeSetNode<1>"));
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 59
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t1, key;
      H._instanceType(this)._eval$1("~(1,2)")._as(action);
      for (t1 = this.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, this.$index(0, key));
      }
    },
    get$length: function(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P.SetMixin.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = this.$ti;
      return new H.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    reduce$1: function(_, combine) {
      var iterator, value,
        t1 = this.$ti;
      t1._eval$1("1(1,1)")._as(combine);
      iterator = P._SplayTreeKeyIterator$(this, t1._precomputed1, t1._eval$1("_SplayTreeSetNode<1>"));
      if (!iterator.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      value = iterator.get$current();
      for (; iterator.moveNext$0();)
        value = combine.call$2(value, iterator.get$current());
      return value;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      P.ArgumentError_checkNotNull(index, _s5_, type$.int);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.$ti, t1 = P._SplayTreeKeyIterator$(this, t1._precomputed1, t1._eval$1("_SplayTreeSetNode<1>")), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    }
  };
  P._SetBase.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return new H.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    $isIterable: 1,
    $isSet: 1
  };
  P._SplayTreeNode.prototype = {
    set$left: function(left) {
      this.left = this.$ti._eval$1("_SplayTreeNode.1?")._as(left);
    },
    set$right: function(right) {
      this.right = this.$ti._eval$1("_SplayTreeNode.1?")._as(right);
    }
  };
  P._SplayTreeSetNode.prototype = {};
  P._SplayTree.prototype = {
    _splay$1: function(key) {
      var current, compare, comp, newTreeLeft, left, newTreeRight, right, currentLeft, currentLeft0, currentRight, currentRight0, _this = this, _null = null;
      _this.$ti._eval$1("_SplayTree.K")._as(key);
      current = _this._root;
      if (current == null)
        return -1;
      compare = _this._compare;
      for (comp = _null, newTreeLeft = comp, left = newTreeLeft, newTreeRight = left, right = newTreeRight; true;) {
        comp = compare.call$2(current.key, key);
        if (typeof comp !== "number")
          return comp.$gt();
        if (comp > 0) {
          currentLeft = current.left;
          if (currentLeft == null)
            break;
          comp = compare.call$2(currentLeft.key, key);
          if (typeof comp !== "number")
            return comp.$gt();
          if (comp > 0) {
            current.set$left(currentLeft.right);
            currentLeft.set$right(current);
            currentLeft0 = currentLeft.left;
            if (currentLeft0 == null) {
              current = currentLeft;
              break;
            }
            current = currentLeft;
            currentLeft = currentLeft0;
          }
          if (right == null)
            newTreeRight = current;
          else
            right.set$left(current);
          right = current;
          current = currentLeft;
        } else {
          if (comp < 0) {
            currentRight = current.right;
            if (currentRight == null)
              break;
            comp = compare.call$2(currentRight.key, key);
            if (typeof comp !== "number")
              return comp.$lt();
            if (comp < 0) {
              current.set$right(currentRight.left);
              currentRight.set$left(current);
              currentRight0 = currentRight.right;
              if (currentRight0 == null) {
                current = currentRight;
                break;
              }
              current = currentRight;
              currentRight = currentRight0;
            }
            if (left == null)
              newTreeLeft = current;
            else
              left.set$right(current);
          } else
            break;
          left = current;
          current = currentRight;
        }
      }
      if (left != null) {
        left.set$right(current.left);
        current.set$left(newTreeLeft);
      }
      if (right != null) {
        right.set$left(current.right);
        current.set$right(newTreeRight);
      }
      _this.set$_root(current);
      ++_this._splayCount;
      return comp;
    },
    _splayMin$1: function(node) {
      var nextLeft, current, nextLeft0;
      this.$ti._eval$1("_SplayTree.1")._as(node);
      nextLeft = node.left;
      for (current = node; nextLeft != null; current = nextLeft, nextLeft = nextLeft0) {
        current.set$left(nextLeft.right);
        nextLeft.set$right(current);
        nextLeft0 = nextLeft.left;
      }
      return current;
    },
    _splayMax$1: function(node) {
      var nextRight, current, nextRight0;
      this.$ti._eval$1("_SplayTree.1")._as(node);
      nextRight = node.right;
      for (current = node; nextRight != null; current = nextRight, nextRight = nextRight0) {
        current.set$right(nextRight.left);
        nextRight.set$left(current);
        nextRight0 = nextRight.right;
      }
      return current;
    },
    _addNewRoot$2: function(node, comp) {
      var root, _this = this;
      _this.$ti._eval$1("_SplayTree.1")._as(node);
      ++_this._count;
      ++_this._modificationCount;
      root = _this._root;
      if (root == null) {
        _this.set$_root(node);
        return;
      }
      if (typeof comp !== "number")
        return comp.$lt();
      if (comp < 0) {
        node.set$left(root);
        node.set$right(root.right);
        root.set$right(null);
      } else {
        node.set$right(root);
        node.set$left(root.left);
        root.set$left(null);
      }
      _this.set$_root(node);
    },
    get$_collection$_first: function() {
      var _this = this,
        root = _this._root;
      if (root == null)
        return null;
      _this.set$_root(_this._splayMin$1(root));
      return _this._root;
    },
    get$_collection$_last: function() {
      var _this = this,
        root = _this._root;
      if (root == null)
        return null;
      _this.set$_root(_this._splayMax$1(root));
      return _this._root;
    }
  };
  P._SplayTreeIterator.prototype = {
    get$current: function() {
      var node = this._currentNode;
      if (node == null)
        return null;
      return this.$ti._rest[1]._as(node).key;
    },
    _findLeftMostDescendent$1: function(node) {
      var t1;
      this.$ti._eval$1("_SplayTreeIterator.1?")._as(node);
      for (t1 = this._workList; node != null;) {
        C.JSArray_methods.add$1(t1, node);
        node = node.left;
      }
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._tree;
      if (_this._modificationCount !== t1._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = _this._workList;
      if (t2.length === 0) {
        _this.set$_currentNode(null);
        return false;
      }
      if (t1._splayCount !== _this._splayCount && _this._currentNode != null) {
        t3 = _this._currentNode;
        t3.toString;
        _this.$ti._eval$1("_SplayTreeIterator.1")._as(t3);
        C.JSArray_methods.set$length(t2, 0);
        t1._splay$1(t3.key);
        _this._findLeftMostDescendent$1(t1._root.right);
      }
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      _this.set$_currentNode(t2.pop());
      _this._findLeftMostDescendent$1(_this._currentNode.right);
      return true;
    },
    set$_currentNode: function(_currentNode) {
      this._currentNode = this.$ti._eval$1("_SplayTreeIterator.1?")._as(_currentNode);
    },
    $isIterator: 1
  };
  P._SplayTreeKeyIterator.prototype = {};
  P.SplayTreeSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = _this.$ti;
      t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), _this._modificationCount, _this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      t1._findLeftMostDescendent$1(_this._root);
      return t1;
    },
    get$length: function(_) {
      return this._count;
    },
    get$first: function(_) {
      if (this._count === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.get$_collection$_first().key;
    },
    get$last: function(_) {
      if (this._count === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.get$_collection$_last().key;
    },
    contains$1: function(_, element) {
      return H.boolConversionCheck(this._validKey.call$1(element)) && this._splay$1(this.$ti._precomputed1._as(element)) === 0;
    },
    add$1: function(_, element) {
      var compare,
        t1 = this.$ti;
      t1._precomputed1._as(element);
      compare = this._splay$1(element);
      if (compare === 0)
        return false;
      this._addNewRoot$2(new P._SplayTreeSetNode(element, t1._eval$1("_SplayTreeSetNode<1>")), compare);
      return true;
    },
    addAll$1: function(_, elements) {
      var t2, element, compare,
        t1 = this.$ti;
      for (t2 = J.get$iterator$a(t1._eval$1("Iterable<1>")._as(elements)), t1 = t1._eval$1("_SplayTreeSetNode<1>"); t2.moveNext$0();) {
        element = t2.get$current();
        compare = this._splay$1(element);
        if (compare !== 0)
          this._addNewRoot$2(new P._SplayTreeSetNode(element, t1), compare);
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    set$_root: function(_root) {
      this._root = this.$ti._eval$1("_SplayTreeSetNode<1>?")._as(_root);
    },
    $isIterable: 1,
    $isSet: 1
  };
  P.SplayTreeSet_closure.prototype = {
    call$1: function(v) {
      return this.E._is(v);
    },
    $signature: 60
  };
  P._SplayTreeSet__SplayTree_IterableMixin.prototype = {};
  P._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {};
  P.Error.prototype = {
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + P.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H._asIntS(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var variableName = this.variableName;
      return variableName == null ? "Reading static variable during its initialization" : "Reading static variable '" + variableName + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        source = this.source;
      if (source.length > 78)
        source = C.JSString_methods.substring$2(source, 0, 75) + "...";
      return report + "\n" + source;
    }
  };
  P.Iterable.prototype = {
    where$1: function(_, test) {
      var t1 = H._instanceType(this);
      return new H.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(this)) + "'";
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.Runes.prototype = {
    get$iterator: function(_) {
      return new P.RuneIterator(this.string);
    }
  };
  P.RuneIterator.prototype = {
    get$current: function() {
      return this._currentCodePoint;
    },
    moveNext$0: function() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      codeUnit = C.JSString_methods._codeUnitAt$1(t2, t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        nextCodeUnit = C.JSString_methods._codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = P._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  W.HtmlElement.prototype = {};
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Element.prototype = {
    toString$0: function(receiver) {
      return receiver.localName;
    },
    get$onClick: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_legacy_MouseEvent);
    },
    $isElement: 1
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.Node.prototype = {
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    }
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.TextAreaElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = value;
    },
    $isTextAreaElement: 1
  };
  W.UIEvent.prototype = {};
  W.EventStreamProvider.prototype = {};
  W._EventStream.prototype = {};
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {};
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 61
  };
  P.SvgElement.prototype = {
    get$onClick: function(receiver) {
      return new W._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_legacy_MouseEvent);
    }
  };
  Y.AbsoluteValue.prototype = {
    evaluate$1: function(p) {
      return Y.abs(this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p)));
    },
    copy$1: function(params) {
      return new Y.AbsoluteValue(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$approx: function() {
      return Y.abs(this.operand.get$approx());
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitAbs$1(this));
    }
  };
  R.And.prototype = {
    isSolution$1: function(p) {
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      return this.left.isSolution$1(p).$and(0, this.right.isSolution$1(p));
    },
    get$solution: function() {
      return this.left.get$solution().intersection$1(this.right.get$solution());
    },
    toString$0: function(_) {
      return "(" + this.left.toString$0(0) + ") and (" + this.right.toString$0(0) + ")";
    },
    get$parameters: function() {
      var t3, t4,
        t1 = type$.legacy_String,
        t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = this.left.get$parameters(), t4 = t3.$ti, t4 = P._SplayTreeKeyIterator$(t3, t4._precomputed1, t4._eval$1("_SplayTreeSetNode<1>")); t4.moveNext$0();)
        t2.add$1(0, t4.get$current());
      for (t3 = this.right.get$parameters(), t4 = t3.$ti, t4 = P._SplayTreeKeyIterator$(t3, t4._precomputed1, t4._eval$1("_SplayTreeSetNode<1>")); t4.moveNext$0();)
        t2.add$1(0, t4.get$current());
      return P.SplayTreeSet_SplayTreeSet$from(t2, t1);
    },
    get$foundEverySolution: function() {
      return this.left.get$foundEverySolution() && this.right.get$foundEverySolution();
    }
  };
  N.ArcCos.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof A.Cos ? op.operand : new N.ArcCos(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(Math.acos(H.checkNum(op.absvalue)));
      else
        return op instanceof A.Cos ? op.operand : new N.ArcCos(op, null);
    },
    copy$1: function(params) {
      return new N.ArcCos(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArcCos$1(this));
    }
  };
  L.ArcCsc.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof U.Csc ? op.operand : new L.ArcCsc(op, null);
    },
    get$approx: function() {
      var t1,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return T.n(Math.asin(1 / t1));
      } else
        return op instanceof U.Csc ? op.operand : new L.ArcCsc(op, null);
    },
    copy$1: function(params) {
      return new L.ArcCsc(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArcCsc$1(this));
    }
  };
  U.ArcCtg.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof X.Ctg ? op.operand : new U.ArcCtg(op, null);
    },
    get$approx: function() {
      var t1,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return T.n(Math.atan(1 / t1));
      } else
        return op instanceof X.Ctg ? op.operand : new U.ArcCtg(op, null);
    },
    copy$1: function(params) {
      return new U.ArcCtg(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArcCtg$1(this));
    }
  };
  Y.ArCosH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof D.CosH ? op.operand : new Y.ArCosH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        H.checkNum(t1);
        t2 = Math.sqrt(Math.pow(t1, 2) - 1);
        if (typeof t1 !== "number")
          return t1.$add();
        return T.n(Math.log(t1 + t2));
      } else
        return op instanceof D.CosH ? op.operand : new Y.ArCosH(op, null);
    },
    copy$1: function(params) {
      return new Y.ArCosH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArCosH$1(this));
    }
  };
  L.ArCscH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof M.CscH ? op.operand : new L.ArCscH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        H.checkNum(t1);
        t2 = Math.sqrt(1 + Math.pow(t1, 2));
        if (typeof t1 !== "number")
          return H.iae(t1);
        return T.n(Math.log(t2 / t1));
      } else
        return op instanceof M.CscH ? op.operand : new L.ArCscH(op, null);
    },
    copy$1: function(params) {
      return new L.ArCscH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArCscH$1(this));
    }
  };
  Y.ArcSec.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof S.Sec ? op.operand : new Y.ArcSec(op, null);
    },
    get$approx: function() {
      var t1,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return T.n(Math.acos(1 / t1));
      } else
        return op instanceof S.Sec ? op.operand : new Y.ArcSec(op, null);
    },
    copy$1: function(params) {
      return new Y.ArcSec(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArcSec$1(this));
    }
  };
  L.ArcSin.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof U.Sin ? op.operand : new L.ArcSin(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(Math.asin(H.checkNum(op.absvalue)));
      else
        return op instanceof U.Sin ? op.operand : new L.ArcSin(op, null);
    },
    copy$1: function(params) {
      return new L.ArcSin(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArcSin$1(this));
    }
  };
  Q.ArcTan.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof M.Tan ? op.operand : new Q.ArcTan(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(Math.atan(H.checkNum(op.absvalue)));
      else
        return op instanceof M.Tan ? op.operand : new Q.ArcTan(op, null);
    },
    copy$1: function(params) {
      return new Q.ArcTan(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArcTan$1(this));
    }
  };
  V.ArCtgH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof A.CtgH ? op.operand : new V.ArCtgH(op, null);
    },
    get$approx: function() {
      var t1,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        if (typeof t1 !== "number")
          return t1.$add();
        return T.n(0.5 * Math.log((t1 + 1) / (t1 - 1)));
      } else
        return op instanceof A.CtgH ? op.operand : new V.ArCtgH(op, null);
    },
    copy$1: function(params) {
      return new V.ArCtgH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArCtgH$1(this));
    }
  };
  N.ArSecH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof D.SecH ? op.operand : new N.ArSecH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        H.checkNum(t1);
        t2 = Math.sqrt(1 - Math.pow(t1, 2));
        if (typeof t1 !== "number")
          return H.iae(t1);
        return T.n(Math.log((1 + t2) / t1));
      } else
        return op instanceof D.SecH ? op.operand : new N.ArSecH(op, null);
    },
    copy$1: function(params) {
      return new N.ArSecH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArSecH$1(this));
    }
  };
  Z.ArSinH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof D.SinH ? op.operand : new Z.ArSinH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        H.checkNum(t1);
        t2 = Math.sqrt(1 + Math.pow(t1, 2));
        if (typeof t1 !== "number")
          return t1.$add();
        return T.n(Math.log(t1 + t2));
      } else
        return op instanceof D.SinH ? op.operand : new Z.ArSinH(op, null);
    },
    copy$1: function(params) {
      return new Z.ArSinH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArSinH$1(this));
    }
  };
  T.ArTanH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof U.TanH ? op.operand : new T.ArTanH(op, null);
    },
    get$approx: function() {
      var t1,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return T.n(0.5 * Math.log((1 + t1) / (1 - t1)));
      } else
        return op instanceof U.TanH ? op.operand : new T.ArTanH(op, null);
    },
    copy$1: function(params) {
      return new T.ArTanH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitArTanH$1(this));
    }
  };
  M.BetaScript_runForWeb_closure.prototype = {
    call$1: function(object) {
      var t1 = this._box_0;
      t1.output = t1.output + (J.toString$0$(object) + "\n");
    },
    $signature: 62
  };
  K.builderSet_closure.prototype = {
    call$1: function(element) {
      return new S.Variable(H._asStringS(element), null);
    },
    $signature: 38
  };
  K.BuilderSet.prototype = {
    belongs$1: function(x) {
      var t1 = this.rule,
        t2 = t1.get$parameters(),
        t3 = type$.dynamic;
      return t1.isSolution$1(P.HashMap_HashMap$from(P.LinkedHashMap_LinkedHashMap$_literal([t2.get$last(t2), x], t3, t3), type$.legacy_String, type$.legacy_BSFunction))._value === C._logic_0;
    },
    complement$0: function() {
      return new K.BuilderSet(this.parameters, new A.Not(this.rule));
    },
    get$knownElements: function() {
      return this.rule.get$solution();
    },
    accept$1$1: function(_, visitor, ReturnType) {
      return ReturnType._eval$1("0*")._as(visitor.visitBuilderSet$1(this));
    },
    get$isIntensional: function() {
      return true;
    }
  };
  X.BSClass.prototype = {
    toString$0: function(_) {
      return this.name;
    },
    get$arity: function() {
      var t1 = this.findMethod$1(this.name);
      t1 = t1 == null ? null : t1._declaration.parameters.length;
      return t1 == null ? 0 : t1;
    },
    callThing$2: function(interpreter, $arguments) {
      var instance = new R.BSInstance(this, P.HashMap_HashMap(type$.legacy_String, type$.legacy_Object)),
        initializer = this.findMethod$1(this.name);
      if (initializer != null)
        initializer.bind$1(instance).callThing$2(interpreter, $arguments);
      return instance;
    },
    findMethod$1: function($name) {
      var t1 = this._methods;
      if (t1.containsKey$1($name))
        return t1.$index(0, $name);
      t1 = this._superclass;
      if (t1 != null)
        return t1.findMethod$1($name);
      return null;
    },
    $isBSCallable: 1
  };
  M.Comparison.prototype = {
    isSolution$1: function(p) {
      var _left, _right, exception, nums;
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      _left = null;
      _right = null;
      try {
        _left = this.left.evaluate$1(p).get$approx();
        _right = this.right.evaluate$1(p).get$approx();
      } catch (exception) {
        if (H.unwrapException(exception) instanceof F.BetascriptFunctionError)
          return C.BSLogical_false__logic_1;
        else
          throw exception;
      }
      nums = B.toNums(_left, _right, null);
      if (nums != null)
        return this.compare$2(nums.first, nums.second) ? C.BSLogical_true__logic_0 : C.BSLogical_false__logic_1;
      return C.BSLogical_unknown__logic_2;
    },
    get$solution: function() {
      var _sol, t2, t3, _this = this,
        solver = new S.SingleVariableSolver(_this),
        t1 = solver.appliesInternal$0();
      solver.doesApply = t1;
      if (t1) {
        _sol = solver.attemptSolve$0();
        _this._foundEverySolution = solver._everySolutionFound;
      } else
        _sol = C.C_EmptySet;
      if (_sol === C.C_EmptySet) {
        t1 = _this.get$parameters();
        t2 = t1.$ti;
        t3 = t2._eval$1("EfficientLengthMappedIterable<1,Variable*>");
        t3 = new K.BuilderSet(P.List_List$from(new H.EfficientLengthMappedIterable(t1, t2._eval$1("Variable*(1)")._as(new M.Comparison_solution_closure()), t3), true, t3._eval$1("Iterable.E")), _this);
        t1 = t3;
      } else
        t1 = _sol;
      return t1;
    },
    toString$0: function(_) {
      var _this = this;
      return _this.left.toString$0(0) + " " + _this.get$type(_this) + " " + _this.right.toString$0(0);
    },
    get$parameters: function() {
      var t2,
        t1 = P.LinkedHashSet_LinkedHashSet(type$.legacy_Variable);
      for (t2 = this.left.get$parameters(), t2 = t2.get$iterator(t2); t2.moveNext$0();)
        t1.add$1(0, t2.get$current());
      for (t2 = this.right.get$parameters(), t2 = t2.get$iterator(t2); t2.moveNext$0();)
        t1.add$1(0, t2.get$current());
      t2 = H._instanceType(t1);
      return P.SplayTreeSet_SplayTreeSet$from(new H.EfficientLengthMappedIterable(t1, t2._eval$1("@(1)")._as(new M.Comparison_parameters_closure()), t2._eval$1("EfficientLengthMappedIterable<1,@>")), type$.legacy_String);
    },
    get$foundEverySolution: function() {
      return this._foundEverySolution;
    }
  };
  M.Comparison_solution_closure.prototype = {
    call$1: function(element) {
      return new S.Variable(H._asStringS(element), null);
    },
    $signature: 38
  };
  M.Comparison_parameters_closure.prototype = {
    call$1: function(e) {
      return type$.legacy_Variable._as(e).name;
    },
    $signature: 39
  };
  U.Contains.prototype = {
    operateBuilderSetBuilderSet$2: function(first, second) {
      var t1 = type$.legacy_BuilderSet;
      t1._as(first);
      t1._as(second);
      return C.BSLogical_unknown__logic_2;
    },
    operateBuilderSetEmptySet$2: function(first, second) {
      type$.legacy_BuilderSet._as(first);
      type$.legacy_EmptySet._as(second);
      return C.BSLogical_true__logic_0;
    },
    operateBuilderSetIntensionalSetIntersection$2: function(first, second) {
      var t1, t2, t3;
      type$.legacy_BuilderSet._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      t1 = second.first;
      first.toString;
      t2 = $.$get$BSSet__contains();
      t3 = t2._methodTable;
      return H._instanceType(t2)._eval$1("SetOperation.0*")._as(t3.call$2(first, t1)).$and(0, H._instanceType(t2)._eval$1("SetOperation.0*")._as(t3.call$2(first, second.second)))._value === C._logic_0 ? C.BSLogical_true__logic_0 : C.BSLogical_unknown__logic_2;
    },
    operateBuilderSetInterval$2: function(first, second) {
      var t1, t2;
      type$.legacy_BuilderSet._as(first);
      type$.legacy_Interval._as(second);
      t1 = first.rule.get$solution();
      t1.toString;
      t2 = $.$get$BSSet__contains();
      return H._instanceType(t2)._eval$1("SetOperation.0*")._as(t2._methodTable.call$2(t1, second))._value === C._logic_0 ? C.BSLogical_true__logic_0 : C.BSLogical_unknown__logic_2;
    },
    operateBuilderSetRosterSet$2: function(first, second) {
      var t1, t2, t3, t4, t5, t6, t7;
      type$.legacy_BuilderSet._as(first);
      for (t1 = type$.legacy_RosterSet._as(second).elements, t2 = t1.$ti, t2 = P._SplayTreeKeyIterator$(t1, t2._precomputed1, t2._eval$1("_SplayTreeSetNode<1>")), t1 = type$.dynamic, t3 = type$.legacy_String, t4 = type$.legacy_BSFunction; t2.moveNext$0();) {
        t5 = t2.get$current();
        t6 = first.rule;
        t7 = t6.get$parameters();
        if (t7._count === 0)
          H.throwExpression(H.IterableElementError_noElement());
        if (t6.isSolution$1(P.HashMap_HashMap$from(P.LinkedHashMap_LinkedHashMap$_literal([t7.get$_collection$_last().key, t5], t1, t1), t3, t4))._value !== C._logic_0)
          return C.BSLogical_false__logic_1;
      }
      return C.BSLogical_true__logic_0;
    },
    operateBuilderSetSetUnion$2: function(first, second) {
      var t1, t2, t3, _i, element, t4;
      type$.legacy_BuilderSet._as(first);
      for (t1 = type$.legacy_SetUnion._as(second).subsets, t2 = t1.length, t3 = type$.legacy_BSSet, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        first.toString;
        t3._as(element);
        t4 = $.$get$BSSet__contains();
        t4 = H._instanceType(t4)._eval$1("SetOperation.0*")._as(t4._methodTable.call$2(first, element));
        if (t4._value !== C._logic_0)
          return t4;
      }
      return C.BSLogical_true__logic_0;
    },
    operateEmptySetBuilderSet$2: function(first, second) {
      type$.legacy_EmptySet._as(first);
      return type$.legacy_BuilderSet._as(second).rule.get$solution() !== C.C_EmptySet ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateEmptySetEmptySet$2: function(first, second) {
      var t1 = type$.legacy_EmptySet;
      t1._as(first);
      t1._as(second);
      return C.BSLogical_true__logic_0;
    },
    operateEmptySetIntensionalSetIntersection$2: function(first, second) {
      var t1, t2;
      type$.legacy_EmptySet._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      t1 = second.first.get$knownElements();
      t2 = second.second.get$knownElements();
      t1.toString;
      return $.$get$BSSet__union().call$2(t1, t2) !== C.C_EmptySet ? C.BSLogical_unknown__logic_2 : C.BSLogical_false__logic_1;
    },
    operateEmptySetInterval$2: function(first, second) {
      type$.legacy_EmptySet._as(first);
      type$.legacy_Interval._as(second);
      return C.BSLogical_false__logic_1;
    },
    operateEmptySetRosterSet$2: function(first, second) {
      type$.legacy_EmptySet._as(first);
      type$.legacy_RosterSet._as(second);
      return C.BSLogical_false__logic_1;
    },
    operateEmptySetSetUnion$2: function(first, second) {
      type$.legacy_EmptySet._as(first);
      type$.legacy_SetUnion._as(second);
      return second.get$isIntensional() && second.get$knownElements() === C.C_EmptySet ? C.BSLogical_unknown__logic_2 : C.BSLogical_false__logic_1;
    },
    operateIntensionalSetIntersectionBuilderSet$2: function(first, second) {
      type$.legacy_IntensionalSetIntersection._as(first);
      type$.legacy_BuilderSet._as(second);
      return C.BSLogical_unknown__logic_2;
    },
    operateIntensionalSetIntersectionEmptySet$2: function(first, second) {
      type$.legacy_IntensionalSetIntersection._as(first);
      type$.legacy_EmptySet._as(second);
      return C.BSLogical_true__logic_0;
    },
    operateIntensionalSetIntersectionIntensionalSetIntersection$2: function(first, second) {
      var t1 = type$.legacy_IntensionalSetIntersection;
      t1._as(first);
      t1._as(second);
      return C.BSLogical_unknown__logic_2;
    },
    operateIntensionalSetIntersectionInterval$2: function(first, second) {
      var t1, t2, t3, t4;
      type$.legacy_IntensionalSetIntersection._as(first);
      type$.legacy_Interval._as(second);
      t1 = first.first;
      t1.toString;
      t2 = $.$get$BSSet__contains();
      t3 = t2._methodTable;
      t1 = H._instanceType(t2)._eval$1("SetOperation.0*")._as(t3.call$2(t1, second));
      t4 = first.second;
      t4.toString;
      return t1.$and(0, H._instanceType(t2)._eval$1("SetOperation.0*")._as(t3.call$2(t4, second)));
    },
    operateIntensionalSetIntersectionRosterSet$2: function(first, second) {
      var t1, t2;
      type$.legacy_IntensionalSetIntersection._as(first);
      for (t1 = type$.legacy_RosterSet._as(second).elements, t2 = t1.$ti, t2 = P._SplayTreeKeyIterator$(t1, t2._precomputed1, t2._eval$1("_SplayTreeSetNode<1>")); t2.moveNext$0();) {
        t1 = t2.get$current();
        if (!(first.first.belongs$1(t1) && first.second.belongs$1(t1)))
          return C.BSLogical_false__logic_1;
      }
      return C.BSLogical_true__logic_0;
    },
    operateIntensionalSetIntersectionSetUnion$2: function(first, second) {
      var t1, t2, t3, _i, element, t4;
      type$.legacy_IntensionalSetIntersection._as(first);
      for (t1 = type$.legacy_SetUnion._as(second).subsets, t2 = t1.length, t3 = type$.legacy_BSSet, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        first.toString;
        t3._as(element);
        t4 = $.$get$BSSet__contains();
        t4 = H._instanceType(t4)._eval$1("SetOperation.0*")._as(t4._methodTable.call$2(first, element));
        if (!J.$eq$(t4, C.BSLogical_true__logic_0))
          return t4;
      }
      return C.BSLogical_true__logic_0;
    },
    operateIntervalBuilderSet$2: function(first, second) {
      type$.legacy_Interval._as(first);
      type$.legacy_BuilderSet._as(second);
      return C.BSLogical_unknown__logic_2;
    },
    operateIntervalEmptySet$2: function(first, second) {
      type$.legacy_Interval._as(first);
      type$.legacy_EmptySet._as(second);
      return C.BSLogical_true__logic_0;
    },
    operateIntervalIntensionalSetIntersection$2: function(first, second) {
      var t1, t2;
      type$.legacy_Interval._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      t1 = second.first.get$knownElements();
      t2 = second.second.get$knownElements();
      t1.toString;
      t2 = $.$get$BSSet__union().call$2(t1, t2);
      first.toString;
      t1 = $.$get$BSSet__contains();
      return J.$eq$(H._instanceType(t1)._eval$1("SetOperation.0*")._as(t1._methodTable.call$2(first, t2)), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateIntervalInterval$2: function(first, second) {
      var t1 = type$.legacy_Interval;
      t1._as(first);
      t1._as(second);
      t1 = second.a;
      if (!first.belongs$1(t1))
        if (J.$eq$(first.a, t1))
          t1 = first.leftClosed || !second.leftClosed;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        t1 = second.b;
        if (!first.belongs$1(t1))
          if (J.$eq$(first.b, t1))
            t1 = first.rightClosed || !second.rightClosed;
          else
            t1 = false;
        else
          t1 = true;
      } else
        t1 = false;
      return t1 ? C.BSLogical_true__logic_0 : C.BSLogical_false__logic_1;
    },
    operateIntervalRosterSet$2: function(first, second) {
      var t1, t2;
      type$.legacy_Interval._as(first);
      for (t1 = type$.legacy_RosterSet._as(second).elements, t2 = t1.$ti, t2 = P._SplayTreeKeyIterator$(t1, t2._precomputed1, t2._eval$1("_SplayTreeSetNode<1>")); t2.moveNext$0();)
        if (!first.belongs$1(t2.get$current()))
          return C.BSLogical_false__logic_1;
      return C.BSLogical_true__logic_0;
    },
    operateIntervalSetUnion$2: function(first, second) {
      var t1, t2, t3, _i, element, t4;
      type$.legacy_Interval._as(first);
      for (t1 = type$.legacy_SetUnion._as(second).subsets, t2 = t1.length, t3 = type$.legacy_BSSet, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        first.toString;
        t3._as(element);
        t4 = $.$get$BSSet__contains();
        t4 = H._instanceType(t4)._eval$1("SetOperation.0*")._as(t4._methodTable.call$2(first, element));
        if (!J.$eq$(t4, C.BSLogical_true__logic_0))
          return t4;
      }
      return C.BSLogical_true__logic_0;
    },
    operateRosterSetBuilderSet$2: function(first, second) {
      var t1, t2;
      type$.legacy_RosterSet._as(first);
      t1 = type$.legacy_BuilderSet._as(second).rule.get$solution();
      first.toString;
      t2 = $.$get$BSSet__contains();
      return J.$eq$(H._instanceType(t2)._eval$1("SetOperation.0*")._as(t2._methodTable.call$2(first, t1)), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateRosterSetEmptySet$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_EmptySet._as(second);
      return C.BSLogical_true__logic_0;
    },
    operateRosterSetIntensionalSetIntersection$2: function(first, second) {
      var t1, t2;
      type$.legacy_RosterSet._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      t1 = second.first.get$knownElements();
      t2 = second.second.get$knownElements();
      t1.toString;
      t2 = $.$get$BSSet__union().call$2(t1, t2);
      first.toString;
      t1 = $.$get$BSSet__contains();
      return J.$eq$(H._instanceType(t1)._eval$1("SetOperation.0*")._as(t1._methodTable.call$2(first, t2)), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateRosterSetInterval$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_Interval._as(second);
      return C.BSLogical_false__logic_1;
    },
    operateRosterSetRosterSet$2: function(first, second) {
      var t2, t3,
        t1 = type$.legacy_RosterSet;
      t1._as(first);
      for (t1 = t1._as(second).elements, t2 = t1.$ti, t2 = P._SplayTreeKeyIterator$(t1, t2._precomputed1, t2._eval$1("_SplayTreeSetNode<1>")); t2.moveNext$0();) {
        t1 = t2.get$current();
        t3 = first.elements;
        if (!(H.boolConversionCheck(t3._validKey.call$1(t1)) && t3._splay$1(t3.$ti._precomputed1._as(t1)) === 0))
          return C.BSLogical_false__logic_1;
      }
      return C.BSLogical_true__logic_0;
    },
    operateRosterSetSetUnion$2: function(first, second) {
      var t1, t2, t3, _i, element, t4;
      type$.legacy_RosterSet._as(first);
      for (t1 = type$.legacy_SetUnion._as(second).subsets, t2 = t1.length, t3 = type$.legacy_BSSet, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        first.toString;
        t3._as(element);
        t4 = $.$get$BSSet__contains();
        t4 = H._instanceType(t4)._eval$1("SetOperation.0*")._as(t4._methodTable.call$2(first, element));
        if (!J.$eq$(t4, C.BSLogical_true__logic_0))
          return t4;
      }
      return C.BSLogical_true__logic_0;
    },
    operateSetUnionBuilderSet$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_BuilderSet._as(second);
      return first.get$isIntensional() && second.rule.get$solution().relativeComplement$1(first) !== C.C_EmptySet ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateSetUnionEmptySet$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_EmptySet._as(second);
      return C.BSLogical_true__logic_0;
    },
    operateSetUnionIntensionalSetIntersection$2: function(first, second) {
      var t1, t2;
      type$.legacy_SetUnion._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      if (first.get$isIntensional()) {
        t1 = second.first.get$knownElements();
        t2 = second.second.get$knownElements();
        t1.toString;
        t2 = $.$get$BSSet__union().call$2(t1, t2).relativeComplement$1(first) !== C.C_EmptySet;
        t1 = t2;
      } else
        t1 = false;
      return t1 ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateSetUnionInterval$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      return type$.legacy_Interval._as(second).relativeComplement$1(first) === C.C_EmptySet ? C.BSLogical_true__logic_0 : C.BSLogical_false__logic_1;
    },
    operateSetUnionRosterSet$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      return type$.legacy_RosterSet._as(second).relativeComplement$1(first) === C.C_EmptySet ? C.BSLogical_true__logic_0 : C.BSLogical_false__logic_1;
    },
    operateSetUnionSetUnion$2: function(first, second) {
      var t2, t3, _i, element, t4,
        t1 = type$.legacy_SetUnion;
      t1._as(first);
      for (t1 = t1._as(second).subsets, t2 = t1.length, t3 = type$.legacy_BSSet, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        first.toString;
        t3._as(element);
        t4 = $.$get$BSSet__contains();
        t4 = H._instanceType(t4)._eval$1("SetOperation.0*")._as(t4._methodTable.call$2(first, element));
        if (!J.$eq$(t4, C.BSLogical_true__logic_0))
          return t4;
      }
      return C.BSLogical_true__logic_0;
    }
  };
  A.Cos.prototype = {
    evaluate$1: function(p) {
      var v,
        op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      if (op instanceof T.Number) {
        v = Math.cos(H.checkNum(op.absvalue));
        if (v === C.JSNumber_methods.toInt$0(v))
          return T.n(v);
      }
      return op instanceof N.ArcCos ? op.operand : new A.Cos(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(Math.cos(H.checkNum(op.absvalue)));
      return op instanceof N.ArcCos ? op.operand : new A.Cos(op, null);
    },
    copy$1: function(params) {
      return new A.Cos(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitCos$1(this));
    }
  };
  D.CosH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof Y.ArCosH ? op.operand : new D.CosH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        t2 = Math.exp(H.checkNum(t1));
        if (typeof t1 !== "number")
          return t1.$negate();
        return T.n((t2 + Math.exp(-t1)) / 2);
      } else
        return op instanceof Y.ArCosH ? op.operand : new D.CosH(op, null);
    },
    copy$1: function(params) {
      return new D.CosH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitCosH$1(this));
    }
  };
  U.Csc.prototype = {
    evaluate$1: function(p) {
      var v,
        op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      if (op instanceof T.Number) {
        v = 1 / Math.sin(H.checkNum(op.absvalue));
        if (v === C.JSDouble_methods.toInt$0(v))
          return T.n(v);
      }
      return op instanceof L.ArcCsc ? op.operand : new U.Csc(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(1 / Math.sin(H.checkNum(op.absvalue)));
      return op instanceof L.ArcCsc ? op.operand : new U.Csc(op, null);
    },
    copy$1: function(params) {
      return new U.Csc(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitCsc$1(this));
    }
  };
  M.CscH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof L.ArCscH ? op.operand : new M.CscH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        t2 = Math.exp(H.checkNum(t1));
        if (typeof t1 !== "number")
          return t1.$negate();
        return T.n(2 / (t2 - Math.exp(-t1)));
      } else
        return op instanceof L.ArCscH ? op.operand : new M.CscH(op, null);
    },
    copy$1: function(params) {
      return new M.CscH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitCscH$1(this));
    }
  };
  X.Ctg.prototype = {
    evaluate$1: function(p) {
      var v,
        op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      if (op instanceof T.Number) {
        v = 1 / Math.tan(H.checkNum(op.absvalue));
        if (v === C.JSDouble_methods.toInt$0(v))
          return T.n(v);
      }
      return op instanceof U.ArcCtg ? op.operand : new X.Ctg(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(1 / Math.tan(H.checkNum(op.absvalue)));
      return op instanceof U.ArcCtg ? op.operand : new X.Ctg(op, null);
    },
    copy$1: function(params) {
      return new X.Ctg(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitCtg$1(this));
    }
  };
  A.CtgH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof V.ArCtgH ? op.operand : new A.CtgH(op, null);
    },
    get$approx: function() {
      var t1, t2, t3,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        t2 = Math.exp(H.checkNum(t1));
        if (typeof t1 !== "number")
          return t1.$negate();
        t3 = -t1;
        return T.n((t2 + Math.exp(t3)) / (Math.exp(t1) - Math.exp(t3)));
      } else
        return op instanceof V.ArCtgH ? op.operand : new A.CtgH(op, null);
    },
    copy$1: function(params) {
      return new A.CtgH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitCtgH$1(this));
    }
  };
  D.DirectiveManager.prototype = {
    setIfGlobal$2: function(dir, value) {
      var t1 = this._globalDirectives;
      if (t1.containsKey$1(dir)) {
        t1.$indexSet(0, dir, true);
        return true;
      } else
        return false;
    },
    getDirective$1: function(dir) {
      var t1 = this._globalDirectives;
      if (t1.containsKey$1(dir))
        return t1.$index(0, dir);
      t1 = this._localDirectives;
      if (t1.containsKey$1(dir))
        return t1.$index(0, dir);
      return null;
    }
  };
  V.Disjoined.prototype = {
    _testRosterElements$2: function(elements, other) {
      var t1;
      type$.legacy_SplayTreeSet_legacy_BSFunction._as(elements);
      for (t1 = elements.$ti, t1 = P._SplayTreeKeyIterator$(elements, t1._precomputed1, t1._eval$1("_SplayTreeSetNode<1>")); t1.moveNext$0();)
        if (other.belongs$1(t1.get$current()))
          return C.BSLogical_false__logic_1;
      return C.BSLogical_true__logic_0;
    },
    operateBuilderSetBuilderSet$2: function(first, second) {
      var t2,
        t1 = type$.legacy_BuilderSet;
      t1._as(first);
      t1._as(second);
      t1 = first.rule.get$solution();
      t2 = second.rule.get$solution();
      t1.toString;
      return J.$eq$($.$get$BSSet__disjoined().call$2(t1, t2), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateIntensionalSetIntersectionBuilderSet$2: function(first, second) {
      var t1;
      type$.legacy_IntensionalSetIntersection._as(first);
      t1 = type$.legacy_BuilderSet._as(second).rule.get$solution();
      first.toString;
      return J.$eq$($.$get$BSSet__disjoined().call$2(first, t1), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateIntensionalSetIntersectionIntensionalSetIntersection$2: function(first, second) {
      var t2, t3, t4,
        t1 = type$.legacy_IntensionalSetIntersection;
      t1._as(first);
      t1._as(second);
      t1 = first.first.get$knownElements();
      t2 = first.second.get$knownElements();
      t1.toString;
      t3 = $.$get$BSSet__union();
      t2 = t3.call$2(t1, t2);
      t1 = second.first.get$knownElements();
      t4 = second.second.get$knownElements();
      t1.toString;
      t4 = t3.call$2(t1, t4);
      t2.toString;
      return J.$eq$($.$get$BSSet__disjoined().call$2(t2, t4), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateIntervalBuilderSet$2: function(first, second) {
      var t1;
      type$.legacy_Interval._as(first);
      t1 = type$.legacy_BuilderSet._as(second).rule.get$solution();
      first.toString;
      return J.$eq$($.$get$BSSet__disjoined().call$2(first, t1), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateIntervalIntensionalSetIntersection$2: function(first, second) {
      var t1, t2;
      type$.legacy_Interval._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      t1 = second.first.get$knownElements();
      t2 = second.second.get$knownElements();
      t1.toString;
      t2 = $.$get$BSSet__union().call$2(t1, t2);
      first.toString;
      return J.$eq$($.$get$BSSet__disjoined().call$2(first, t2), C.BSLogical_false__logic_1) ? C.BSLogical_false__logic_1 : C.BSLogical_unknown__logic_2;
    },
    operateIntervalInterval$2: function(first, second) {
      var t2, t3, t4,
        t1 = type$.legacy_Interval;
      t1._as(first);
      t1._as(second);
      t1 = first.b;
      t2 = second.a;
      if (!t1.$lt(0, t2)) {
        t3 = second.b;
        t4 = first.a;
        if (!t3.$lt(0, t4)) {
          if (t1.$eq(0, t2))
            t1 = !first.rightClosed || !second.leftClosed;
          else
            t1 = false;
          if (!t1)
            if (J.$eq$(t4, t3))
              t1 = !first.leftClosed || !second.rightClosed;
            else
              t1 = false;
          else
            t1 = true;
        } else
          t1 = true;
      } else
        t1 = true;
      return t1 ? C.BSLogical_true__logic_0 : C.BSLogical_false__logic_1;
    },
    operateRosterSetBuilderSet$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_BuilderSet._as(second);
      return this._testRosterElements$2(first.elements, second);
    },
    operateRosterSetIntensionalSetIntersection$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      return this._testRosterElements$2(first.elements, second);
    },
    operateRosterSetInterval$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_Interval._as(second);
      return this._testRosterElements$2(first.elements, second);
    },
    operateRosterSetRosterSet$2: function(first, second) {
      var t1 = type$.legacy_RosterSet;
      t1._as(first);
      t1._as(second);
      return this._testRosterElements$2(first.elements, second);
    },
    _testSubsets$2: function(subsets, other) {
      var t1, t2, t3, _i, subset, t4, t5;
      type$.legacy_List_legacy_BSSet._as(subsets);
      for (t1 = subsets.length, t2 = type$.legacy_BSSet, t3 = other === C.C_EmptySet, _i = 0; _i < subsets.length; subsets.length === t1 || (0, H.throwConcurrentModificationError)(subsets), ++_i) {
        subset = subsets[_i];
        subset.toString;
        t4 = $.$get$BSSet__disjoined();
        t4.toString;
        t2._as(subset);
        t5 = subset === C.C_EmptySet || t3 ? t4.onEmpty$2(subset, other) : t4._methodTable.call$2(subset, other);
        H._instanceType(t4)._eval$1("EmptyFilteringSetOperation.0*")._as(t5);
        if (!J.$eq$(t5, C.BSLogical_true__logic_0))
          return t5;
      }
      return C.BSLogical_true__logic_0;
    },
    operateSetUnionBuilderSet$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_BuilderSet._as(second);
      return this._testSubsets$2(first.subsets, second);
    },
    operateSetUnionIntensionalSetIntersection$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      return this._testSubsets$2(first.subsets, second);
    },
    operateSetUnionInterval$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_Interval._as(second);
      return this._testSubsets$2(first.subsets, second);
    },
    operateSetUnionRosterSet$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_RosterSet._as(second);
      return this._testSubsets$2(first.subsets, second);
    },
    operateSetUnionSetUnion$2: function(first, second) {
      var t1 = type$.legacy_SetUnion;
      t1._as(first);
      t1._as(second);
      return this._testSubsets$2(first.subsets, second);
    },
    onEmpty$2: function(first, second) {
      return C.BSLogical_true__logic_0;
    }
  };
  S.Division.prototype = {
    evaluate$1: function(p) {
      var _n, _d, t1, _numNumber, _denNumber, t2, v, _num, _den, t3, t4, t5;
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      _n = this.numerator.evaluate$1(p);
      _d = this.denominator.evaluate$1(p);
      t1 = type$.legacy_Number;
      _numNumber = B.extractFromNegative(_n, t1);
      _denNumber = B.extractFromNegative(_d, t1);
      t1 = _numNumber.first;
      if (t1 != null && _denNumber.first != null) {
        t1 = t1.absvalue;
        t2 = _denNumber.first.absvalue;
        if (typeof t1 !== "number")
          return t1.$div();
        if (typeof t2 !== "number")
          return H.iae(t2);
        v = t1 / t2;
        if (v === C.JSDouble_methods.toInt$0(v)) {
          t1 = _numNumber.second;
          t2 = _denNumber.second;
          if (typeof t1 !== "boolean")
            return t1.$xor();
          return T.n(v * (C.JSBool_methods.$xor(t1, t2) ? -1 : 1));
        }
      }
      t1 = type$.legacy_BSFunction;
      _num = B.extractFromNegative(_n, t1);
      _den = B.extractFromNegative(_d, t1);
      t1 = _num.second;
      t2 = _den.second;
      if (typeof t1 !== "boolean")
        return t1.$xor();
      t3 = type$.JSArray_legacy_BSFunction;
      t4 = _num.first;
      t5 = _den.first;
      return C.JSBool_methods.$xor(t1, t2) ? F.negative(S.divide(H.setRuntimeTypeInfo([t4], t3), H.setRuntimeTypeInfo([t5], t3))) : S.divide(H.setRuntimeTypeInfo([t4], t3), H.setRuntimeTypeInfo([t5], t3));
    },
    copy$1: function(params) {
      return new S.Division(this.numerator, this.denominator, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$defaultParameters: function() {
      var t3,
        t1 = type$.legacy_Variable,
        t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = this.numerator.get$parameters(), t3 = t3.get$iterator(t3); t3.moveNext$0();)
        t2.add$1(0, t3.get$current());
      for (t3 = this.denominator.get$parameters(), t3 = t3.get$iterator(t3); t3.moveNext$0();)
        t2.add$1(0, t3.get$current());
      return P.SplayTreeSet_SplayTreeSet$from(t2, t1);
    },
    get$approx: function() {
      var t2, t3, t4, _num, _den, t5,
        _n = this.numerator.get$approx(),
        _d = this.denominator.get$approx(),
        t1 = type$.legacy_Number,
        _numNumber = B.extractFromNegative(_n, t1),
        _denNumber = B.extractFromNegative(_d, t1);
      t1 = _numNumber.first;
      if (t1 == null && _denNumber.first == null) {
        t1 = t1.absvalue;
        t2 = _denNumber.first.absvalue;
        if (typeof t1 !== "number")
          return t1.$div();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = _numNumber.second;
        t4 = _denNumber.second;
        if (typeof t3 !== "boolean")
          return t3.$xor();
        t3 = C.JSBool_methods.$xor(t3, t4) ? -1 : 1;
        return T.n(t1 / t2 * t3);
      }
      t1 = type$.legacy_BSFunction;
      _num = B.extractFromNegative(_n, t1);
      _den = B.extractFromNegative(_d, t1);
      t1 = _num.second;
      t2 = _den.second;
      if (typeof t1 !== "boolean")
        return t1.$xor();
      t3 = type$.JSArray_legacy_BSFunction;
      t4 = _num.first;
      t5 = _den.first;
      return C.JSBool_methods.$xor(t1, t2) ? F.negative(S.divide(H.setRuntimeTypeInfo([t4], t3), H.setRuntimeTypeInfo([t5], t3))) : S.divide(H.setRuntimeTypeInfo([t4], t3), H.setRuntimeTypeInfo([t5], t3));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitDivision$1(this));
    }
  };
  Y.EmptySet.prototype = {
    complement$0: function() {
      return C.Interval_i3t;
    },
    belongs$1: function(x) {
      return false;
    },
    accept$1$1: function(_, visitor, ReturnType) {
      return ReturnType._eval$1("0*")._as("\u2205");
    },
    get$isIntensional: function() {
      return false;
    },
    get$knownElements: function() {
      return C.C_EmptySet;
    }
  };
  O.Environment.prototype = {
    define$2: function($name, value) {
      this.values.$indexSet(0, $name, value);
      return value;
    },
    define$1: function($name) {
      return this.define$2($name, null);
    },
    $get$1: function($name) {
      var t1 = this.values,
        t2 = $name.lexeme;
      if (t1.containsKey$1(t2))
        return t1.$index(0, t2);
      t1 = this.enclosing;
      if (t1 != null)
        return t1.$get$1($name);
      throw H.wrapException(A.RuntimeError$($name, "Undefined variable '" + t2 + "'"));
    },
    search$1: function(_, $name) {
      var t1 = this.values,
        t2 = $name.lexeme;
      if (t1.containsKey$1(t2))
        return t1.$index(0, t2);
      t1 = this.enclosing;
      if (t1 != null)
        return t1.search$1(0, $name);
      return null;
    },
    assign$2: function($name, value) {
      var t1 = this.values,
        t2 = $name.lexeme;
      if (t1.containsKey$1(t2))
        t1.$indexSet(0, t2, value);
      else {
        t1 = this.enclosing;
        if (t1 != null)
          t1.assign$2($name, value);
        else
          throw H.wrapException(A.RuntimeError$($name, "Undefined variable '" + t2 + "'"));
      }
    },
    _ancestor$1: function(distance) {
      var e, i;
      if (typeof distance !== "number")
        return H.iae(distance);
      e = this;
      i = 0;
      for (; i < distance; ++i)
        e = e.enclosing;
      return e;
    }
  };
  Q.Equal.prototype = {
    compare$2: function(_left, _right) {
      return _left === _right;
    },
    get$type: function(_) {
      return "==";
    }
  };
  X.Exponentiation.prototype = {
    evaluate$1: function(p) {
      var b, expo, pair, t1, t2, v;
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      b = this.base.evaluate$1(p);
      expo = this.exponent.evaluate$1(p);
      pair = B.toNums(b, expo, null);
      if (pair != null) {
        t1 = pair.first;
        t2 = pair.second;
        H.checkNum(t1);
        v = Math.pow(t1, t2);
        if (v === C.JSNumber_methods.toInt$0(v))
          return T.n(v);
      }
      return X.exp(b, expo);
    },
    copy$1: function(params) {
      return new X.Exponentiation(this.base, this.exponent, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$defaultParameters: function() {
      var t3,
        t1 = type$.legacy_Variable,
        t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = this.base.get$parameters(), t3 = t3.get$iterator(t3); t3.moveNext$0();)
        t2.add$1(0, t3.get$current());
      for (t3 = this.exponent.get$parameters(), t3 = t3.get$iterator(t3); t3.moveNext$0();)
        t2.add$1(0, t3.get$current());
      return P.SplayTreeSet_SplayTreeSet$from(t2, t1);
    },
    get$approx: function() {
      var t1, t2,
        b = this.base.get$approx(),
        expo = this.exponent.get$approx(),
        pair = B.toNums(b, expo, null);
      if (pair == null)
        return X.exp(b, expo);
      else {
        t1 = pair.first;
        t2 = pair.second;
        H.checkNum(t1);
        return T.n(Math.pow(t1, t2));
      }
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitExponentiation$1(this));
    }
  };
  V.Expr.prototype = {};
  V.AssignExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitAssignExpr$1(this);
    }
  };
  V.BinaryExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitBinaryExpr$1(this);
    }
  };
  V.CallExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitCallExpr$1(this);
    }
  };
  V.GetExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitGetExpr$1(this);
    }
  };
  V.GroupingExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitGroupingExpr$1(this);
    }
  };
  V.LiteralExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitLiteralExpr$1(this);
    }
  };
  V.UnaryExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitUnaryExpr$1(this);
    }
  };
  V.VariableExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitVariableExpr$1(this);
    }
  };
  V.LogicBinaryExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitLogicBinaryExpr$1(this);
    }
  };
  V.SetExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitSetExpr$1(this);
    }
  };
  V.ThisExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitThisExpr$1(this);
    }
  };
  V.SuperExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitSuperExpr$1(this);
    }
  };
  V.DerivativeExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitDerivativeExpr$1(this);
    }
  };
  V.IntervalDefinitionExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitIntervalDefinitionExpr$1(this);
    }
  };
  V.RosterDefinitionExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitRosterDefinitionExpr$1(this);
    }
  };
  V.BuilderDefinitionExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitBuilderDefinitionExpr$1(this);
    }
  };
  V.SetBinaryExpr.prototype = {
    accept$1: function(_, v) {
      return v.visitSetBinaryExpr$1(this);
    }
  };
  F.BSFunction.prototype = {
    call$1: function(parametersList) {
      var _p, t1, t2, map;
      type$.legacy_List_legacy_BSFunction._as(parametersList);
      _p = this.get$parameters();
      if (parametersList.length !== _p.get$length(_p))
        throw H.wrapException(F.BetascriptFunctionError$("Error! Missing parameters in function call!"));
      t1 = type$.legacy_String;
      t2 = this.get$parameters().map$1$1(0, new F.BSFunction_call_closure(), t1);
      map = P.HashMap_HashMap(t1, type$.legacy_BSFunction);
      P.MapBase__fillMapWithIterables(map, t2, parametersList);
      return this.evaluate$1(map);
    },
    get$parameters: function() {
      var t1 = this._parameters;
      return t1 == null ? this.get$defaultParameters() : t1;
    },
    withParameters$1: function(p) {
      var _p, t1;
      type$.legacy_Set_legacy_Variable._as(p);
      _p = this.get$defaultParameters();
      for (t1 = _p.$ti, t1 = P._SplayTreeKeyIterator$(_p, t1._precomputed1, t1._eval$1("_SplayTreeSetNode<1>")); t1.moveNext$0();)
        if (!p.contains$1(0, t1.get$current()))
          throw H.wrapException(F.BetascriptFunctionError$("Error! Function parameters not sufficient to evaluate this function!"));
      return this.copy$1(p);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof F.BSFunction) {
        t1 = type$.legacy_String;
        t1 = this.accept$1$1(0, new N.PlainFunctionStringifier(), t1) == other.accept$1$1(0, new N.PlainFunctionStringifier(), t1);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.accept$1$1(0, new N.PlainFunctionStringifier(), type$.legacy_String));
    },
    asConstant$0: function() {
      var t1, exception;
      try {
        t1 = type$.dynamic;
        t1 = this.evaluate$1(P.HashMap_HashMap$from(P.LinkedHashMap_LinkedHashMap$_empty(t1, t1), type$.legacy_String, type$.legacy_BSFunction));
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof F.BetascriptFunctionError)
          return null;
        else
          throw exception;
      }
    },
    toNum$0: function() {
      var _approx,
        _const = this.asConstant$0(),
        t1 = J.getInterceptor$(_const);
      if (t1.$eq(_const, C.Number_8xB))
        return 1 / 0;
      if (t1.$eq(_const, C.Negative_T3K))
        return -1 / 0;
      if (_const == null)
        return null;
      _approx = B.extractFromNegative(_const.get$approx(), type$.legacy_Number);
      t1 = _approx.first;
      if (H.boolConversionCheck(_approx.second)) {
        t1 = t1.absvalue;
        if (typeof t1 !== "number")
          return t1.$negate();
        t1 = -t1;
      } else
        t1 = t1.absvalue;
      return t1;
    },
    $lt: function(_, other) {
      var v = B.toNums(this, other, "<"),
        t1 = v.first,
        t2 = v.second;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2;
    },
    $gt: function(_, other) {
      var v = B.toNums(this, other, ">"),
        t1 = v.first,
        t2 = v.second;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 > t2;
    },
    toString$0: function(_) {
      return this.accept$1$1(0, new N.PlainFunctionStringifier(), type$.legacy_String);
    },
    compareTo$1: function(_, other) {
      var nums;
      if (other instanceof F.BSFunction) {
        nums = B.toNums(this, other, null);
        if (nums == null)
          throw H.wrapException(F.BetascriptFunctionError$(this.toString$0(0) + " and/or " + other.toString$0(0) + " can't be converted to nums!"));
        return J.compareTo$1$ns(nums.first, nums.second);
      } else
        throw H.wrapException(P.Exception_Exception("Can't compare Variable with " + J.get$runtimeType$(other).toString$0(0) + "!"));
    },
    $isComparable: 1
  };
  F.BSFunction_call_closure.prototype = {
    call$1: function(e) {
      return type$.legacy_Variable._as(e).name;
    },
    $signature: 39
  };
  F.BetascriptFunctionError.prototype = {
    toString$0: function(_) {
      return this._function$_message;
    }
  };
  F.FunctionAdapter.prototype = {
    get$arity: function() {
      var t1 = this.adaptee.get$parameters();
      return t1.get$length(t1);
    },
    callThing$2: function(interpreter, $arguments) {
      var t1 = H._arrayInstanceType($arguments),
        t2 = t1._eval$1("MappedListIterable<1,BSFunction*>");
      return this.adaptee.call$1(P.List_List$from(new H.MappedListIterable($arguments, t1._eval$1("BSFunction*(1)")._as(new F.FunctionAdapter_callThing_closure()), t2), true, t2._eval$1("ListIterable.E")));
    },
    toString$0: function(_) {
      return this.adaptee.accept$1$1(0, new N.PlainFunctionStringifier(), type$.legacy_String);
    },
    $isBSCallable: 1
  };
  F.FunctionAdapter_callThing_closure.prototype = {
    call$1: function(object) {
      return type$.legacy_BSFunction._as(object);
    },
    $signature: 52
  };
  B.GreaterOrEqual.prototype = {
    compare$2: function(_left, _right) {
      if (typeof _left !== "number")
        return _left.$ge();
      return _left >= _right;
    },
    get$type: function(_) {
      return ">=";
    }
  };
  N.GreaterThan.prototype = {
    compare$2: function(_left, _right) {
      if (typeof _left !== "number")
        return _left.$gt();
      return _left > _right;
    },
    get$type: function(_) {
      return ">";
    }
  };
  R.BSInstance.prototype = {
    toString$0: function(_) {
      return this._class.name + " instance";
    },
    $get$1: function($name) {
      var method,
        t1 = this._fields,
        t2 = $name.lexeme;
      if (t1.containsKey$1(t2))
        return t1.$index(0, t2);
      method = this._class.findMethod$1(t2);
      if (method != null)
        return method.bind$1(this);
      throw H.wrapException(A.RuntimeError$($name, "Undefined property '" + t2 + "'."));
    }
  };
  E.IntensionalSetIntersection.prototype = {
    belongs$1: function(x) {
      return this.first.belongs$1(x) && this.second.belongs$1(x);
    },
    complement$0: function() {
      var t1 = this.first.complement$0(),
        t2 = this.second.complement$0();
      t1.toString;
      return $.$get$BSSet__union().call$2(t1, t2);
    },
    accept$1$1: function(_, visitor, ReturnType) {
      return ReturnType._eval$1("0*")._as("(" + H.S(this.first) + ") \u2229 (" + H.S(this.second) + ")");
    },
    get$isIntensional: function() {
      return this.first.get$isIntensional() && this.second.get$isIntensional();
    },
    get$knownElements: function() {
      var t1 = this.first.get$knownElements(),
        t2 = this.second.get$knownElements();
      t1.toString;
      return $.$get$BSSet__union().call$2(t1, t2);
    }
  };
  A.BSInterpreter.prototype = {
    BSInterpreter$0: function() {
      var t1, t2, t3, t4, t5;
      for (t1 = $.$get$nativeGlobals(), t2 = t1.get$keys(), t2 = t2.get$iterator(t2), t3 = this.globals, t4 = t3.values; t2.moveNext$0();) {
        t5 = t2.get$current();
        t4.$indexSet(0, t5, t1.$index(0, t5));
      }
      this._environment = t3;
    },
    interpret$1: function(statements) {
      var stmt, e, t1, t2, _i, exception;
      type$.legacy_List_legacy_Stmt._as(statements);
      try {
        for (t1 = statements.length, t2 = type$.legacy_Stmt, _i = 0; _i < statements.length; statements.length === t1 || (0, H.throwConcurrentModificationError)(statements), ++_i) {
          stmt = statements[_i];
          t2._as(stmt).accept$1(0, this);
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof A.RuntimeError0) {
          e = t1;
          $.BetaScript_printCallback.call$1(e);
        } else
          throw exception;
      }
    },
    visitBinaryExpr$1: function(e) {
      var nums, t1, t2,
        _s29_ = "' not supported for functions",
        leftOperand = e.left.accept$1(0, this),
        rightOperand = e.right.accept$1(0, this);
      if (leftOperand instanceof F.BSFunction && rightOperand instanceof F.BSFunction) {
        nums = B.toNums(leftOperand, rightOperand, null);
        if (nums != null) {
          t1 = e.op;
          switch (t1.type) {
            case C.TokenType_8:
              return Z.add(H.setRuntimeTypeInfo([leftOperand, F.negative(rightOperand)], type$.JSArray_legacy_BSFunction));
            case C.TokenType_12:
              t1 = type$.JSArray_legacy_BSFunction;
              return S.divide(H.setRuntimeTypeInfo([leftOperand], t1), H.setRuntimeTypeInfo([rightOperand], t1));
            case C.TokenType_14:
              return F.multiply(H.setRuntimeTypeInfo([leftOperand, rightOperand], type$.JSArray_legacy_BSFunction));
            case C.TokenType_18:
              return X.exp(rightOperand, leftOperand);
            case C.TokenType_9:
              return Z.add(H.setRuntimeTypeInfo([leftOperand, rightOperand], type$.JSArray_legacy_BSFunction));
            case C.TokenType_23:
              t1 = nums.first;
              t2 = nums.second;
              if (typeof t1 !== "number")
                return t1.$gt();
              if (typeof t2 !== "number")
                return H.iae(t2);
              return t1 > t2;
            case C.TokenType_24:
              t1 = nums.first;
              t2 = nums.second;
              if (typeof t1 !== "number")
                return t1.$ge();
              if (typeof t2 !== "number")
                return H.iae(t2);
              return t1 >= t2;
            case C.TokenType_25:
              t1 = nums.first;
              t2 = nums.second;
              if (typeof t1 !== "number")
                return t1.$lt();
              if (typeof t2 !== "number")
                return H.iae(t2);
              return t1 < t2;
            case C.TokenType_26:
              t1 = nums.first;
              t2 = nums.second;
              if (typeof t1 !== "number")
                return t1.$le();
              if (typeof t2 !== "number")
                return H.iae(t2);
              return t1 <= t2;
            case C.TokenType_21:
              return J.$eq$(nums.first, nums.second);
            case C.TokenType_22:
              return A.BSInterpreter__isEqual(leftOperand, rightOperand);
            default:
              throw H.wrapException(A.RuntimeError$(t1, "operation '" + t1.toString$0(0) + _s29_));
          }
        }
        t1 = e.op;
        switch (t1.type) {
          case C.TokenType_8:
            return Z.add(H.setRuntimeTypeInfo([leftOperand, F.negative(rightOperand)], type$.JSArray_legacy_BSFunction));
          case C.TokenType_12:
            t1 = type$.JSArray_legacy_BSFunction;
            return S.divide(H.setRuntimeTypeInfo([leftOperand], t1), H.setRuntimeTypeInfo([rightOperand], t1));
          case C.TokenType_14:
            return F.multiply(H.setRuntimeTypeInfo([leftOperand, rightOperand], type$.JSArray_legacy_BSFunction));
          case C.TokenType_18:
            return X.exp(rightOperand, leftOperand);
          case C.TokenType_9:
            return Z.add(H.setRuntimeTypeInfo([leftOperand, rightOperand], type$.JSArray_legacy_BSFunction));
          case C.TokenType_23:
            return new N.GreaterThan(leftOperand, rightOperand);
          case C.TokenType_24:
            return new B.GreaterOrEqual(leftOperand, rightOperand);
          case C.TokenType_25:
            return new Z.LessThan(leftOperand, rightOperand);
          case C.TokenType_26:
            return new Q.LessOrEqual(leftOperand, rightOperand);
          case C.TokenType_21:
            return new Q.Equal(leftOperand, rightOperand);
          case C.TokenType_22:
            return A.BSInterpreter__isEqual(leftOperand, rightOperand);
          default:
            throw H.wrapException(A.RuntimeError$(t1, "operation '" + t1.toString$0(0) + _s29_));
        }
      }
      if (leftOperand instanceof X.BSSet && rightOperand instanceof X.BSSet) {
        t1 = e.op;
        switch (t1.type) {
          case C.TokenType_8:
          case C.TokenType_12:
            return leftOperand.relativeComplement$1(rightOperand);
          case C.TokenType_14:
            return leftOperand.intersection$1(rightOperand);
          case C.TokenType_9:
            return $.$get$BSSet__union().call$2(leftOperand, rightOperand);
          case C.TokenType_21:
          case C.TokenType_22:
            return A.BSInterpreter__isEqual(leftOperand, rightOperand);
          default:
            throw H.wrapException(A.RuntimeError$(t1, "operation '" + t1.toString$0(0) + "' not supported for sets"));
        }
      }
      t1 = e.op;
      if (t1.type === C.TokenType_9) {
        t2 = typeof leftOperand == "string";
        if (t2 && typeof rightOperand == "string")
          return J.$add$ans(leftOperand, rightOperand);
        if (t2)
          return C.JSString_methods.$add(leftOperand, J.toString$0$(rightOperand));
        if (typeof rightOperand == "string")
          return J.$add$ans(J.toString$0$(leftOperand), rightOperand);
      }
      throw H.wrapException(A.RuntimeError$(t1, "operation '" + t1.toString$0(0) + "' not supported for values " + H.S(leftOperand) + " and " + H.S(rightOperand)));
    },
    visitGroupingExpr$1: function(e) {
      return e.expression.accept$1(0, this);
    },
    visitLiteralExpr$1: function(e) {
      return e.value;
    },
    visitUnaryExpr$1: function(e) {
      var params,
        operand = e.operand.accept$1(0, this),
        t1 = e.op;
      switch (t1.type) {
        case C.TokenType_8:
          if (!(operand instanceof F.BSFunction))
            H.throwExpression(A.RuntimeError$(type$.legacy_Token._as(operand), "Operand for " + t1.lexeme + " must be function"));
          type$.legacy_BSFunction._as(operand);
          operand.toString;
          return F.negative(operand);
        case C.TokenType_44:
          return !A.BSInterpreter__istruthy(operand);
        case C.TokenType_17:
          if (operand instanceof F.BSFunction)
            return operand.get$approx();
          if (operand instanceof K.BuilderSet)
            return operand.rule.get$solution();
          throw H.wrapException(A.RuntimeError$(t1, "The approximation (~) operator may only be applied to functions and builder sets"));
        case C.TokenType_16:
          if (operand instanceof F.BSFunction) {
            params = operand.get$parameters();
            if (params.get$length(params) > 1)
              throw H.wrapException(A.RuntimeError$(t1, "the apostrophe operator may only be applied to functions defined in a single (or no) variables"));
            if (params.get$length(params) === 1)
              return operand.accept$1$1(0, new N.PartialDerivative(type$.legacy_Variable._as(params.get$last(params))), type$.legacy_BSFunction).copy$1(operand.get$parameters());
            else
              return 0;
          }
          if (operand instanceof X.BSSet)
            return operand.complement$0();
          throw H.wrapException(A.RuntimeError$(t1, "The apostrophe operator may only be applied to functions and sets"));
        case C.TokenType_15:
          throw H.wrapException(A.RuntimeError$(t1, "error! factorial not yet implemented"));
        default:
          return null;
      }
    },
    visitExpressionStmt$1: function(stmt) {
      return stmt.expression.accept$1(0, this);
    },
    visitPrintStmt$1: function(stmt) {
      var value = stmt.expression.accept$1(0, this),
        t1 = $.BetaScript_printCallback,
        t2 = value == null ? null : J.toString$0$(value);
      t1.call$1(t2 == null ? "nil" : t2);
    },
    visitVarStmt$1: function(s) {
      var _variables, t2, _i, parameter, _variable, t3, i, j, j0, value, _this = this,
        t1 = s.parameters;
      if (t1 != null) {
        _variables = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Variable);
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          parameter = t1[_i];
          _variable = _this._environment.search$1(0, parameter);
          if (_variable == null) {
            t3 = parameter.lexeme;
            _variable = new S.Variable(t3, null);
            _this._environment.values.$indexSet(0, t3, _variable);
          } else if (!(_variable instanceof S.Variable))
            throw H.wrapException(A.RuntimeError$(parameter, string$.Parame));
          C.JSArray_methods.add$1(_variables, _variable);
        }
        for (t1 = type$.legacy_String, i = 0; i < _variables.length; i = j)
          for (j = i + 1, j0 = j; t2 = _variables.length, j0 < t2; ++j0) {
            if (i >= t2)
              return H.ioore(_variables, i);
            t2 = _variables[i];
            t3 = _variables[j0];
            t2 = t2.accept$1$1(0, new N.PlainFunctionStringifier(), t1);
            if (t2 == t3.accept$1$1(0, new N.PlainFunctionStringifier(), t1))
              throw H.wrapException(A.RuntimeError$(s.name, "Duplicate parameters not allowed in function variables"));
          }
      } else
        _variables = null;
      t1 = s.initializer;
      value = t1 != null ? t1.accept$1(0, _this) : null;
      t1 = _variables != null;
      if (t1 && value == null)
        throw H.wrapException(A.RuntimeError$(s.name, "Function variable declarations with explicit parameter lists must always be initialized"));
      else if (t1 && !(value instanceof F.BSFunction))
        throw H.wrapException(A.RuntimeError$(s.name, "Only function variable declarations may include parameters"));
      else if (t1 && value instanceof F.BSFunction)
        value = value.withParameters$1(P.LinkedHashSet_LinkedHashSet$from(_variables, H.instanceType(_variables)._precomputed1));
      _this._environment.define$2(s.name.lexeme, value);
    },
    visitVariableExpr$1: function(e) {
      return this._lookUpVariable$2(e.name, e);
    },
    visitAssignExpr$1: function(e) {
      var _this = this,
        value = e.value.accept$1(0, _this),
        distance = _this._locals.$index(0, e),
        t1 = e.name;
      if (distance != null)
        _this._environment._ancestor$1(distance).values.$indexSet(0, t1.lexeme, value);
      else
        _this.globals.assign$2(t1, value);
      return value;
    },
    visitBlockStmt$1: function(s) {
      var t1 = this._environment;
      this.executeBlock$2(s.statements, new O.Environment(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Object), t1));
    },
    executeBlock$2: function(statements, environment) {
      var previous, s, t1, t2, _i, _this = this;
      type$.legacy_List_legacy_Stmt._as(statements);
      previous = _this._environment;
      try {
        _this._environment = environment;
        for (t1 = statements.length, t2 = type$.legacy_Stmt, _i = 0; _i < statements.length; statements.length === t1 || (0, H.throwConcurrentModificationError)(statements), ++_i) {
          s = statements[_i];
          t2._as(s).accept$1(0, _this);
        }
      } finally {
        _this.set$_environment(previous);
      }
    },
    visitIfStmt$1: function(s) {
      var t1;
      if (A.BSInterpreter__istruthy(s.condition.accept$1(0, this)))
        s.thenBranch.accept$1(0, this);
      else {
        t1 = s.elseBranch;
        if (t1 != null)
          t1.accept$1(0, this);
      }
    },
    visitLogicBinaryExpr$1: function(e) {
      var right,
        left = e.left.accept$1(0, this);
      if (J.$eq$(left, C.BSLogical_unknown__logic_2))
        return left;
      right = e.right.accept$1(0, this);
      if (J.$eq$(right, C.BSLogical_unknown__logic_2))
        return right;
      if (e.op.type === C.TokenType_45) {
        if (A.BSInterpreter__istruthy(left))
          return left;
      } else if (!A.BSInterpreter__istruthy(left))
        return left;
      return right;
    },
    visitWhileStmt$1: function(s) {
      var t1, t2;
      if (H.boolConversionCheck(this.directives.getDirective$1("bs_tt_interpret")))
        throw H.wrapException(A.RuntimeError$(s.token, "loops are forbidden when interpreting for twitter"));
      for (t1 = s.condition, t2 = s.body; A.BSInterpreter__istruthy(t1.accept$1(0, this));)
        t2.accept$1(0, this);
    },
    visitCallExpr$1: function(e) {
      var t1, t2, t3, _i, _this = this,
        callee = e.callee.accept$1(0, _this);
      if (callee instanceof F.BSFunction)
        callee = new F.FunctionAdapter(callee);
      else if (!type$.legacy_BSCallable._is(callee))
        throw H.wrapException(A.RuntimeError$(e.paren, "Can only call routines, functions and classes."));
      if (H.boolConversionCheck(_this.directives.getDirective$1("bs_tt_interpret")))
        t1 = !(callee instanceof X.BSClass);
      else
        t1 = false;
      if (t1)
        throw H.wrapException(A.RuntimeError$(e.paren, "when interpreting for twitter, you can only call functions and constructors"));
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Object);
      for (t2 = e.$arguments, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i].accept$1(0, _this));
      if (t1.length !== callee.get$arity())
        throw H.wrapException(A.RuntimeError$(e.paren, "Expected " + C.JSInt_methods.toString$0(callee.get$arity()) + " paramenters, but got " + C.JSInt_methods.toString$0(t1.length) + "."));
      if (callee instanceof F.FunctionAdapter)
        for (t2 = t1.length, _i = 0; _i < t2; ++_i)
          if (!(t1[_i] instanceof F.BSFunction))
            throw H.wrapException(A.RuntimeError$(e.paren, "functions only support other functions as parameters."));
      return callee.callThing$2(_this, t1);
    },
    visitRoutineStmt$1: function(s) {
      var t1;
      if (H.boolConversionCheck(this.directives.getDirective$1("bs_tt_interpret")))
        throw H.wrapException(A.RuntimeError$(s.name, "routine definitions are forbidden when interpreting for twitter"));
      t1 = this._environment;
      t1.define$2(s.name.lexeme, new N.UserRoutine(s, t1, false));
    },
    visitReturnStmt$1: function(s) {
      var t1 = s.value.accept$1(0, this);
      throw H.wrapException(new A.Return(t1));
    },
    _lookUpVariable$2: function($name, e) {
      var t1, t2,
        distance = this._locals.$index(0, e);
      if (distance != null) {
        t1 = this._environment;
        t2 = $name.lexeme;
        return t1._ancestor$1(distance).values.$index(0, t2);
      } else
        return this.globals.$get$1($name);
    },
    visitClassStmt$1: function(s) {
      var t1, t2, superclass, t3, t4, methods, _i, method, t5, _this = this;
      if (H.boolConversionCheck(_this.directives.getDirective$1("bs_tt_interpret")))
        throw H.wrapException(A.RuntimeError$(s.name, "class definitions are forbidden when interpreting for twitter"));
      t1 = s.superclass;
      t2 = t1 != null;
      if (t2) {
        superclass = t1.accept$1(0, _this);
        if (!(superclass instanceof X.BSClass))
          throw H.wrapException(A.RuntimeError$(t1.name, "Superclass must be a class"));
      } else
        superclass = null;
      t1 = _this._environment;
      t3 = s.name;
      t4 = t3.lexeme;
      t1.define$1(t4);
      if (t2) {
        t1 = _this._environment;
        t1 = new O.Environment(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Object), t1);
        _this._environment = t1;
        t1.define$2("super", superclass);
      }
      methods = P.HashMap_HashMap(type$.legacy_String, type$.legacy_UserRoutine);
      for (t1 = s.methods, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        method = t1[_i];
        t5 = method.name.lexeme;
        methods.$indexSet(0, t5, new N.UserRoutine(method, _this._environment, t5 === t4));
      }
      if (superclass != null)
        _this._environment = _this._environment.enclosing;
      _this._environment.assign$2(t3, new X.BSClass(t4, superclass, methods));
    },
    visitGetExpr$1: function(e) {
      var object = e.object.accept$1(0, this);
      if (object instanceof R.BSInstance)
        return object.$get$1(e.name);
      throw H.wrapException(A.RuntimeError$(e.name, "Only instances have properties"));
    },
    visitSetExpr$1: function(e) {
      var value,
        object = e.object.accept$1(0, this);
      if (!(object instanceof R.BSInstance))
        throw H.wrapException(A.RuntimeError$(e.name, "Only instances have fields"));
      value = e.value.accept$1(0, this);
      object._fields.$indexSet(0, e.name.lexeme, value);
      return value;
    },
    visitThisExpr$1: function(e) {
      return this._lookUpVariable$2(e.keyword, e);
    },
    visitSuperExpr$1: function(e) {
      var object, t2, method,
        distance = this._locals.$index(0, e),
        superclass = type$.legacy_BSClass._as(this._environment._ancestor$1(distance).values.$index(0, "super")),
        t1 = this._environment;
      if (typeof distance !== "number")
        return distance.$sub();
      object = t1._ancestor$1(distance - 1).values.$index(0, "this");
      t1 = e.method;
      t2 = t1.lexeme;
      method = superclass.findMethod$1(t2);
      if (method == null)
        throw H.wrapException(A.RuntimeError$(t1, "Undefined property '" + t2 + "'."));
      return method.bind$1(type$.legacy_BSInstance._as(object));
    },
    visitDerivativeExpr$1: function(e) {
      var _variables, t1, t2, _i, v, _value, t3, t4,
        f = e.derivand.accept$1(0, this);
      if (!(f instanceof F.BSFunction))
        throw H.wrapException(A.RuntimeError$(e.keyword, "target of derivative must be function"));
      _variables = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Variable);
      for (t1 = e.variables, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        v = t1[_i].accept$1(0, this);
        if (v instanceof S.Variable)
          C.JSArray_methods.add$1(_variables, v);
        else
          throw H.wrapException(A.RuntimeError$(e.keyword, "Functions may only be derivated in variables"));
      }
      for (t1 = _variables.length, t2 = type$.legacy_BSFunction, _value = f, _i = 0; _i < _variables.length; _variables.length === t1 || (0, H.throwConcurrentModificationError)(_variables), ++_i) {
        t3 = _value.accept$1$1(0, new N.PartialDerivative(_variables[_i]), t2);
        t4 = _value._parameters;
        _value = t3.copy$1(t4 == null ? _value.get$defaultParameters() : t4);
      }
      return _value;
    },
    visitDirectiveStmt$1: function(s) {
      var t1 = this.directives,
        t2 = s.directive,
        t3 = t1._globalDirectives;
      if (!t3.containsKey$1(t2)) {
        if (t3.containsKey$1(t2))
          t3.$indexSet(0, t2, true);
        else
          t1._localDirectives.$indexSet(0, t2, true);
        P.print("local directive " + H.S(t2) + " set");
      }
    },
    visitBuilderDefinitionExpr$1: function(e) {
      var parameters, t2, _i, parameter, _variable, t3, rule,
        t1 = e.parameters;
      if (t1 != null) {
        parameters = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Variable);
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          parameter = t1[_i];
          _variable = this._environment.search$1(0, parameter);
          if (_variable == null) {
            t3 = parameter.lexeme;
            _variable = new S.Variable(t3, null);
            this._environment.values.$indexSet(0, t3, _variable);
          } else if (!(_variable instanceof S.Variable))
            throw H.wrapException(A.RuntimeError$(parameter, string$.Parame));
          C.JSArray_methods.add$1(parameters, _variable);
        }
      } else
        parameters = null;
      rule = e.rule.accept$1(0, this);
      if (rule instanceof G.LogicExpression)
        return K.builderSet(rule, parameters);
      else
        throw H.wrapException(A.RuntimeError$(e.bar, "Builder set definitions must contain comparisons!"));
    },
    visitIntervalDefinitionExpr$1: function(e) {
      var _a = e.a.accept$1(0, this),
        _b = e.b.accept$1(0, this),
        t1 = type$.legacy_BSFunction;
      t1._as(_a);
      t1._as(_b);
      if (B.toNums(_a, _b, null) == null)
        throw H.wrapException(A.RuntimeError$(e.left, "Interval definitions must have both edges be numbers"));
      return O.interval(_a, _b, e.left.lexeme === "[", e.right.lexeme === "]");
    },
    visitRosterDefinitionExpr$1: function(e) {
      var exception, t1, t2, _i, el, exception0,
        elements = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSFunction);
      for (t1 = e.elements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        el = t1[_i].accept$1(0, this);
        if (el instanceof F.BSFunction) {
          J.add$1$a(elements, el.asConstant$0());
          continue;
        }
        throw H.wrapException(A.RuntimeError$(e.left, string$.Roster));
      }
      try {
        t1 = E.rosterSet(elements);
        return t1;
      } catch (exception0) {
        t1 = H.unwrapException(exception0);
        if (t1 instanceof X.SetDefinitionError) {
          exception = t1;
          throw H.wrapException(A.RuntimeError$(e.left, exception.message));
        } else
          throw exception0;
      }
    },
    visitSetBinaryExpr$1: function(e) {
      var t1,
        left = e.left.accept$1(0, this),
        right = e.right.accept$1(0, this);
      if (right instanceof X.BSSet)
        if (left instanceof X.BSSet) {
          t1 = e.operator;
          switch (t1.type) {
            case C.TokenType_53:
              return $.$get$BSSet__union().call$2(left, right);
            case C.TokenType_41:
              return left.intersection$1(right);
            case C.TokenType_36:
              return $.$get$BSSet__disjoined().call$2(left, right);
            case C.TokenType_13:
              return left.relativeComplement$1(right);
            case C.TokenType_34:
              t1 = $.$get$BSSet__contains();
              return H._instanceType(t1)._eval$1("SetOperation.0*")._as(t1._methodTable.call$2(right, left));
            case C.TokenType_32:
              throw H.wrapException(A.RuntimeError$(t1, "left operand for this operation must be a number"));
            default:
              throw H.wrapException(A.RuntimeError$(t1, "not a valid set operator!"));
          }
        } else {
          if (left instanceof F.BSFunction && e.operator.type === C.TokenType_32 && left.toNum$0() != null)
            return right.belongs$1(left);
          throw H.wrapException(A.RuntimeError$(e.operator, "left operand not valid for this operator"));
        }
      throw H.wrapException(A.RuntimeError$(e.operator, "this operation must be done exclusively on sets"));
    },
    set$_environment: function(_environment) {
      this._environment = type$.legacy_Environment._as(_environment);
    },
    $isExprVisitor: 1,
    $isStmtVisitor: 1
  };
  A.RuntimeError0.prototype = {
    toString$0: function(_) {
      return "Runtime Error: " + this.message + " at line " + this.token.line;
    }
  };
  A.Return.prototype = {};
  D.Intersection.prototype = {
    operateBuilderSetBuilderSet$2: function(first, second) {
      var t2, t3, t4, t5, _i,
        t1 = type$.legacy_BuilderSet;
      t1._as(first);
      t1._as(second);
      t1 = first.rule;
      t2 = second.rule;
      t3 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Variable);
      for (t4 = first.parameters, t5 = t4.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i)
        C.JSArray_methods.add$1(t3, t4[_i]);
      for (t4 = second.parameters, t5 = t4.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i)
        C.JSArray_methods.add$1(t3, t4[_i]);
      return K.builderSet(new R.And(t1, t2), t3);
    },
    _groupNotIntensional$3: function(first, second, other) {
      if (first instanceof K.BuilderSet)
        return new E.IntensionalSetIntersection(first, second.intersection$1(other));
      else
        return new E.IntensionalSetIntersection(second, first.intersection$1(other));
    },
    _groupIntensional$3: function(first, second, other) {
      if (first instanceof K.BuilderSet)
        return new E.IntensionalSetIntersection(first, second.intersection$1(other));
      else
        return new E.IntensionalSetIntersection(second, first.intersection$1(other));
    },
    operateIntensionalSetIntersectionBuilderSet$2: function(first, second) {
      type$.legacy_IntensionalSetIntersection._as(first);
      type$.legacy_BuilderSet._as(second);
      return this._groupIntensional$3(first.first, first.second, second);
    },
    operateIntensionalSetIntersectionIntensionalSetIntersection$2: function(first, second) {
      var t1 = type$.legacy_IntensionalSetIntersection;
      return new E.IntensionalSetIntersection(t1._as(first), t1._as(second));
    },
    operateIntervalBuilderSet$2: function(first, second) {
      return new E.IntensionalSetIntersection(type$.legacy_Interval._as(first), type$.legacy_BuilderSet._as(second));
    },
    operateIntervalIntensionalSetIntersection$2: function(first, second) {
      type$.legacy_Interval._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      return this._groupNotIntensional$3(second.first, second.second, first);
    },
    operateIntervalInterval$2: function(first, second) {
      var t2, _a, t3, t4, _b, _leftClosed, _rightClosed,
        t1 = type$.legacy_Interval;
      t1._as(first);
      t1._as(second);
      t1 = first.a;
      t2 = second.a;
      _a = B.max(t1, t2);
      t3 = first.b;
      t4 = second.b;
      _b = B.min(t3, t4);
      if (J.$eq$(t1, t2))
        _leftClosed = first.leftClosed && second.leftClosed;
      else
        _leftClosed = t1.$gt(0, t2) ? first.leftClosed : second.leftClosed;
      if (J.$eq$(t3, t4))
        _rightClosed = first.rightClosed && second.rightClosed;
      else
        _rightClosed = t3.$lt(0, t4) ? first.rightClosed : second.rightClosed;
      return O.interval(_a, _b, _leftClosed, _rightClosed);
    },
    operateRosterSetBuilderSet$2: function(first, second) {
      var t1, t2;
      type$.legacy_RosterSet._as(first);
      type$.legacy_BuilderSet._as(second);
      t1 = first.elements;
      t2 = t1.$ti;
      return new E.IntensionalSetIntersection(E.rosterSet(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new D.Intersection_operateRosterSetBuilderSet_closure(second)), t2._eval$1("WhereIterable<1>"))), second);
    },
    operateRosterSetIntensionalSetIntersection$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      return this._groupNotIntensional$3(second.first, second.second, first);
    },
    operateRosterSetInterval$2: function(first, second) {
      var t1, t2;
      type$.legacy_RosterSet._as(first);
      type$.legacy_Interval._as(second);
      t1 = first.elements;
      t2 = t1.$ti;
      return E.rosterSet(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new D.Intersection_operateRosterSetInterval_closure(second)), t2._eval$1("WhereIterable<1>")));
    },
    operateRosterSetRosterSet$2: function(first, second) {
      var t2,
        t1 = type$.legacy_RosterSet;
      t1._as(first);
      t1._as(second);
      t1 = first.elements;
      t2 = t1.$ti;
      return E.rosterSet(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new D.Intersection_operateRosterSetRosterSet_closure(second)), t2._eval$1("WhereIterable<1>")));
    },
    operateSetUnionBuilderSet$2: function(first, second) {
      return new E.IntensionalSetIntersection(type$.legacy_SetUnion._as(first), type$.legacy_BuilderSet._as(second));
    },
    operateSetUnionIntensionalSetIntersection$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      return this._groupNotIntensional$3(second.first, second.second, first);
    },
    operateSetUnionInterval$2: function(first, second) {
      var t1, t2;
      type$.legacy_SetUnion._as(first);
      type$.legacy_Interval._as(second);
      t1 = first.subsets;
      t2 = H._arrayInstanceType(t1);
      return G.setUnion(new H.MappedListIterable(t1, t2._eval$1("BSSet*(1)")._as(new D.Intersection_operateSetUnionInterval_closure(second)), t2._eval$1("MappedListIterable<1,BSSet*>")));
    },
    operateSetUnionRosterSet$2: function(first, second) {
      var t1, t2;
      type$.legacy_SetUnion._as(first);
      t1 = type$.legacy_RosterSet._as(second).elements;
      t2 = t1.$ti;
      return E.rosterSet(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new D.Intersection_operateSetUnionRosterSet_closure(first)), t2._eval$1("WhereIterable<1>")));
    },
    operateSetUnionSetUnion$2: function(first, second) {
      var t2,
        t1 = type$.legacy_SetUnion;
      t1._as(first);
      t1 = t1._as(second).subsets;
      t2 = H._arrayInstanceType(t1);
      return G.setUnion(new H.MappedListIterable(t1, t2._eval$1("BSSet*(1)")._as(new D.Intersection_operateSetUnionSetUnion_closure(first)), t2._eval$1("MappedListIterable<1,BSSet*>")));
    },
    onEmpty$2: function(first, second) {
      return C.C_EmptySet;
    }
  };
  D.Intersection_operateRosterSetBuilderSet_closure.prototype = {
    call$1: function(element) {
      return !this.second.belongs$1(type$.legacy_BSFunction._as(element));
    },
    $signature: 2
  };
  D.Intersection_operateRosterSetInterval_closure.prototype = {
    call$1: function(element) {
      return this.second.belongs$1(type$.legacy_BSFunction._as(element));
    },
    $signature: 2
  };
  D.Intersection_operateRosterSetRosterSet_closure.prototype = {
    call$1: function(element) {
      type$.legacy_BSFunction._as(element);
      return this.second.elements.contains$1(0, element);
    },
    $signature: 2
  };
  D.Intersection_operateSetUnionInterval_closure.prototype = {
    call$1: function(e) {
      return this.second.intersection$1(type$.legacy_BSSet._as(e));
    },
    $signature: 20
  };
  D.Intersection_operateSetUnionRosterSet_closure.prototype = {
    call$1: function(element) {
      return this.first.belongs$1(type$.legacy_BSFunction._as(element));
    },
    $signature: 2
  };
  D.Intersection_operateSetUnionSetUnion_closure.prototype = {
    call$1: function(e) {
      return this.first.intersection$1(type$.legacy_BSSet._as(e));
    },
    $signature: 20
  };
  O.Interval.prototype = {
    belongs$1: function(x) {
      var t1, _this = this;
      type$.legacy_BSFunction._as(x);
      t1 = _this.a;
      if (!(t1.$lt(0, x) && x.$lt(0, _this.b)))
        if (!(t1.$eq(0, x) && _this.leftClosed))
          t1 = J.$eq$(x, _this.b) && _this.rightClosed;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    complement$0: function() {
      var _this = this;
      return new G.SetUnion(H.setRuntimeTypeInfo([new O.Interval(false, !_this.leftClosed, F.negative(C.Number_8xB), _this.a), new O.Interval(!_this.rightClosed, false, _this.b, C.Number_8xB)], type$.JSArray_legacy_BSSet));
    },
    accept$1$1: function(_, visitor, ReturnType) {
      var _this = this,
        t1 = _this.leftClosed ? "[" : "(";
      t1 = t1 + H.S(_this.a) + "," + H.S(_this.b);
      return ReturnType._eval$1("0*")._as(t1 + (_this.rightClosed ? "]" : ")"));
    },
    get$isIntensional: function() {
      return false;
    },
    get$knownElements: function() {
      return this;
    }
  };
  Q.LessOrEqual.prototype = {
    compare$2: function(_left, _right) {
      if (typeof _left !== "number")
        return _left.$le();
      return _left <= _right;
    },
    get$type: function(_) {
      return "<=";
    }
  };
  Z.LessThan.prototype = {
    compare$2: function(_left, _right) {
      if (typeof _left !== "number")
        return _left.$lt();
      return _left < _right;
    },
    get$type: function(_) {
      return "<";
    }
  };
  O.Log.prototype = {
    evaluate$1: function(p) {
      var b, op, v;
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      b = this.base.evaluate$1(p);
      op = this.operand.evaluate$1(p);
      if (b instanceof T.Number && op instanceof T.Number) {
        v = Math.log(H.checkNum(op.absvalue)) / Math.log(H.checkNum(b.absvalue));
        if (v === C.JSDouble_methods.toInt$0(v))
          return T.n(v);
      }
      return O.log(op, b);
    },
    copy$1: function(params) {
      return new O.Log(this.base, this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$defaultParameters: function() {
      var t3,
        t1 = type$.legacy_Variable,
        t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = this.base.get$parameters(), t3 = t3.get$iterator(t3); t3.moveNext$0();)
        t2.add$1(0, t3.get$current());
      for (t3 = this.operand.get$parameters(), t3 = t3.get$iterator(t3); t3.moveNext$0();)
        t2.add$1(0, t3.get$current());
      return P.SplayTreeSet_SplayTreeSet$from(t2, t1);
    },
    get$approx: function() {
      var b = this.base.get$approx(),
        op = this.operand.get$approx();
      return b instanceof T.Number && op instanceof T.Number ? T.n(Math.log(H.checkNum(op.absvalue)) / Math.log(H.checkNum(b.absvalue))) : O.log(op, b);
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitLog$1(this));
    }
  };
  G.LogicExpression.prototype = {
    isSolution$1: function(p) {
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      return C.BSLogical_unknown__logic_2;
    },
    get$solution: function() {
      return C.C_EmptySet;
    }
  };
  Q.MethodTable.prototype = {
    addMethod$3: function(t1, t2, method) {
      this.hashMap.$indexSet(0, J.$add$ans(H._rtiToString(t1._rti, null), H._rtiToString(t2._rti, null)), method);
      return method;
    },
    call$2: function(first, second) {
      var t1 = this.$ti,
        t2 = t1._eval$1("2*");
      t2._as(first);
      t2._as(second);
      return t1._eval$1("1*")._as(this.findMethod$2(J.get$runtimeType$(first), J.get$runtimeType$(second)).call$2(first, second));
    },
    findMethod$2: function(t1, t2) {
      var t3, exception, _null = null;
      try {
        t3 = this.hashMap.$index(0, J.$add$ans(H._rtiToString(t1._rti, _null), H._rtiToString(t2._rti, _null)));
        return t3;
      } catch (exception) {
        H.unwrapException(exception);
        if (!this.hashMap.containsKey$1(J.$add$ans(H._rtiToString(t1._rti, _null), H._rtiToString(t2._rti, _null))))
          throw H.wrapException(P.UnimplementedError$(_null));
        else
          throw exception;
      }
    }
  };
  F.Multiplication.prototype = {
    evaluate$1: function(p) {
      var t1, t2, t3, _i;
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSFunction);
      for (t2 = this.operands, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i].evaluate$1(p));
      return F.multiply(t1);
    },
    copy$1: function(params) {
      return new F.Multiplication(this.operands, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$defaultParameters: function() {
      var t3, t4, _i, operand, t5,
        t1 = type$.legacy_Variable,
        t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = this.operands, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
        operand = t3[_i];
        t5 = operand._parameters;
        if (t5 == null)
          t5 = operand.get$defaultParameters();
        t5 = t5.get$iterator(t5);
        for (; t5.moveNext$0();)
          t2.add$1(0, t5.get$current());
      }
      return P.SplayTreeSet_SplayTreeSet$from(t2, t1);
    },
    get$approx: function() {
      var t2, t3, _i,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSFunction);
      for (t2 = this.operands, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i].get$approx());
      return F.multiply(t1);
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitMultiplication$1(this));
    }
  };
  F._consolidateNegatives_closure.prototype = {
    call$1: function(f) {
      var t1 = type$.legacy_BSFunction,
        _op = B.extractFromNegative(t1._as(f), t1);
      if (H.boolConversionCheck(_op.second)) {
        t1 = this._box_0;
        t1._negative = !t1._negative;
      }
      return _op.first;
    },
    $signature: 3
  };
  B.NativeCallable.prototype = {
    get$arity: function() {
      return this._arity;
    },
    callThing$2: function(interpreter, $arguments) {
      return this._function.call$2(interpreter, $arguments);
    },
    toString$0: function(_) {
      return "Native function";
    },
    $isBSCallable: 1
  };
  N.closure.prototype = {
    call$2: function(interpreter, $arguments) {
      type$.legacy_BSInterpreter._as(interpreter);
      type$.legacy_List_legacy_Object._as($arguments);
      return Date.now();
    },
    $signature: 71
  };
  F.Negative.prototype = {
    get$approx: function() {
      return F.negative(this.operand.get$approx());
    },
    copy$1: function(parameters) {
      return new F.Negative(this.operand, type$.legacy_Set_legacy_Variable._as(parameters));
    },
    evaluate$1: function(p) {
      return F.negative(this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p)));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitNegative$1(this));
    }
  };
  A.Not.prototype = {
    isSolution$1: function(p) {
      var t1 = this.operand.isSolution$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p))._value;
      if (t1 === C._logic_2)
        t1 = C.BSLogical_unknown__logic_2;
      else
        t1 = t1 === C._logic_0 ? C.BSLogical_true__logic_0 : C.BSLogical_false__logic_1;
      return t1;
    },
    get$solution: function() {
      return this.operand.get$solution().complement$0();
    },
    toString$0: function(_) {
      return "not (" + this.operand.toString$0(0) + ")";
    },
    get$parameters: function() {
      return this.operand.get$parameters();
    },
    get$foundEverySolution: function() {
      return this.operand.get$foundEverySolution();
    }
  };
  T.Number.prototype = {
    evaluate$1: function(p) {
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      return this;
    },
    copy$1: function(params) {
      var t1;
      type$.legacy_Set_legacy_Variable._as(params);
      t1 = this.absvalue;
      if (this.isNamed)
        return new T.Number(true, t1, this.name, params);
      else
        return T.Number$_(t1, params);
    },
    get$defaultParameters: function() {
      return P.SplayTreeSet$(null, null, type$.legacy_Variable);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof T.Number && this.absvalue == other.absvalue;
    },
    get$approx: function() {
      return T.n(this.absvalue);
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitNumber$1(this));
    }
  };
  L.Or.prototype = {
    isSolution$1: function(p) {
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      return this.left.isSolution$1(p).$or(0, this.right.isSolution$1(p));
    },
    get$solution: function() {
      var t1 = this.left.get$solution(),
        t2 = this.right.get$solution();
      t1.toString;
      return $.$get$BSSet__union().call$2(t1, t2);
    },
    toString$0: function(_) {
      return "(" + this.left.toString$0(0) + ") or (" + this.right.toString$0(0) + ")";
    },
    get$parameters: function() {
      var t3, t4,
        t1 = type$.legacy_String,
        t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = this.left.get$parameters(), t4 = t3.$ti, t4 = P._SplayTreeKeyIterator$(t3, t4._precomputed1, t4._eval$1("_SplayTreeSetNode<1>")); t4.moveNext$0();)
        t2.add$1(0, t4.get$current());
      for (t3 = this.right.get$parameters(), t4 = t3.$ti, t4 = P._SplayTreeKeyIterator$(t3, t4._precomputed1, t4._eval$1("_SplayTreeSetNode<1>")); t4.moveNext$0();)
        t2.add$1(0, t4.get$current());
      return P.SplayTreeSet_SplayTreeSet$from(t2, t1);
    },
    get$foundEverySolution: function() {
      return this.left.get$foundEverySolution() && this.right.get$foundEverySolution();
    }
  };
  G.ParseError.prototype = {};
  G.BSParser.prototype = {
    parse$0: function() {
      var t2, decl, _this = this,
        statements = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Stmt),
        t1 = _this._tokens;
      while (true) {
        t2 = _this._parser$_current;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        if (!(t1[t2].type !== C.TokenType_56))
          break;
        c$0: {
          if (_this.match$1(C.TokenType_11))
            break c$0;
          decl = _this.declaration$0();
          if (decl != null)
            C.JSArray_methods.add$1(statements, decl);
        }
      }
      return statements;
    },
    declaration$0: function() {
      var e, t1, exception, _this = this;
      try {
        if (_this.match$1(C.TokenType_33)) {
          t1 = _this._classDeclaration$0();
          return t1;
        }
        if (_this.match$1(C.TokenType_48)) {
          t1 = _this._routine$1("routine");
          return t1;
        }
        if (_this.match$1(C.TokenType_42)) {
          t1 = _this.varDeclaration$0();
          return t1;
        }
        t1 = _this.statement$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof G.ParseError) {
          _this._synchronize$0();
          return null;
        } else if (t1 instanceof X.SetDefinitionError) {
          e = t1;
          P.print(e.message);
          _this._synchronize$0();
          return null;
        } else
          throw exception;
      }
    },
    _classDeclaration$0: function() {
      var superclass, methods, t1, t2, t3, _this = this,
        $name = _this.consume$2(C.TokenType_27, "Expect class name");
      if (_this.match$1(C.TokenType_25)) {
        _this.consume$2(C.TokenType_27, "Expect superclass name");
        superclass = new V.VariableExpr(_this.previous$0());
      } else
        superclass = null;
      _this.consume$2(C.TokenType_2, "Expect '{' before class body");
      methods = H.setRuntimeTypeInfo([], type$.JSArray_legacy_RoutineStmt);
      t1 = _this._tokens;
      while (true) {
        if (!_this.check$1(C.TokenType_3)) {
          t2 = _this._parser$_current;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          t2 = t1[t2].type !== C.TokenType_56;
        } else
          t2 = false;
        if (!t2)
          break;
        if (_this.check$1(C.TokenType_11)) {
          t2 = _this._parser$_current;
          t3 = t1.length;
          if (t2 >= t3)
            return H.ioore(t1, t2);
          if (t1[t2].type !== C.TokenType_56)
            t2 = _this._parser$_current = t2 + 1;
          if (t2 > 0) {
            --t2;
            if (t2 >= t3)
              return H.ioore(t1, t2);
          }
        } else
          C.JSArray_methods.add$1(methods, _this._routine$1("method"));
      }
      _this.consume$2(C.TokenType_3, "Expect '}' after class body");
      return new F.ClassStmt($name, superclass, methods);
    },
    _routine$1: function(kind) {
      var parameters, _this = this,
        $name = _this.consume$2(C.TokenType_27, "Expect " + kind + " name.");
      _this.consume$2(C.TokenType_0, "Expect '(' after " + kind + " name;");
      parameters = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Token);
      if (!_this.check$1(C.TokenType_1))
        do
          c$0: {
            if (_this.match$1(C.TokenType_11))
              break c$0;
            C.JSArray_methods.add$1(parameters, _this.consume$2(C.TokenType_27, "Expect parameter name"));
          }
        while (_this.match$1(C.TokenType_6));
      _this.consume$2(C.TokenType_1, "Expect ')' after parameters.");
      _this.match$1(C.TokenType_11);
      _this.consume$2(C.TokenType_2, "Expect '{' after routine parameters");
      return new F.RoutineStmt($name, parameters, _this._block$0());
    },
    varDeclaration$0: function() {
      var parameters, t1, initializer, _this = this, _null = null,
        $name = _this.consume$2(C.TokenType_27, "Expect variable name");
      if (_this.match$1(C.TokenType_0)) {
        parameters = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Token);
        do {
          if (_this.check$1(C.TokenType_1))
            break;
          C.JSArray_methods.add$1(parameters, _this.consume$2(C.TokenType_27, "Expect parameter name"));
        } while (_this.match$1(C.TokenType_6));
        _this.consume$2(C.TokenType_1, "Expect ')' after parameters.");
      } else
        parameters = _null;
      t1 = parameters == null ? _null : parameters.length === 0;
      if (t1 !== false)
        parameters = _null;
      initializer = _this.match$1(C.TokenType_20) ? _this._assigment$0() : _null;
      _this.checkTerminator$1("variable declaration");
      return new F.VarStmt($name, parameters, initializer);
    },
    statement$0: function() {
      var condition, thenBranch, value, keyword, token, _this = this;
      if (_this.match$1(C.TokenType_39))
        return _this.forStatement$0();
      if (_this.match$1(C.TokenType_40)) {
        _this.consume$2(C.TokenType_0, "Expect '(' after 'if'.");
        condition = _this._assigment$0();
        _this.consume$2(C.TokenType_1, "Expect ')' after if condition.");
        _this.match$1(C.TokenType_11);
        thenBranch = _this.statement$0();
        return new F.IfStmt(condition, thenBranch, _this.match$1(C.TokenType_37) ? _this.statement$0() : null);
      }
      if (_this.match$1(C.TokenType_46)) {
        if (_this.match$1(C.TokenType_11))
          _this._error$2(_this.previous$0(), "linebreak right after 'print' keyword not allowed. Please start the target expression in the same line.");
        value = _this._assigment$0();
        _this.checkTerminator$1("print");
        return new F.PrintStmt(value);
      }
      if (_this.match$1(C.TokenType_47)) {
        keyword = _this.previous$0();
        if (_this.match$1(C.TokenType_11))
          _this._error$2(_this.previous$0(), "linebreak not allowed immediately after return keyword! If you want to end the routine early, either write 'return null' or 'return;'");
        value = _this.check$1(C.TokenType_10) ? new V.LiteralExpr(null) : _this._assigment$0();
        _this.checkTerminator$1("return");
        return new F.ReturnStmt(keyword, value);
      }
      if (_this.match$1(C.TokenType_55)) {
        token = _this.previous$0();
        _this.consume$2(C.TokenType_0, "Expect '(' after 'while'.");
        condition = _this._assigment$0();
        _this.consume$2(C.TokenType_1, "Expect ')' after while condition.");
        _this.match$1(C.TokenType_11);
        return new F.WhileStmt(token, condition, _this.statement$0());
      }
      if (_this.match$1(C.TokenType_2))
        return type$.legacy_Stmt._as(_this._parseLeftBrace$0());
      if (_this.match$1(C.TokenType_30)) {
        _this.previous$0();
        return new F.DirectiveStmt(H._asStringS(_this.previous$0().literal));
      }
      return _this.expressionStatement$0();
    },
    expressionStatement$0: function() {
      var expr = this._assigment$0();
      this.checkTerminator$1("expression");
      return new F.ExpressionStmt(expr);
    },
    forStatement$0: function() {
      var initializer, condition, increment, body, t1, t2, t3, t4, _i, _this = this,
        token = _this.previous$0();
      _this.consume$2(C.TokenType_0, "Expect '(' after 'for'.");
      if (!_this.match$1(C.TokenType_10))
        initializer = _this.match$1(C.TokenType_42) ? _this.varDeclaration$0() : _this.expressionStatement$0();
      else
        initializer = null;
      condition = _this.check$1(C.TokenType_10) ? null : _this._assigment$0();
      _this.consume$2(C.TokenType_10, "Expect ';' after loop condition.");
      increment = _this.check$1(C.TokenType_1) ? null : _this._assigment$0();
      _this.consume$2(C.TokenType_1, "Expect ')' after increment in for statement");
      body = _this.statement$0();
      if (increment != null) {
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Stmt);
        t2 = body instanceof F.BlockStmt;
        if (t2)
          for (t3 = body.statements, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i)
            C.JSArray_methods.add$1(t1, t3[_i]);
        if (!t2)
          C.JSArray_methods.add$1(t1, body);
        C.JSArray_methods.add$1(t1, new F.ExpressionStmt(increment));
        body = new F.BlockStmt(t1);
      }
      body = new F.WhileStmt(token, condition == null ? new V.LiteralExpr(true) : condition, body);
      return initializer != null ? new F.BlockStmt(H.setRuntimeTypeInfo([initializer, body], type$.JSArray_legacy_Stmt)) : body;
    },
    _block$0: function() {
      var t2, _this = this,
        statements = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Stmt),
        t1 = _this._tokens;
      while (true) {
        if (!_this.check$1(C.TokenType_3)) {
          t2 = _this._parser$_current;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          t2 = t1[t2].type !== C.TokenType_56;
        } else
          t2 = false;
        if (!t2)
          break;
        c$0: {
          if (_this.match$1(C.TokenType_11))
            break c$0;
          C.JSArray_methods.add$1(statements, _this.declaration$0());
        }
      }
      _this.consume$2(C.TokenType_3, "Expect '}' after block.");
      return statements;
    },
    _assigment$0: function() {
      var equals, value, _this = this,
        expr = _this._or$0();
      if (_this.match$1(C.TokenType_20)) {
        equals = _this.previous$0();
        value = _this._assigment$0();
        if (expr instanceof V.VariableExpr)
          return new V.AssignExpr(expr.name, value);
        else if (expr instanceof V.GetExpr)
          return new V.SetExpr(expr.object, expr.name, value);
        _this._error$2(equals, "Invalid assigment target");
      }
      return expr;
    },
    _or$0: function() {
      var t1, t2, op, _this = this,
        expr = _this._and$0();
      for (t1 = _this._tokens; _this.match$1(C.TokenType_45);) {
        t2 = _this._parser$_current;
        if (t2 > 0) {
          --t2;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          op = t1[t2];
        } else
          op = null;
        expr = new V.LogicBinaryExpr(expr, op, _this._and$0());
      }
      return expr;
    },
    _and$0: function() {
      var t1, t2, op, _this = this,
        expr = _this._equality$0();
      for (t1 = _this._tokens; _this.match$1(C.TokenType_31);) {
        t2 = _this._parser$_current;
        if (t2 > 0) {
          --t2;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          op = t1[t2];
        } else
          op = null;
        expr = new V.LogicBinaryExpr(expr, op, _this._equality$0());
      }
      return expr;
    },
    _equality$0: function() {
      var t1, t2, t3, op, _this = this,
        expr = _this._comparison$0();
      for (t1 = type$.JSArray_legacy_TokenType, t2 = _this._tokens; _this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_21, C.TokenType_22], t1));) {
        t3 = _this._parser$_current;
        if (t3 > 0) {
          --t3;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          op = t2[t3];
        } else
          op = null;
        expr = new V.BinaryExpr(expr, op, _this._comparison$0());
      }
      return expr;
    },
    _comparison$0: function() {
      var t1, t2, t3, _this = this,
        expr = _this._setBinary$0();
      for (t1 = type$.JSArray_legacy_TokenType, t2 = _this._tokens; _this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_23, C.TokenType_24, C.TokenType_25, C.TokenType_26], t1));) {
        t3 = _this._parser$_current;
        if (t3 > 0) {
          --t3;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          t3 = t2[t3];
        } else
          t3 = null;
        expr = new V.BinaryExpr(expr, t3, _this._setBinary$0());
      }
      return expr;
    },
    _setBinary$0: function() {
      var t1, t2, t3, _this = this,
        expr = _this._addition$0();
      for (t1 = type$.JSArray_legacy_TokenType, t2 = _this._tokens; _this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_53, C.TokenType_41, C.TokenType_13, C.TokenType_34, C.TokenType_36, C.TokenType_32], t1));) {
        t3 = _this._parser$_current;
        if (t3 > 0) {
          --t3;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          t3 = t2[t3];
        } else
          t3 = null;
        expr = new V.SetBinaryExpr(expr, t3, _this._addition$0());
      }
      return expr;
    },
    _addition$0: function() {
      var t1, t2, t3, op, _this = this,
        expr = _this._multiplication$0();
      for (t1 = type$.JSArray_legacy_TokenType, t2 = _this._tokens; _this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_8, C.TokenType_9], t1));) {
        t3 = _this._parser$_current;
        if (t3 > 0) {
          --t3;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          op = t2[t3];
        } else
          op = null;
        expr = new V.BinaryExpr(expr, op, _this._multiplication$0());
      }
      return expr;
    },
    _multiplication$0: function() {
      var t1, t2, t3, op, _this = this,
        expr = _this._exponentiation$0();
      for (t1 = type$.JSArray_legacy_TokenType, t2 = _this._tokens; _this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_12, C.TokenType_14], t1));) {
        t3 = _this._parser$_current;
        if (t3 > 0) {
          --t3;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          op = t2[t3];
        } else
          op = null;
        expr = new V.BinaryExpr(expr, op, _this._exponentiation$0());
      }
      return expr;
    },
    _exponentiation$0: function() {
      var t1, t2, op, _this = this,
        expr = _this._unary_left$0();
      for (t1 = _this._tokens; _this.match$1(C.TokenType_18);) {
        t2 = _this._parser$_current;
        if (t2 > 0) {
          --t2;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          op = t1[t2];
        } else
          op = null;
        expr = new V.BinaryExpr(expr, op, _this._unary_left$0());
      }
      return expr;
    },
    _unary_left$0: function() {
      var _this = this;
      if (_this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_8, C.TokenType_44, C.TokenType_17], type$.JSArray_legacy_TokenType)))
        return new V.UnaryExpr(_this.previous$0(), _this._unary_left$0());
      return _this._unary_right$0();
    },
    _unary_right$0: function() {
      var t1, t2, t3, _this = this,
        operand = _this.match$1(C.TokenType_35) ? _this._derivative$0() : _this._call$0();
      for (t1 = type$.JSArray_legacy_TokenType, t2 = _this._tokens; _this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_16, C.TokenType_15], t1));) {
        t3 = _this._parser$_current;
        if (t3 > 0) {
          --t3;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          t3 = t2[t3];
        } else
          t3 = null;
        operand = new V.UnaryExpr(t3, operand);
      }
      return operand;
    },
    _call$0: function() {
      var _this = this,
        expr = _this.primary$0();
      for (; true;)
        if (_this.match$1(C.TokenType_0))
          expr = _this._finishCall$1(expr);
        else if (_this.match$1(C.TokenType_7))
          expr = new V.GetExpr(expr, _this.consume$2(C.TokenType_27, "Expect property name after '.'"));
        else
          break;
      return expr;
    },
    _finishCall$1: function(callee) {
      var _this = this,
        $arguments = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Expr);
      if (!_this.check$1(C.TokenType_1))
        do
          C.JSArray_methods.add$1($arguments, _this._assigment$0());
        while (_this.match$1(C.TokenType_6));
      return new V.CallExpr(callee, _this.consume$2(C.TokenType_1, "Expect ')' after arguments."), $arguments);
    },
    _derivative$0: function() {
      var variables, _this = this,
        keyword = _this.consume$2(C.TokenType_0, "Expect '(' after del keyword - linebreaks not allowed between 'del' and '('"),
        derivand = _this._assigment$0();
      _this.consume$2(C.TokenType_1, "Expect ')' after derivand");
      _this.consume$2(C.TokenType_12, "expect '/' after derivand - if you wanted to add a linebreak between ')' and '/', do it after the slash");
      _this.consume$2(C.TokenType_35, "expect second 'del' after derivand");
      _this.consume$2(C.TokenType_0, "expect '(' after second del keyword");
      variables = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Expr);
      if (_this.check$1(C.TokenType_1))
        _this._error$2(_this.previous$0(), "at least one variable is necessary in derivative expression");
      do
        C.JSArray_methods.add$1(variables, _this._assigment$0());
      while (_this.match$1(C.TokenType_6));
      _this.consume$2(C.TokenType_1, "expect ')' after derivative variables");
      return new V.DerivativeExpr(keyword, derivand, variables);
    },
    primary$0: function() {
      var t1, keyword, _this = this;
      if (_this.match$1(C.TokenType_49))
        return _this._setDefinition$0();
      t1 = type$.JSArray_legacy_TokenType;
      if (_this.matchAny$1(H.setRuntimeTypeInfo([C.TokenType_29, C.TokenType_28], t1)))
        return new V.LiteralExpr(_this.previous$0().literal);
      if (_this.match$1(C.TokenType_38))
        return new V.LiteralExpr(C.BSLogical_false__logic_1);
      if (_this.match$1(C.TokenType_52))
        return new V.LiteralExpr(C.BSLogical_true__logic_0);
      if (_this.match$1(C.TokenType_54))
        return new V.LiteralExpr(C.BSLogical_unknown__logic_2);
      if (_this.match$1(C.TokenType_43))
        return new V.LiteralExpr(null);
      if (_this.match$1(C.TokenType_0))
        return _this._parseLeftParentheses$0();
      if (_this.match$1(C.TokenType_2))
        return type$.legacy_Expr._as(_this._parseLeftBrace$1(true));
      if (_this.match$1(C.TokenType_4))
        return _this._parseLeftSquare$0();
      if (_this.match$1(C.TokenType_27))
        return new V.VariableExpr(_this.previous$0());
      if (_this.match$1(C.TokenType_51))
        return new V.ThisExpr(_this.previous$0());
      if (_this.match$1(C.TokenType_50)) {
        keyword = _this.previous$0();
        _this.consume$2(C.TokenType_7, "Expect '.' after 'super' - if you want to add a linebreak, do it after the dot");
        return new V.SuperExpr(keyword, _this.consume$2(C.TokenType_27, "Expect superclass method name"));
      }
      if (_this.previous$0().type === C.TokenType_11 && _this.checkAny$1(H.setRuntimeTypeInfo([C.TokenType_6, C.TokenType_7, C.TokenType_8, C.TokenType_9, C.TokenType_12, C.TokenType_14, C.TokenType_17, C.TokenType_18, C.TokenType_20, C.TokenType_21, C.TokenType_22, C.TokenType_23, C.TokenType_24, C.TokenType_25, C.TokenType_26, C.TokenType_31, C.TokenType_45, C.TokenType_44, C.TokenType_37], t1)))
        throw H.wrapException(_this._error$2(_this._peek$0(), "missing left argument for operator. If you wanted to break an expression into multiple lines, do it after operators"));
      else
        throw H.wrapException(_this._error$2(_this._peek$0(), "Expect expression."));
    },
    _setDefinition$0: function() {
      var _this = this;
      if (_this.match$1(C.TokenType_0))
        return _this._parseLeftParentheses$1(true);
      if (_this.match$1(C.TokenType_4))
        return _this._parseLeftSquare$1(true);
      if (_this.match$1(C.TokenType_2))
        return type$.legacy_Expr._as(_this._parseLeftBrace$1(true));
      throw H.wrapException(_this._error$2(_this.previous$0(), "Expecting Set definition after 'set' keyword"));
    },
    _parseLeftParentheses$1: function(mustBeSet) {
      var _expr, _this = this,
        _left = _this.previous$0(),
        expr = _this._assigment$0();
      if (_this.match$1(C.TokenType_6)) {
        _expr = _this._assigment$0();
        _this._consumeAny$2(H.setRuntimeTypeInfo([C.TokenType_3, C.TokenType_1], type$.JSArray_legacy_TokenType), string$.Expect);
        return new V.IntervalDefinitionExpr(_left, expr, _expr, _this.previous$0());
      }
      if (mustBeSet)
        throw H.wrapException(_this._error$2(_this.previous$0(), "Expecting Interval definition"));
      _this.consume$2(C.TokenType_1, "Expect ')' after expression");
      return new V.GroupingExpr(expr);
    },
    _parseLeftParentheses$0: function() {
      return this._parseLeftParentheses$1(false);
    },
    _parseLeftSquare$1: function(mustBeSet) {
      var _expr, _this = this,
        left = _this.previous$0(),
        expr = _this._assigment$0();
      _this.consume$2(C.TokenType_6, "Expecting comma in Interval definition");
      _expr = _this._assigment$0();
      _this._consumeAny$2(H.setRuntimeTypeInfo([C.TokenType_3, C.TokenType_1], type$.JSArray_legacy_TokenType), string$.Expect);
      return new V.IntervalDefinitionExpr(left, expr, _expr, _this.previous$0());
    },
    _parseLeftSquare$0: function() {
      return this._parseLeftSquare$1(false);
    },
    _parseLeftBrace$1: function(expectSet) {
      var t1, expressions, first, isSet, bar, logic, parameters, t2, _i, parameter, _setReturn, statements, _this = this,
        _leftBrace = _this.previous$0();
      if (_this.match$1(C.TokenType_3))
        if (expectSet)
          return new V.LiteralExpr(C.C_EmptySet);
        else
          return new F.ExpressionStmt(new V.LiteralExpr(C.C_EmptySet));
      t1 = type$.JSArray_legacy_Expr;
      expressions = H.setRuntimeTypeInfo([], t1);
      first = !_this.check$1(C.TokenType_19) ? _this.declaration$0() : null;
      if (_this.match$1(C.TokenType_6)) {
        if (first == null)
          _this._error$2(_this.previous$0(), "expect token before comma");
        if (first instanceof F.ExpressionStmt)
          C.JSArray_methods.add$1(expressions, first.expression);
        else
          _this._error$2(_this.previous$0(), "all elements in a roster set definition must evaluate to a number");
        do
          C.JSArray_methods.add$1(expressions, _this._assigment$0());
        while (_this.match$1(C.TokenType_6));
        isSet = true;
      } else
        isSet = false;
      if (_this.match$1(C.TokenType_19)) {
        if (first != null)
          if (first instanceof F.ExpressionStmt)
            C.JSArray_methods.add$1(expressions, first.expression);
          else
            _this._error$2(_this.previous$0(), "all parameters in a builder set definition must evaluate to a variable");
        bar = _this.previous$0();
        logic = _this._assigment$0();
        _this.consume$2(C.TokenType_3, "Expect '}' after builder set definition");
        if (expressions.length !== 0) {
          parameters = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Token);
          for (t2 = expressions.length, _i = 0; _i < expressions.length; expressions.length === t2 || (0, H.throwConcurrentModificationError)(expressions), ++_i) {
            parameter = expressions[_i];
            if (parameter instanceof V.VariableExpr)
              C.JSArray_methods.add$1(parameters, parameter.name);
            else
              throw H.wrapException(X.SetDefinitionError$("parameter is not explicit variable name"));
          }
        } else
          parameters = null;
        _setReturn = new V.BuilderDefinitionExpr(_leftBrace, parameters, logic, bar, _this.previous$0());
      } else if (isSet) {
        _this.consume$2(C.TokenType_3, "Expect '}' after roster set definition");
        _setReturn = new V.RosterDefinitionExpr(_leftBrace, expressions, _this.previous$0());
      } else
        _setReturn = null;
      if (_this.match$1(C.TokenType_3))
        if (first instanceof F.ExpressionStmt)
          _setReturn = new V.RosterDefinitionExpr(_leftBrace, H.setRuntimeTypeInfo([first.expression], t1), _this.previous$0());
        else
          return new F.BlockStmt(H.setRuntimeTypeInfo([first], type$.JSArray_legacy_Stmt));
      if (_setReturn != null)
        if (expectSet)
          return _setReturn;
        else
          return new F.ExpressionStmt(_setReturn);
      statements = H.setRuntimeTypeInfo([first], type$.JSArray_legacy_Stmt);
      t1 = _this._tokens;
      while (true) {
        if (!_this.check$1(C.TokenType_3)) {
          t2 = _this._parser$_current;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          t2 = t1[t2].type !== C.TokenType_56;
        } else
          t2 = false;
        if (!t2)
          break;
        c$0: {
          if (_this.match$1(C.TokenType_11))
            break c$0;
          C.JSArray_methods.add$1(statements, _this.declaration$0());
        }
      }
      _this.consume$2(C.TokenType_3, "Expect '}' after block.");
      return new F.BlockStmt(statements);
    },
    _parseLeftBrace$0: function() {
      return this._parseLeftBrace$1(false);
    },
    match$1: function(type) {
      if (this.check$1(type)) {
        this._advance$0();
        return true;
      }
      return false;
    },
    matchAny$1: function(types) {
      var t1, _i;
      type$.legacy_List_legacy_TokenType._as(types);
      for (t1 = types.length, _i = 0; _i < types.length; types.length === t1 || (0, H.throwConcurrentModificationError)(types), ++_i)
        if (this.match$1(types[_i]))
          return true;
      return false;
    },
    check$1: function(type) {
      var t1 = this._tokens,
        t2 = this._parser$_current;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2].type;
      if (t2 === C.TokenType_56)
        return false;
      return t2 == type;
    },
    checkAny$1: function(types) {
      var t1, t2;
      type$.legacy_List_legacy_TokenType._as(types);
      t1 = this._tokens;
      t2 = this._parser$_current;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2].type;
      if (t2 === C.TokenType_56)
        return false;
      return C.JSArray_methods.contains$1(types, t2);
    },
    _advance$0: function() {
      var _this = this,
        t1 = _this._tokens,
        t2 = _this._parser$_current;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      if (t1[t2].type !== C.TokenType_56)
        _this._parser$_current = t2 + 1;
      return _this.previous$0();
    },
    _peek$0: function() {
      var t1 = this._tokens,
        t2 = this._parser$_current;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    previous$0: function() {
      var t2,
        t1 = this._parser$_current;
      if (t1 > 0) {
        t2 = this._tokens;
        --t1;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        t1 = t2[t1];
      } else
        t1 = null;
      return t1;
    },
    consume$2: function(type, message) {
      var t1, t2, _this = this;
      if (_this.check$1(type))
        return _this._advance$0();
      t1 = _this._tokens;
      t2 = _this._parser$_current;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      _this._error$2(t1[t2], message);
      return null;
    },
    _consumeAny$2: function(types, message) {
      var _i, t1, t2, t3, _this = this;
      type$.legacy_List_legacy_TokenType._as(types);
      for (_i = 0; _i < 2; ++_i)
        if (_this.check$1(types[_i])) {
          t1 = _this._tokens;
          t2 = _this._parser$_current;
          t3 = t1.length;
          if (t2 >= t3)
            return H.ioore(t1, t2);
          if (t1[t2].type !== C.TokenType_56)
            t2 = _this._parser$_current = t2 + 1;
          if (t2 > 0) {
            --t2;
            if (t2 >= t3)
              return H.ioore(t1, t2);
            t2 = t1[t2];
            t1 = t2;
          } else
            t1 = null;
          return t1;
        }
      t1 = _this._tokens;
      t2 = _this._parser$_current;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      _this._error$2(t1[t2], message);
      return null;
    },
    _error$2: function(token, message) {
      this._errorCallback.call$2(token, message);
      return new G.ParseError();
    },
    _synchronize$0: function() {
      var t1, t2, t3, t4, t5, t6, _this = this;
      _this._advance$0();
      t1 = _this._tokens;
      while (true) {
        t2 = _this._parser$_current;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        t4 = t1[t2].type;
        t5 = t4 !== C.TokenType_56;
        if (!t5)
          break;
        if (t2 > 0) {
          t6 = t2 - 1;
          if (t6 >= t3)
            return H.ioore(t1, t6);
          t6 = t1[t6];
        } else
          t6 = null;
        if (t6.type === C.TokenType_10)
          return;
        switch (t4) {
          case C.TokenType_33:
          case C.TokenType_48:
          case C.TokenType_42:
          case C.TokenType_39:
          case C.TokenType_40:
          case C.TokenType_55:
          case C.TokenType_46:
          case C.TokenType_47:
            return;
        }
        if (t5)
          t2 = _this._parser$_current = t2 + 1;
        if (t2 > 0) {
          --t2;
          if (t2 >= t3)
            return H.ioore(t1, t2);
        }
      }
    },
    checkTerminator$1: function(type) {
      var t2, t3, _this = this,
        t1 = type$.JSArray_legacy_TokenType;
      if (_this.checkAny$1(H.setRuntimeTypeInfo([C.TokenType_10, C.TokenType_11], t1))) {
        _this._advance$0();
        return;
      }
      t2 = _this._tokens;
      t3 = _this._parser$_current;
      if (t3 >= t2.length)
        return H.ioore(t2, t3);
      if (t2[t3].type === C.TokenType_56 || _this.checkAny$1(H.setRuntimeTypeInfo([C.TokenType_3, C.TokenType_6, C.TokenType_19], t1)))
        return;
      throw H.wrapException(_this._error$2(_this._peek$0(), "Expect ';' or line break after " + type + " value"));
    }
  };
  N.PartialDerivative.prototype = {
    visitAbs$1: function(f) {
      var t1 = Y.sgn(f),
        t2 = f.operand.accept$1$1(0, this, type$.legacy_BSFunction);
      t1.toString;
      return F.multiply(H.setRuntimeTypeInfo([t1, t2], type$.JSArray_legacy_BSFunction));
    },
    visitArCosH$1: function(f) {
      var t3, t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t1 = X.exp(T.n(2), t1);
      t3 = T.n(1);
      t1.toString;
      t3.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t3 = O.root(Z.add(H.setRuntimeTypeInfo([t1, F.negative(t3)], t4)));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t3], t4));
    },
    visitArCscH$1: function(f) {
      var t3, t4, t5,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      t2 = F.negative(t2);
      t3 = Y.abs(t1);
      t1 = X.exp(T.n(2), t1);
      t4 = T.n(1);
      t1.toString;
      t5 = type$.JSArray_legacy_BSFunction;
      t4 = F.multiply(H.setRuntimeTypeInfo([t3, O.root(Z.add(H.setRuntimeTypeInfo([t1, t4], t5)))], t5));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t5), H.setRuntimeTypeInfo([t4], t5));
    },
    visitArCtgH$1: function(f) {
      var t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction),
        t3 = T.n(1);
      t3.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t1 = Z.add(H.setRuntimeTypeInfo([t3, F.negative(t1)], t4));
      t3 = T.n(2);
      t1.toString;
      t1 = X.exp(t3, t1);
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t1], t4));
    },
    visitArSecH$1: function(f) {
      var t3, t4, t5,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      t2 = F.negative(t2);
      t3 = T.n(1);
      t4 = X.exp(T.n(2), t1);
      t3.toString;
      t4.toString;
      t5 = type$.JSArray_legacy_BSFunction;
      t4 = F.multiply(H.setRuntimeTypeInfo([t1, O.root(Z.add(H.setRuntimeTypeInfo([t3, F.negative(t4)], t5)))], t5));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t5), H.setRuntimeTypeInfo([t4], t5));
    },
    visitCos$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof L.ArcSin ? t1.operand : new U.Sin(t1, null);
      t2.toString;
      t2 = F.negative(t2);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    visitCosH$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof Z.ArSinH ? t1.operand : new D.SinH(t1, null);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    visitCscH$1: function(f) {
      var t3, t4,
        t1 = f.operand,
        t2 = t1 instanceof V.ArCtgH ? t1.operand : new A.CtgH(t1, null);
      t2.toString;
      t2 = F.negative(t2);
      t3 = t1 instanceof L.ArCscH ? t1.operand : new M.CscH(t1, null);
      t2.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t3 = F.multiply(H.setRuntimeTypeInfo([t2, t3], t4));
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t3.toString;
      return F.multiply(H.setRuntimeTypeInfo([t3, t1], t4));
    },
    visitCtgH$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof L.ArCscH ? t1.operand : new M.CscH(t1, null),
        t3 = T.n(2);
      t2.toString;
      t2 = X.exp(t3, t2);
      t2.toString;
      t2 = F.negative(t2);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    visitDivision$1: function(f) {
      var t5,
        t1 = f.numerator,
        t2 = type$.legacy_BSFunction,
        t3 = t1.accept$1$1(0, this, t2),
        t4 = f.denominator;
      t3.toString;
      t5 = type$.JSArray_legacy_BSFunction;
      t3 = F.multiply(H.setRuntimeTypeInfo([t3, t4], t5));
      t2 = F.multiply(H.setRuntimeTypeInfo([t1, t4.accept$1$1(0, this, t2)], t5));
      t3.toString;
      t2.toString;
      t2 = Z.add(H.setRuntimeTypeInfo([t3, F.negative(t2)], t5));
      t4 = X.exp(T.n(2), t4);
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t5), H.setRuntimeTypeInfo([t4], t5));
    },
    visitExponentiation$1: function(f) {
      var t5,
        t1 = f.exponent,
        t2 = f.base,
        t3 = type$.legacy_BSFunction,
        t4 = O.log(t2, C.Number_oNt).accept$1$1(0, this, t3);
      t1.toString;
      t5 = type$.JSArray_legacy_BSFunction;
      t4 = F.multiply(H.setRuntimeTypeInfo([t1, t4], t5));
      t3 = t1.accept$1$1(0, this, t3);
      t2 = O.log(t2, C.Number_oNt);
      t3.toString;
      t2 = F.multiply(H.setRuntimeTypeInfo([t3, t2], t5));
      t4.toString;
      return F.multiply(H.setRuntimeTypeInfo([f, Z.add(H.setRuntimeTypeInfo([t4, t2], t5))], t5));
    },
    visitLog$1: function(f) {
      var t1 = f.base,
        t2 = type$.legacy_BSFunction,
        t3 = type$.JSArray_legacy_BSFunction,
        t4 = f.operand;
      if (t1 instanceof T.Number) {
        t2 = t4.accept$1$1(0, this, t2);
        t1 = O.log(t1, C.Number_oNt);
        t1.toString;
        t4 = F.multiply(H.setRuntimeTypeInfo([t1, t4], t3));
        t2.toString;
        t3 = S.divide(H.setRuntimeTypeInfo([t2], t3), H.setRuntimeTypeInfo([t4], t3));
        t1 = t3;
      } else {
        t4 = O.log(t4, C.Number_oNt);
        t1 = O.log(t1, C.Number_oNt);
        t4.toString;
        t2 = S.divide(H.setRuntimeTypeInfo([t4], t3), H.setRuntimeTypeInfo([t1], t3)).accept$1$1(0, this, t2);
        t1 = t2;
      }
      return t1;
    },
    visitSecH$1: function(f) {
      var t3, t4,
        t1 = f.operand,
        t2 = t1 instanceof N.ArSecH ? t1.operand : new D.SecH(t1, null);
      t2.toString;
      t2 = F.negative(t2);
      t3 = t1 instanceof T.ArTanH ? t1.operand : new U.TanH(t1, null);
      t2.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t3 = F.multiply(H.setRuntimeTypeInfo([t2, t3], t4));
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t3.toString;
      return F.multiply(H.setRuntimeTypeInfo([t3, t1], t4));
    },
    visitSinH$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof Y.ArCosH ? t1.operand : new D.CosH(t1, null);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    visitTanH$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof N.ArSecH ? t1.operand : new D.SecH(t1, null),
        t3 = T.n(2);
      t2.toString;
      t2 = X.exp(t3, t2);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    visitVariable$1: function(f) {
      return T.n(this.v.name == f.name ? 1 : 0);
    },
    visitArSinH$1: function(f) {
      var t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction),
        t3 = T.n(1);
      t1 = X.exp(T.n(2), t1);
      t3.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t1 = O.root(Z.add(H.setRuntimeTypeInfo([t3, t1], t4)));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t1], t4));
    },
    visitArTanH$1: function(f) {
      var t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction),
        t3 = T.n(1);
      t1 = X.exp(T.n(2), t1);
      t3.toString;
      t1.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t1 = Z.add(H.setRuntimeTypeInfo([t3, F.negative(t1)], t4));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t1], t4));
    },
    visitArcCos$1: function(f) {
      var t3, t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      t2 = F.negative(t2);
      t3 = T.n(1);
      t1 = X.exp(T.n(2), t1);
      t3.toString;
      t1.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t1 = O.root(Z.add(H.setRuntimeTypeInfo([t3, F.negative(t1)], t4)));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t1], t4));
    },
    visitArcCsc$1: function(f) {
      var t3, t4, t5,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      t2 = F.negative(t2);
      t3 = Y.abs(t1);
      t1 = X.exp(T.n(2), t1);
      t4 = T.n(1);
      t1.toString;
      t5 = type$.JSArray_legacy_BSFunction;
      t4 = F.multiply(H.setRuntimeTypeInfo([t3, O.root(Z.add(H.setRuntimeTypeInfo([t1, t4], t5)))], t5));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t5), H.setRuntimeTypeInfo([t4], t5));
    },
    visitArcCtg$1: function(f) {
      var t3, t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      t2 = F.negative(t2);
      t3 = T.n(1);
      t1 = X.exp(T.n(2), t1);
      t3.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t1 = Z.add(H.setRuntimeTypeInfo([t3, t1], t4));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t1], t4));
    },
    visitArcSec$1: function(f) {
      var t4, t5,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction),
        t3 = Y.abs(t1);
      t1 = X.exp(T.n(2), t1);
      t4 = T.n(1);
      t1.toString;
      t4.toString;
      t5 = type$.JSArray_legacy_BSFunction;
      t4 = F.multiply(H.setRuntimeTypeInfo([t3, O.root(Z.add(H.setRuntimeTypeInfo([t1, F.negative(t4)], t5)))], t5));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t5), H.setRuntimeTypeInfo([t4], t5));
    },
    visitArcSin$1: function(f) {
      var t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction),
        t3 = T.n(1);
      t1 = X.exp(T.n(2), t1);
      t3.toString;
      t1.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t1 = O.root(Z.add(H.setRuntimeTypeInfo([t3, F.negative(t1)], t4)));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t1], t4));
    },
    visitArcTan$1: function(f) {
      var t4,
        t1 = f.operand,
        t2 = t1.accept$1$1(0, this, type$.legacy_BSFunction),
        t3 = T.n(1);
      t1 = X.exp(T.n(2), t1);
      t3.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t1 = Z.add(H.setRuntimeTypeInfo([t3, t1], t4));
      t2.toString;
      return S.divide(H.setRuntimeTypeInfo([t2], t4), H.setRuntimeTypeInfo([t1], t4));
    },
    visitCsc$1: function(f) {
      var t3, t4,
        t1 = f.operand,
        t2 = t1 instanceof L.ArcCsc ? t1.operand : new U.Csc(t1, null);
      t2.toString;
      t2 = F.negative(t2);
      t3 = t1 instanceof U.ArcCtg ? t1.operand : new X.Ctg(t1, null);
      t2.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t3 = F.multiply(H.setRuntimeTypeInfo([t2, t3], t4));
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t3.toString;
      return F.multiply(H.setRuntimeTypeInfo([t3, t1], t4));
    },
    visitCtg$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof L.ArcCsc ? t1.operand : new U.Csc(t1, null),
        t3 = T.n(2);
      t2.toString;
      t2 = X.exp(t3, t2);
      t2.toString;
      t2 = F.negative(t2);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    visitMultiplication$1: function(f) {
      var t1, t2, i, term,
        ops = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSFunction);
      for (t1 = f.operands, t2 = type$.legacy_BSFunction, i = 0; i < t1.length; ++i) {
        term = H.setRuntimeTypeInfo(t1.slice(0), H._arrayInstanceType(t1));
        C.JSArray_methods.insert$2(term, i, t2._as(C.JSArray_methods.removeAt$1(term, i)).accept$1$1(0, this, t2));
        C.JSArray_methods.add$1(ops, F.multiply(term));
      }
      return Z.add(ops);
    },
    visitNegative$1: function(f) {
      return F.negative(f.operand.accept$1$1(0, this, type$.legacy_BSFunction));
    },
    visitNumber$1: function(f) {
      return T.n(0);
    },
    visitRoot$1: function(f) {
      var t4,
        t1 = T.n(0.5),
        t2 = f.operand,
        t3 = T.n(-0.5);
      t2.toString;
      t3 = X.exp(t3, t2);
      t1.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t3 = F.multiply(H.setRuntimeTypeInfo([t1, t3], t4));
      t2 = t2.accept$1$1(0, this, type$.legacy_BSFunction);
      t3.toString;
      return F.multiply(H.setRuntimeTypeInfo([t3, t2], t4));
    },
    visitSec$1: function(f) {
      var t4,
        t1 = f.operand,
        t2 = t1 instanceof Y.ArcSec ? t1.operand : new S.Sec(t1, null),
        t3 = t1 instanceof Q.ArcTan ? t1.operand : new M.Tan(t1, null);
      t2.toString;
      t4 = type$.JSArray_legacy_BSFunction;
      t3 = F.multiply(H.setRuntimeTypeInfo([t2, t3], t4));
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t3.toString;
      return F.multiply(H.setRuntimeTypeInfo([t3, t1], t4));
    },
    visitSignum$1: function(f) {
      return T.n(0);
    },
    visitSin$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof N.ArcCos ? t1.operand : new A.Cos(t1, null);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    visitSum$1: function(f) {
      var t1 = f.operands,
        t2 = H._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,BSFunction*>");
      return Z.add(P.List_List$from(new H.MappedListIterable(t1, t2._eval$1("BSFunction*(1)")._as(new N.PartialDerivative_visitSum_closure(this)), t3), true, t3._eval$1("ListIterable.E")));
    },
    visitTan$1: function(f) {
      var t1 = f.operand,
        t2 = t1 instanceof Y.ArcSec ? t1.operand : new S.Sec(t1, null),
        t3 = T.n(2);
      t2.toString;
      t2 = X.exp(t3, t2);
      t1 = t1.accept$1$1(0, this, type$.legacy_BSFunction);
      t2.toString;
      return F.multiply(H.setRuntimeTypeInfo([t2, t1], type$.JSArray_legacy_BSFunction));
    },
    $isFunctionVisitor: 1
  };
  N.PartialDerivative_visitSum_closure.prototype = {
    call$1: function(g) {
      var t1 = type$.legacy_BSFunction;
      return t1._as(g).accept$1$1(0, this.$this, t1);
    },
    $signature: 3
  };
  N.PlainFunctionStringifier.prototype = {
    visitAbs$1: function(f) {
      return "|" + H.S(f.operand) + "|";
    },
    visitArCosH$1: function(f) {
      return "arcosh(" + H.S(f.operand) + ")";
    },
    visitArCscH$1: function(f) {
      return "arcsch(" + H.S(f.operand) + ")";
    },
    visitArCtgH$1: function(f) {
      return "arctgh(" + H.S(f.operand) + ")";
    },
    visitArSecH$1: function(f) {
      return "arsech(" + H.S(f.operand) + ")";
    },
    visitArSinH$1: function(f) {
      return "arsinh(" + H.S(f.operand) + ")";
    },
    visitArTanH$1: function(f) {
      return "artanh(" + H.S(f.operand) + ")";
    },
    visitArcCos$1: function(f) {
      return "arccos(" + H.S(f.operand) + ")";
    },
    visitArcCsc$1: function(f) {
      return "arcsc(" + H.S(f.operand) + ")";
    },
    visitArcCtg$1: function(f) {
      return "arcctg(" + H.S(f.operand) + ")";
    },
    visitArcSec$1: function(f) {
      return "arcsec(" + H.S(f.operand) + ")";
    },
    visitArcSin$1: function(f) {
      return "arcsin(" + H.S(f.operand) + ")";
    },
    visitArcTan$1: function(f) {
      return "arctan(" + H.S(f.operand) + ")";
    },
    visitCos$1: function(f) {
      return "cos(" + H.S(f.operand) + ")";
    },
    visitCosH$1: function(f) {
      return "cosh(" + H.S(f.operand) + ")";
    },
    visitCsc$1: function(f) {
      return "csc(" + H.S(f.operand) + ")";
    },
    visitCscH$1: function(f) {
      return "csch(" + H.S(f.operand) + ")";
    },
    visitCtg$1: function(f) {
      return "ctg(" + H.S(f.operand) + ")";
    },
    visitCtgH$1: function(f) {
      return "ctgh(" + H.S(f.operand) + ")";
    },
    visitDivision$1: function(f) {
      return "((" + H.S(f.numerator) + ")/(" + H.S(f.denominator) + "))";
    },
    visitExponentiation$1: function(f) {
      return "((" + H.S(f.base) + ")^(" + H.S(f.exponent) + "))";
    },
    visitLog$1: function(f) {
      var t1 = f.base,
        t2 = f.operand;
      return J.$eq$(t1, C.Number_oNt) ? "ln(" + H.S(t2) + ")" : "log(" + H.S(t1) + ")(" + H.S(t2) + ")";
    },
    visitMultiplication$1: function(f) {
      var s, i,
        t1 = f.operands;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      s = C.JSString_methods.$add("(", J.toString$0$(t1[0]));
      for (i = 1; i < t1.length; ++i)
        s += C.JSString_methods.$add("*", J.toString$0$(t1[i]));
      return s + ")";
    },
    visitNegative$1: function(f) {
      return "-" + H.S(f.operand);
    },
    visitNumber$1: function(f) {
      return f.name;
    },
    visitRoot$1: function(f) {
      return "sqrt(" + H.S(f.operand) + ")";
    },
    visitSec$1: function(f) {
      return "sec(" + H.S(f.operand) + ")";
    },
    visitSecH$1: function(f) {
      return "sech(" + H.S(f.operand) + ")";
    },
    visitSignum$1: function(f) {
      return "sign(" + H.S(f.operand) + ")";
    },
    visitSin$1: function(f) {
      return "sec(" + H.S(f.operand) + ")";
    },
    visitSinH$1: function(f) {
      return "sinh(" + H.S(f.operand) + ")";
    },
    visitSum$1: function(f) {
      var s, i, _op,
        t1 = f.operands;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      s = C.JSString_methods.$add("(", J.toString$0$(t1[0]));
      for (i = 1; i < t1.length; ++i) {
        _op = t1[i];
        if (_op instanceof F.Negative) {
          s += " - ";
          _op = _op.operand;
        } else
          s += " + ";
        s = C.JSString_methods.$add(s, J.toString$0$(_op));
      }
      return s + ")";
    },
    visitTan$1: function(f) {
      return "tan(" + H.S(f.operand) + ")";
    },
    visitTanH$1: function(f) {
      return "tanh(" + H.S(f.operand) + ")";
    },
    visitVariable$1: function(f) {
      return f.name;
    },
    $isFunctionVisitor: 1
  };
  M.PlainSetStringifier.prototype = {
    visitBuilderSet$1: function(a) {
      var t1 = a.rule;
      return C.JSString_methods.$add("{", t1.get$parameters().reduce$1(0, new M.PlainSetStringifier_visitBuilderSet_closure())) + ("| " + t1.toString$0(0) + "}");
    },
    visitRosterSet$1: function(a) {
      var t1 = a.elements;
      return J.$add$ans(C.JSArray_methods.fold$1$2(C.JSArray_methods.sublist$1(P.List_List$from(t1, true, t1.$ti._precomputed1), 1), "{" + H.S(t1.get$first(t1)), new M.PlainSetStringifier_visitRosterSet_closure(), type$.legacy_String), "}");
    },
    visitSetUnion$1: function(a) {
      var t1 = a.subsets;
      return C.JSArray_methods.fold$1$2(C.JSArray_methods.sublist$1(t1, 1), H.S(C.JSArray_methods.get$first(t1)), new M.PlainSetStringifier_visitSetUnion_closure(), type$.legacy_String);
    }
  };
  M.PlainSetStringifier_visitBuilderSet_closure.prototype = {
    call$2: function(previousValue, element) {
      H._asStringS(previousValue);
      H._asStringS(element);
      return H.S(previousValue) + ", " + H.S(element);
    },
    $signature: 72
  };
  M.PlainSetStringifier_visitRosterSet_closure.prototype = {
    call$2: function(previousValue, element) {
      return J.$add$ans(H._asStringS(previousValue), ", " + H.S(type$.legacy_BSFunction._as(element)));
    },
    $signature: 73
  };
  M.PlainSetStringifier_visitSetUnion_closure.prototype = {
    call$2: function(previousValue, element) {
      return J.$add$ans(H._asStringS(previousValue), " \u222a " + H.S(type$.legacy_BSSet._as(element)));
    },
    $signature: 74
  };
  O.RelativeComplement.prototype = {
    _removeIteratively$2: function(first, subsets) {
      return C.JSArray_methods.fold$1$2(type$.legacy_List_legacy_BSSet._as(subsets), first, new O.RelativeComplement__removeIteratively_closure(first), type$.legacy_BSSet);
    },
    operateBuilderSetBuilderSet$2: function(first, second) {
      var t1 = type$.legacy_BuilderSet;
      t1._as(first);
      t1._as(second);
      return K.builderSet(new R.And(first.rule, new A.Not(second.rule)), null);
    },
    operateBuilderSetIntensionalSetIntersection$2: function(first, second) {
      var t1, t2, t3;
      type$.legacy_BuilderSet._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      t1 = second.first;
      t2 = type$.JSArray_legacy_BSSet;
      t3 = second.second;
      if (t1 instanceof K.BuilderSet)
        return this._removeIteratively$2(first, H.setRuntimeTypeInfo([t1, t3], t2));
      else
        return this._removeIteratively$2(first, H.setRuntimeTypeInfo([t3, t1], t2));
    },
    operateBuilderSetInterval$2: function(first, second) {
      return type$.legacy_BuilderSet._as(first).intersection$1(type$.legacy_Interval._as(second).complement$0());
    },
    operateBuilderSetRosterSet$2: function(first, second) {
      return type$.legacy_BuilderSet._as(first).intersection$1(type$.legacy_RosterSet._as(second).complement$0());
    },
    operateBuilderSetSetUnion$2: function(first, second) {
      return type$.legacy_BuilderSet._as(first).intersection$1(type$.legacy_SetUnion._as(second).complement$0());
    },
    operateIntensionalSetIntersectionBuilderSet$2: function(first, second) {
      return type$.legacy_IntensionalSetIntersection._as(first).intersection$1(type$.legacy_BuilderSet._as(second).complement$0());
    },
    operateIntensionalSetIntersectionIntensionalSetIntersection$2: function(first, second) {
      var t1 = type$.legacy_IntensionalSetIntersection;
      t1._as(first);
      t1._as(second);
      return this._removeIteratively$2(first, H.setRuntimeTypeInfo([second.first, second.second], type$.JSArray_legacy_BSSet));
    },
    operateIntensionalSetIntersectionInterval$2: function(first, second) {
      return type$.legacy_IntensionalSetIntersection._as(first).intersection$1(type$.legacy_Interval._as(second).complement$0());
    },
    operateIntensionalSetIntersectionRosterSet$2: function(first, second) {
      return type$.legacy_IntensionalSetIntersection._as(first).intersection$1(type$.legacy_RosterSet._as(second).complement$0());
    },
    operateIntensionalSetIntersectionSetUnion$2: function(first, second) {
      return this._removeIteratively$2(type$.legacy_IntensionalSetIntersection._as(first), type$.legacy_SetUnion._as(second).subsets);
    },
    operateIntervalBuilderSet$2: function(first, second) {
      return type$.legacy_Interval._as(first).intersection$1(type$.legacy_BuilderSet._as(second).complement$0());
    },
    operateIntervalIntensionalSetIntersection$2: function(first, second) {
      return type$.legacy_Interval._as(first).intersection$1(type$.legacy_IntensionalSetIntersection._as(second).complement$0());
    },
    operateIntervalInterval$2: function(first, second) {
      var t1 = type$.legacy_Interval;
      t1._as(first);
      t1._as(second);
      first.toString;
      t1 = $.$get$BSSet__contains();
      if (H._instanceType(t1)._eval$1("SetOperation.0*")._as(t1._methodTable.call$2(first, second))._value === C._logic_0)
        return new G.SetUnion(H.setRuntimeTypeInfo([O.interval(first.a, second.a, first.leftClosed, !second.leftClosed), O.interval(second.b, first.b, !second.rightClosed, first.rightClosed)], type$.JSArray_legacy_BSSet));
      t1 = second.a;
      if (first.belongs$1(t1))
        return new O.Interval(first.leftClosed, !second.leftClosed, first.a, t1);
      t1 = second.b;
      return new O.Interval(!second.rightClosed, first.rightClosed, t1, first.b);
    },
    operateIntervalRosterSet$2: function(first, second) {
      var t1, t2, containedElements, t3, i;
      type$.legacy_Interval._as(first);
      t1 = type$.legacy_RosterSet._as(second).elements;
      t2 = t1.$ti;
      containedElements = new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(first.get$belongs()), t2._eval$1("WhereIterable<1>"));
      t2 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSSet);
      t1 = first.a;
      t3 = containedElements.get$first(containedElements);
      C.JSArray_methods.add$1(t2, new O.Interval(first.leftClosed, false, t1, t3));
      for (i = 0; i < containedElements.get$length(containedElements); ++i)
        C.JSArray_methods.add$1(t2, new O.Interval(false, false, containedElements.elementAt$1(0, i - 1), containedElements.elementAt$1(0, i)));
      t3 = containedElements.get$last(containedElements);
      C.JSArray_methods.add$1(t2, new O.Interval(false, first.rightClosed, t3, t1));
      return new G.SetUnion(t2);
    },
    operateIntervalSetUnion$2: function(first, second) {
      return this._removeIteratively$2(type$.legacy_Interval._as(first), type$.legacy_SetUnion._as(second).subsets);
    },
    _removeWhereBelongs$2: function(elements, second) {
      var t2,
        t1 = type$.legacy_SplayTreeSet_legacy_BSFunction;
      t1._as(elements);
      t2 = elements.$ti;
      return t1._as(new H.WhereIterable(elements, t2._eval$1("bool(1)")._as(new O.RelativeComplement__removeWhereBelongs_closure(second)), t2._eval$1("WhereIterable<1>")));
    },
    operateRosterSetBuilderSet$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_BuilderSet._as(second);
      return E.rosterSet(this._removeWhereBelongs$2(first.elements, second));
    },
    operateRosterSetIntensionalSetIntersection$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      return E.rosterSet(this._removeWhereBelongs$2(first.elements, second));
    },
    operateRosterSetInterval$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_Interval._as(second);
      return E.rosterSet(this._removeWhereBelongs$2(first.elements, second));
    },
    operateRosterSetRosterSet$2: function(first, second) {
      var t2,
        t1 = type$.legacy_RosterSet;
      t1._as(first);
      t1._as(second);
      t1 = first.elements;
      t2 = t1.$ti;
      return E.rosterSet(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new O.RelativeComplement_operateRosterSetRosterSet_closure(second)), t2._eval$1("WhereIterable<1>")));
    },
    operateRosterSetSetUnion$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_SetUnion._as(second);
      return E.rosterSet(this._removeWhereBelongs$2(first.elements, second));
    },
    operateSetUnionBuilderSet$2: function(first, second) {
      return type$.legacy_SetUnion._as(first).intersection$1(type$.legacy_BuilderSet._as(second).complement$0());
    },
    operateSetUnionIntensionalSetIntersection$2: function(first, second) {
      return type$.legacy_SetUnion._as(first).intersection$1(type$.legacy_IntensionalSetIntersection._as(second).complement$0());
    },
    _complementFromEvery$2: function(subsets, other) {
      var t2,
        t1 = type$.legacy_List_legacy_BSSet;
      t1._as(subsets);
      t2 = H._arrayInstanceType(subsets);
      return t1._as(new H.MappedListIterable(subsets, t2._eval$1("BSSet*(1)")._as(new O.RelativeComplement__complementFromEvery_closure(other)), t2._eval$1("MappedListIterable<1,BSSet*>")));
    },
    operateSetUnionInterval$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_Interval._as(second);
      this._complementFromEvery$2(first.subsets, second);
      return void 1;
    },
    operateSetUnionRosterSet$2: function(first, second) {
      type$.legacy_SetUnion._as(first);
      type$.legacy_RosterSet._as(second);
      this._complementFromEvery$2(first.subsets, second);
      return void 1;
    },
    operateSetUnionSetUnion$2: function(first, second) {
      var t1 = type$.legacy_SetUnion;
      t1._as(first);
      t1._as(second);
      this._complementFromEvery$2(first.subsets, second);
      return void 1;
    },
    onEmpty$2: function(first, second) {
      return first === C.C_EmptySet ? C.C_EmptySet : second;
    }
  };
  O.RelativeComplement__removeIteratively_closure.prototype = {
    call$2: function(previousValue, element) {
      var t1 = type$.legacy_BSSet;
      t1._as(previousValue);
      return this.first.relativeComplement$1(t1._as(element));
    },
    $signature: 21
  };
  O.RelativeComplement__removeWhereBelongs_closure.prototype = {
    call$1: function(element) {
      return !this.second.belongs$1(type$.legacy_BSFunction._as(element));
    },
    $signature: 2
  };
  O.RelativeComplement_operateRosterSetRosterSet_closure.prototype = {
    call$1: function(element) {
      type$.legacy_BSFunction._as(element);
      return !this.second.elements.contains$1(0, element);
    },
    $signature: 2
  };
  O.RelativeComplement__complementFromEvery_closure.prototype = {
    call$1: function(e) {
      return type$.legacy_BSSet._as(e).relativeComplement$1(this.other);
    },
    $signature: 20
  };
  L.RoutineType.prototype = {
    toString$0: function(_) {
      return this._resolver$_name;
    }
  };
  L.ClassType.prototype = {
    toString$0: function(_) {
      return this._resolver$_name;
    }
  };
  L.Resolver.prototype = {
    visitAssignExpr$1: function(e) {
      e.value.accept$1(0, this);
      this._resolveLocal$2(e, e.name);
    },
    visitBinaryExpr$1: function(e) {
      e.left.accept$1(0, this);
      e.right.accept$1(0, this);
    },
    visitBlockStmt$1: function(s) {
      var t1 = this._scopes;
      C.JSArray_methods.add$1(t1, P.HashMap_HashMap(type$.legacy_String, type$.legacy_bool));
      C.JSArray_methods.forEach$1(type$.legacy_List_legacy_Stmt._as(s.statements), this.get$_resolveStmt());
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
    },
    visitCallExpr$1: function(e) {
      var t1, t2, _i;
      e.callee.accept$1(0, this);
      for (t1 = e.$arguments, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].accept$1(0, this);
    },
    visitExpressionStmt$1: function(s) {
      s.expression.accept$1(0, this);
    },
    visitRoutineStmt$1: function(s) {
      var t1 = s.name;
      this._declare$1(t1);
      this._define$1(t1);
      this._resolveRoutine$2(s, C.RoutineType_1);
    },
    visitGroupingExpr$1: function(e) {
      e.expression.accept$1(0, this);
    },
    visitIfStmt$1: function(s) {
      var t1;
      s.condition.accept$1(0, this);
      s.thenBranch.accept$1(0, this);
      t1 = s.elseBranch;
      if (t1 != null)
        t1.accept$1(0, this);
    },
    visitLiteralExpr$1: function(e) {
    },
    visitPrintStmt$1: function(s) {
      s.expression.accept$1(0, this);
    },
    visitReturnStmt$1: function(s) {
      if (this._currentRoutine === C.RoutineType_0)
        M.BetaScript_error(s.keyword, "Cannot return from top-level code.");
      if (this._currentRoutine === C.RoutineType_2)
        M.BetaScript_error(s.keyword, "Cannot return a value from a constructor");
      s.value.accept$1(0, this);
    },
    visitUnaryExpr$1: function(e) {
      e.operand.accept$1(0, this);
    },
    visitVarStmt$1: function(s) {
      var t2, _this = this,
        t1 = s.name;
      _this._declare$1(t1);
      _this._declareParameters$1(s.parameters);
      t2 = s.initializer;
      if (t2 != null)
        t2.accept$1(0, _this);
      _this._define$1(t1);
    },
    visitVariableExpr$1: function(e) {
      var t2, t3, t4,
        _s43_ = "Cannot read variable in its own initializer",
        t1 = this._scopes;
      if (t1.length !== 0) {
        t2 = C.JSArray_methods.get$last(t1);
        t3 = e.name;
        t4 = t3.lexeme;
        if (t2.containsKey$1(t4) && J.$eq$(C.JSArray_methods.get$last(t1).$index(0, t4), false))
          M.BetaScript_error(t3, _s43_);
        t1 = t3;
      } else {
        t1 = this._globals;
        t2 = e.name;
        t3 = t2.lexeme;
        if (t1.containsKey$1(t3) && !H.boolConversionCheck(t1.$index(0, t3)))
          M.BetaScript_error(t2, _s43_);
        t1 = t2;
      }
      this._resolveLocal$2(e, t1);
    },
    visitWhileStmt$1: function(s) {
      s.condition.accept$1(0, this);
      s.body.accept$1(0, this);
    },
    visitLogicBinaryExpr$1: function(e) {
      e.left.accept$1(0, this);
      e.right.accept$1(0, this);
    },
    _resolveStmt$1: function(s) {
      return type$.legacy_Stmt._as(s).accept$1(0, this);
    },
    _declare$1: function($name) {
      var t2, t3,
        t1 = this._scopes;
      if (t1.length !== 0) {
        t2 = C.JSArray_methods.get$last(t1);
        t3 = $name.lexeme;
        if (t2.containsKey$1(t3))
          M.BetaScript_error($name, "Variable with this name already declared in this scope.");
        C.JSArray_methods.get$last(t1).$indexSet(0, t3, false);
      } else {
        t1 = this._globals;
        t2 = $name.lexeme;
        if (t1.containsKey$1(t2))
          M.BetaScript_error($name, "Variable with this name already declared in global scope (might be shadowing native declaration).");
        t1.$indexSet(0, t2, false);
      }
    },
    _define$1: function($name) {
      var t1 = this._scopes;
      if (t1.length !== 0)
        C.JSArray_methods.get$last(t1).$indexSet(0, $name.lexeme, true);
      else
        this._globals.$indexSet(0, $name.lexeme, true);
    },
    _resolveLocal$2: function(e, $name) {
      var t1, i, t2;
      type$.legacy_Expr._as(e);
      for (t1 = this._scopes, i = t1.length - 1; i >= 0; --i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (t1[i].containsKey$1($name.lexeme)) {
          t2 = t1.length;
          this._interpreter._locals.$indexSet(0, e, t2 - 1 - i);
          return;
        }
      }
    },
    _resolveRoutine$2: function(s, type) {
      var t1, t2, t3, t4, _i, param, _this = this,
        enclosingRoutine = _this._currentRoutine;
      _this._currentRoutine = type;
      t1 = _this._scopes;
      C.JSArray_methods.add$1(t1, P.HashMap_HashMap(type$.legacy_String, type$.legacy_bool));
      for (t2 = s.parameters, t3 = t2.length, t4 = _this._globals, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        param = t2[_i];
        _this._declare$1(param);
        if (t1.length !== 0)
          C.JSArray_methods.get$last(t1).$indexSet(0, param.lexeme, true);
        else
          t4.$indexSet(0, param.lexeme, true);
      }
      C.JSArray_methods.forEach$1(type$.legacy_List_legacy_Stmt._as(s.body), _this.get$_resolveStmt());
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      _this._currentRoutine = enclosingRoutine;
    },
    visitClassStmt$1: function(s) {
      var t1, t2, t3, t4, t5, _i, method, _this = this,
        enclosingClass = _this._currentClass;
      _this._currentClass = C.ClassType_1;
      t1 = s.name;
      _this._declare$1(t1);
      _this._define$1(t1);
      t2 = s.superclass;
      t3 = t2 != null;
      if (t3) {
        t4 = t1.lexeme;
        t5 = t2.name;
        if (t4 === t5.lexeme)
          M.BetaScript_error(t5, "A class cannot inherit from itself");
        _this._currentClass = C.ClassType_2;
        t2.accept$1(0, _this);
        t2 = _this._scopes;
        C.JSArray_methods.add$1(t2, P.HashMap_HashMap(type$.legacy_String, type$.legacy_bool));
        C.JSArray_methods.get$last(t2).$indexSet(0, "super", true);
      }
      t2 = _this._scopes;
      C.JSArray_methods.add$1(t2, P.HashMap_HashMap(type$.legacy_String, type$.legacy_bool));
      C.JSArray_methods.get$last(t2).$indexSet(0, "this", true);
      for (t4 = s.methods, t5 = t4.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
        method = t4[_i];
        _this._resolveRoutine$2(method, method.name.lexeme === t1.lexeme ? C.RoutineType_2 : C.RoutineType_3);
      }
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      t2.pop();
      if (t3) {
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
      }
      _this._currentClass = enclosingClass;
    },
    visitGetExpr$1: function(e) {
      e.object.accept$1(0, this);
    },
    visitSetExpr$1: function(e) {
      e.value.accept$1(0, this);
      e.object.accept$1(0, this);
    },
    visitThisExpr$1: function(e) {
      if (this._currentClass === C.ClassType_0)
        M.BetaScript_error(e.keyword, "Cannot use 'this' outside of a class");
      this._resolveLocal$2(e, e.keyword);
    },
    visitSuperExpr$1: function(e) {
      var t1 = this._currentClass;
      if (t1 === C.ClassType_0)
        M.BetaScript_error(e.keyword, "Cannot use 'super' outside of a class.");
      else if (t1 !== C.ClassType_2)
        M.BetaScript_error(e.keyword, "Cannot use 'super' in a class with no superclass");
      this._resolveLocal$2(e, e.keyword);
    },
    visitDerivativeExpr$1: function(e) {
      var t1, t2, _i;
      e.derivand.accept$1(0, this);
      for (t1 = e.variables, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].accept$1(0, this);
    },
    visitDirectiveStmt$1: function(s) {
      this._interpreter.directives.setIfGlobal$2(s.directive, true);
    },
    visitBuilderDefinitionExpr$1: function(e) {
      this._declareParameters$1(e.parameters);
      e.rule.accept$1(0, this);
    },
    visitIntervalDefinitionExpr$1: function(e) {
      e.a.accept$1(0, this);
      e.b.accept$1(0, this);
    },
    visitRosterDefinitionExpr$1: function(e) {
      var t1, t2, _i;
      for (t1 = e.elements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].accept$1(0, this);
    },
    visitSetBinaryExpr$1: function(e) {
      e.left.accept$1(0, this);
      e.right.accept$1(0, this);
    },
    _declareParameters$1: function(variables) {
      var t1, t2, t3, _i, parameter;
      type$.legacy_List_legacy_Token._as(variables);
      if (variables != null)
        for (t1 = variables.length, t2 = this._scopes, t3 = this._globals, _i = 0; _i < variables.length; variables.length === t1 || (0, H.throwConcurrentModificationError)(variables), ++_i) {
          parameter = variables[_i];
          if (!(t2.length !== 0 && C.JSArray_methods.get$last(t2).containsKey$1(parameter.lexeme)) && !t3.containsKey$1(parameter.lexeme)) {
            this._declare$1(parameter);
            if (t2.length !== 0)
              C.JSArray_methods.get$last(t2).$indexSet(0, parameter.lexeme, true);
            else
              t3.$indexSet(0, parameter.lexeme, true);
          }
        }
    },
    $isExprVisitor: 1,
    $isStmtVisitor: 1
  };
  L.Resolver_closure.prototype = {
    call$1: function(_) {
      return true;
    },
    $signature: 87
  };
  O.Root.prototype = {
    evaluate$1: function(p) {
      var v,
        opvalue = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      if (opvalue instanceof T.Number) {
        v = Math.sqrt(H.checkNum(opvalue.absvalue));
        if (v === C.JSNumber_methods.toInt$0(v))
          return T.n(v);
      }
      return O.root(opvalue);
    },
    copy$1: function(params) {
      return new O.Root(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$defaultParameters: function() {
      return P.SplayTreeSet_SplayTreeSet$from(this.operand.get$parameters(), type$.legacy_Variable);
    },
    get$approx: function() {
      var opvalue = this.operand.get$approx();
      if (opvalue instanceof T.Number)
        return T.n(Math.sqrt(H.checkNum(opvalue.absvalue)));
      else
        return O.root(opvalue);
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitRoot$1(this));
    }
  };
  E.rosterSet_closure.prototype = {
    call$1: function(e) {
      return type$.legacy_BSFunction._as(e).asConstant$0();
    },
    $signature: 3
  };
  E.RosterSet.prototype = {
    belongs$1: function(x) {
      return this.elements.contains$1(0, x);
    },
    complement$0: function() {
      var i,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSSet),
        t2 = this.elements;
      C.JSArray_methods.add$1(t1, new O.Interval(false, false, C.Negative_T3K, t2.get$first(t2)));
      for (i = 1; i < t2._count; ++i)
        C.JSArray_methods.add$1(t1, new O.Interval(false, false, t2.elementAt$1(0, i - 1), t2.elementAt$1(0, i)));
      C.JSArray_methods.add$1(t1, new O.Interval(false, false, t2.get$last(t2), C.Number_8xB));
      return new G.SetUnion(t1);
    },
    accept$1$1: function(_, visitor, ReturnType) {
      return ReturnType._eval$1("0*")._as(visitor.visitRosterSet$1(this));
    },
    get$isIntensional: function() {
      return false;
    },
    get$knownElements: function() {
      return this;
    }
  };
  O.BSScanner.prototype = {
    scanTokens$0: function() {
      var t1, t2, t3, t4, c, it, result, _this = this;
      for (t1 = _this.source, t2 = t1.length, t3 = _this.errorCallback; t4 = _this.current, t4 < t2;) {
        _this.start = t4;
        _this.current = t4 + 1;
        if (t4 >= t2)
          return H.ioore(t1, t4);
        c = t1[t4];
        if (_this.charToLexeme.containsKey$1(c))
          _this.charToLexeme.$index(0, c).call$0();
        else if (O.BSScanner_IsDigit(c))
          _this.number$0();
        else {
          if (!O.BSScanner_isAlpha(c)) {
            t4 = new P.Runes(c);
            it = t4.get$iterator(t4);
            if (!it.moveNext$0())
              H.throwExpression(H.IterableElementError_noElement());
            result = it.get$current();
            if (it.moveNext$0())
              H.throwExpression(H.IterableElementError_tooMany());
            if (!(913 <= result && result <= 937))
              t4 = 945 <= result && result <= 969;
            else
              t4 = true;
            t4 = t4 || c === "\u221e" || c === "\u2205";
          } else
            t4 = true;
          if (t4)
            _this.identifier$0();
          else
            t3.call$2(_this.line, "Error: Unexpected character " + c);
        }
      }
      t1 = _this.tokens;
      C.JSArray_methods.add$1(t1, new L.Token(C.TokenType_56, "", null, _this.line));
      _this.removeLinebreaks$0();
      return t1;
    },
    removeLinebreaks$0: function() {
      var t1, i, i0;
      for (t1 = this.tokens, i = 0; i < t1.length - 1;)
        if (t1[i].type === C.TokenType_11) {
          i0 = i + 1;
          switch (t1[i0].type) {
            case C.TokenType_3:
            case C.TokenType_1:
            case C.TokenType_5:
            case C.TokenType_37:
            case C.TokenType_56:
              C.JSArray_methods.removeAt$1(t1, i);
              continue;
          }
          i = i0;
        } else
          ++i;
    },
    _initializeMap$0: function() {
      var _this = this,
        t1 = type$.dynamic;
      _this.set$charToLexeme(P.HashMap_HashMap$from(P.LinkedHashMap_LinkedHashMap$_literal(["(", new O.BSScanner__initializeMap_closure(_this), ")", new O.BSScanner__initializeMap_closure0(_this), "{", new O.BSScanner__initializeMap_closure1(_this), "}", new O.BSScanner__initializeMap_closure2(_this), "[", new O.BSScanner__initializeMap_closure3(_this), "]", new O.BSScanner__initializeMap_closure4(_this), ",", new O.BSScanner__initializeMap_closure5(_this), "-", new O.BSScanner__initializeMap_closure6(_this), "~", new O.BSScanner__initializeMap_closure7(_this), "+", new O.BSScanner__initializeMap_closure8(_this), ";", new O.BSScanner__initializeMap_closure9(_this), "\u037e", new O.BSScanner__initializeMap_closure10(_this), "*", new O.BSScanner__initializeMap_closure11(_this), "!", new O.BSScanner__initializeMap_closure12(_this), "'", new O.BSScanner__initializeMap_closure13(_this), "^", new O.BSScanner__initializeMap_closure14(_this), "|", new O.BSScanner__initializeMap_closure15(_this), "@", new O.BSScanner__initializeMap_closure16(_this), "#", _this.get$directive(), ".", new O.BSScanner__initializeMap_closure17(_this), "=", new O.BSScanner__initializeMap_closure18(_this), "<", new O.BSScanner__initializeMap_closure19(_this), ">", new O.BSScanner__initializeMap_closure20(_this), "/", new O.BSScanner__initializeMap_closure21(_this), "\\", new O.BSScanner__initializeMap_closure22(_this), "\n", new O.BSScanner__initializeMap_closure23(_this), " ", new O.BSScanner__initializeMap_closure24(), "\r", new O.BSScanner__initializeMap_closure25(), "\t", new O.BSScanner__initializeMap_closure26(), '"', _this.get$string(), "\xac", new O.BSScanner__initializeMap_closure27(_this), "\u2282", new O.BSScanner__initializeMap_closure28(_this), "\u2208", new O.BSScanner__initializeMap_closure29(_this), "\u222a", new O.BSScanner__initializeMap_closure30(_this), "\u2229", new O.BSScanner__initializeMap_closure31(_this), "\u2227", new O.BSScanner__initializeMap_closure32(_this), "\u2228", new O.BSScanner__initializeMap_closure33(_this), "\u2202", new O.BSScanner__initializeMap_closure34(_this), "\u2261", new O.BSScanner__initializeMap_closure35(_this)], t1, t1), type$.legacy_String, type$.legacy_void_Function));
    },
    advance$0: function() {
      var t1 = this.source,
        t2 = this.current++;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    addToken$2: function(type, literal) {
      var _this = this;
      C.JSArray_methods.add$1(_this.tokens, new L.Token(type, J.substring$2$s(_this.source, _this.start, _this.current), literal, _this.line));
    },
    addToken$1: function(type) {
      return this.addToken$2(type, null);
    },
    match$1: function(s) {
      var t1 = this.current,
        t2 = this.source;
      if (t1 >= t2.length)
        return false;
      if (t2[t1] !== s)
        return false;
      this.current = t1 + 1;
      return true;
    },
    peek$0: function() {
      var t1 = this.current,
        t2 = this.source;
      return t1 >= t2.length ? null : t2[t1];
    },
    string$0: function() {
      var t2, t3, t4, _this = this,
        t1 = _this.source;
      while (true) {
        t2 = _this.current;
        t3 = t1.length;
        t4 = t2 >= t3;
        if (!((t4 ? null : t1[t2]) !== '"' && !t4))
          break;
        if ((t4 ? null : t1[t2]) === "\n")
          ++_this.line;
        _this.current = t2 + 1;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2];
      }
      if (t4)
        _this.errorCallback.call$2(_this.line, "Unterminated String.");
      else {
        _this.advance$0();
        _this.addToken$2(C.TokenType_28, J.substring$2$s(t1, _this.start + 1, _this.current - 1));
      }
    },
    number$0: function() {
      var t3, t4, _this = this,
        t1 = _this.source,
        t2 = t1.length;
      while (true) {
        t3 = _this.current;
        if (!O.BSScanner_IsDigit(t3 >= t2 ? null : t1[t3]))
          break;
        t3 = _this.current++;
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3];
      }
      if (_this.peek$0() === ".") {
        t3 = _this.current;
        t4 = t3 + 1;
        t3 = O.BSScanner_IsDigit(t4 >= t2 ? null : J.substring$2$s(t1, t4, t3 + 2));
      } else
        t3 = false;
      if (t3) {
        _this.advance$0();
        while (true) {
          t3 = _this.current;
          if (!O.BSScanner_IsDigit(t3 >= t2 ? null : t1[t3]))
            break;
          t3 = _this.current++;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3];
        }
      }
      _this.addToken$2(C.TokenType_29, T.n(P.double_parse(J.substring$2$s(t1, _this.start, _this.current))));
    },
    identifier$0: function() {
      var t3, t4, it, result, text, _this = this,
        t1 = _this.source,
        t2 = t1.length;
      while (true) {
        t3 = _this.current;
        if (t3 < t2) {
          t3 = t1[t3];
          if (!O.BSScanner_isAlpha(t3)) {
            t4 = new P.Runes(t3);
            it = t4.get$iterator(t4);
            if (!it.moveNext$0())
              H.throwExpression(H.IterableElementError_noElement());
            result = it.get$current();
            if (it.moveNext$0())
              H.throwExpression(H.IterableElementError_tooMany());
            if (!(913 <= result && result <= 937))
              t4 = 945 <= result && result <= 969;
            else
              t4 = true;
            t4 = t4 || t3 === "\u221e" || t3 === "\u2205";
          } else
            t4 = true;
          t3 = t4 || O.BSScanner_IsDigit(t3);
        } else
          t3 = false;
        if (!t3)
          break;
        t3 = _this.current++;
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3];
      }
      text = J.substring$2$s(t1, _this.start, _this.current);
      _this.addToken$1(C.Map_m64CA.containsKey$1(text) ? C.Map_m64CA.$index(0, text) : C.TokenType_27);
    },
    directive$0: function() {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.source;
      while (true) {
        t2 = _this.current;
        t3 = t1.length;
        t4 = t2 >= t3;
        t5 = t4 ? null : t1[t2];
        if (!(!(t5 === "\n" || t5 === "\t" || t5 === "\r" || t5 === " ") && !t4))
          break;
        _this.current = t2 + 1;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2];
      }
      _this.addToken$2(C.TokenType_30, J.substring$2$s(t1, _this.start + 1, t2));
    },
    set$charToLexeme: function(charToLexeme) {
      this.charToLexeme = type$.legacy_HashMap_of_legacy_String_and_legacy_void_Function._as(charToLexeme);
    }
  };
  O.BSScanner__initializeMap_closure.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_0);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure0.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_1);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure1.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_2);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure2.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_3);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure3.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_4);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure4.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_5);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure5.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_6);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure6.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_8);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure7.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_17);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure8.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_9);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure9.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_10);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure10.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_10);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure11.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_14);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure12.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_15);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure13.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_16);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure14.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_18);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure15.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_19);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure16.prototype = {
    call$0: function() {
      var t3, t4, t5, _null = null,
        t1 = this.$this,
        t2 = t1.source;
      while (true) {
        t3 = t1.current;
        t4 = t2.length;
        t5 = t3 >= t4;
        if ((t5 ? _null : t2[t3]) !== "\n")
          if ((t5 ? _null : t2[t3]) !== " ")
            if ((t5 ? _null : t2[t3]) !== "\r")
              t5 = (t5 ? _null : t2[t3]) !== "\t" && !t5;
            else
              t5 = false;
          else
            t5 = false;
        else
          t5 = false;
        if (!t5)
          break;
        t1.current = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t2, t3);
        t2[t3];
      }
    },
    $signature: 1
  };
  O.BSScanner__initializeMap_closure17.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (O.BSScanner_IsDigit(t1.peek$0()))
        t1.number$0();
      else
        t1.addToken$1(C.TokenType_7);
    },
    $signature: 1
  };
  O.BSScanner__initializeMap_closure18.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this;
      if (t1.match$1("="))
        t2 = t1.match$1("=") ? C.TokenType_22 : C.TokenType_21;
      else
        t2 = C.TokenType_20;
      return t1.addToken$1(t2);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure19.prototype = {
    call$0: function() {
      var t1 = this.$this;
      return t1.addToken$1(t1.match$1("=") ? C.TokenType_26 : C.TokenType_25);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure20.prototype = {
    call$0: function() {
      var t1 = this.$this;
      return t1.addToken$1(t1.match$1("=") ? C.TokenType_24 : C.TokenType_23);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure21.prototype = {
    call$0: function() {
      var t2, t3, t4, t5,
        t1 = this.$this;
      if (t1.match$1("/")) {
        t2 = t1.source;
        while (true) {
          t3 = t1.current;
          t4 = t2.length;
          t5 = t3 >= t4;
          if (!((t5 ? null : t2[t3]) !== "\n" && !t5))
            break;
          t1.current = t3 + 1;
          if (t3 >= t4)
            return H.ioore(t2, t3);
          t2[t3];
        }
      } else if (t1.match$1("*")) {
        t2 = t1.source;
        while (true) {
          if (t1.match$1("*")) {
            t3 = t1.current;
            t3 = (t3 >= t2.length ? null : t2[t3]) !== "/";
          } else
            t3 = true;
          if (!t3)
            break;
          t3 = t1.current;
          if (t3 >= t2.length) {
            t1.errorCallback.call$2(t1.line, "unterminated multiline comment");
            break;
          }
          t1.current = t3 + 1;
          t2[t3];
        }
        t1.advance$0();
      } else
        t1.addToken$1(C.TokenType_12);
    },
    $signature: 1
  };
  O.BSScanner__initializeMap_closure22.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_13);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure23.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1.tokens;
      if (t2.length !== 0) {
        t2 = C.JSArray_methods.get$last(t2);
        if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([C.TokenType_0, C.TokenType_2, C.TokenType_4, C.TokenType_6, C.TokenType_7, C.TokenType_8, C.TokenType_9, C.TokenType_10, C.TokenType_11, C.TokenType_12, C.TokenType_14, C.TokenType_17, C.TokenType_18, C.TokenType_19, C.TokenType_20, C.TokenType_21, C.TokenType_22, C.TokenType_23, C.TokenType_24, C.TokenType_25, C.TokenType_26, C.TokenType_31, C.TokenType_45, C.TokenType_44, C.TokenType_37, C.TokenType_34, C.TokenType_32, C.TokenType_36, C.TokenType_49, C.TokenType_53, C.TokenType_41], type$.JSArray_legacy_TokenType), t2.type))
          t1.addToken$1(C.TokenType_11);
      }
      ++t1.line;
    },
    $signature: 1
  };
  O.BSScanner__initializeMap_closure24.prototype = {
    call$0: function() {
    },
    $signature: 1
  };
  O.BSScanner__initializeMap_closure25.prototype = {
    call$0: function() {
    },
    $signature: 1
  };
  O.BSScanner__initializeMap_closure26.prototype = {
    call$0: function() {
    },
    $signature: 1
  };
  O.BSScanner__initializeMap_closure27.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_44);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure28.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_34);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure29.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_32);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure30.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_53);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure31.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_41);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure32.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_31);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure33.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_45);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure34.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_35);
    },
    $signature: 0
  };
  O.BSScanner__initializeMap_closure35.prototype = {
    call$0: function() {
      return this.$this.addToken$1(C.TokenType_22);
    },
    $signature: 0
  };
  S.Sec.prototype = {
    evaluate$1: function(p) {
      var v,
        op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      if (op instanceof T.Number) {
        v = 1 / Math.cos(H.checkNum(op.absvalue));
        if (v === C.JSDouble_methods.toInt$0(v))
          return T.n(v);
      }
      return op instanceof Y.ArcSec ? op.operand : new S.Sec(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(1 / Math.cos(H.checkNum(op.absvalue)));
      return op instanceof Y.ArcSec ? op.operand : new S.Sec(op, null);
    },
    copy$1: function(params) {
      return new S.Sec(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitSec$1(this));
    }
  };
  D.SecH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof N.ArSecH ? op.operand : new D.SecH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        t2 = Math.exp(H.checkNum(t1));
        if (typeof t1 !== "number")
          return t1.$negate();
        return T.n(2 / (t2 + Math.exp(-t1)));
      } else
        return op instanceof N.ArSecH ? op.operand : new D.SecH(op, null);
    },
    copy$1: function(params) {
      return new D.SecH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitSecH$1(this));
    }
  };
  X.BSSet.prototype = {
    relativeComplement$1: function(other) {
      var t1, _this = this;
      if ($.$get$BSSet__disjoined().call$2(_this, other)._value === C._logic_0)
        t1 = _this;
      else {
        other.toString;
        t1 = $.$get$BSSet__contains();
        t1 = H._instanceType(t1)._eval$1("SetOperation.0*")._as(t1._methodTable.call$2(other, _this))._value === C._logic_0 ? C.C_EmptySet : $.$get$BSSet__relativeComplement().call$2(_this, other);
      }
      return t1;
    },
    intersection$1: function(other) {
      return $.$get$BSSet__disjoined().call$2(this, other)._value === C._logic_0 ? C.C_EmptySet : $.$get$BSSet__intersection().call$2(this, other);
    },
    toString$0: function(_) {
      return this.accept$1$1(0, new M.PlainSetStringifier(), type$.legacy_String);
    }
  };
  X.SetDefinitionError.prototype = {
    toString$0: function(_) {
      return "Set definition error: " + this.message;
    }
  };
  X.SetOperation.prototype = {
    SetOperation$0: function(ReturnType) {
      var _this = this,
        t1 = _this._methodTable;
      t1.addMethod$3(C.Type_BuilderSet_6pJ, C.Type_BuilderSet_6pJ, _this.get$operateBuilderSetBuilderSet());
      t1.addMethod$3(C.Type_BuilderSet_6pJ, C.Type_IntensionalSetIntersection_3pJ, _this.get$operateBuilderSetIntensionalSetIntersection());
      t1.addMethod$3(C.Type_BuilderSet_6pJ, C.Type_Interval_9NY, _this.get$operateBuilderSetInterval());
      t1.addMethod$3(C.Type_BuilderSet_6pJ, C.Type_RosterSet_eP4, _this.get$operateBuilderSetRosterSet());
      t1.addMethod$3(C.Type_BuilderSet_6pJ, C.Type_SetUnion_NY1, _this.get$operateBuilderSetSetUnion());
      t1.addMethod$3(C.Type_IntensionalSetIntersection_3pJ, C.Type_BuilderSet_6pJ, _this.get$operateIntensionalSetIntersectionBuilderSet());
      t1.addMethod$3(C.Type_IntensionalSetIntersection_3pJ, C.Type_IntensionalSetIntersection_3pJ, _this.get$operateIntensionalSetIntersectionIntensionalSetIntersection());
      t1.addMethod$3(C.Type_IntensionalSetIntersection_3pJ, C.Type_Interval_9NY, _this.get$operateIntensionalSetIntersectionInterval());
      t1.addMethod$3(C.Type_IntensionalSetIntersection_3pJ, C.Type_RosterSet_eP4, _this.get$operateIntensionalSetIntersectionRosterSet());
      t1.addMethod$3(C.Type_IntensionalSetIntersection_3pJ, C.Type_SetUnion_NY1, _this.get$operateIntensionalSetIntersectionSetUnion());
      t1.addMethod$3(C.Type_Interval_9NY, C.Type_BuilderSet_6pJ, _this.get$operateIntervalBuilderSet());
      t1.addMethod$3(C.Type_Interval_9NY, C.Type_IntensionalSetIntersection_3pJ, _this.get$operateIntervalIntensionalSetIntersection());
      t1.addMethod$3(C.Type_Interval_9NY, C.Type_Interval_9NY, _this.get$operateIntervalInterval());
      t1.addMethod$3(C.Type_Interval_9NY, C.Type_RosterSet_eP4, _this.get$operateIntervalRosterSet());
      t1.addMethod$3(C.Type_Interval_9NY, C.Type_SetUnion_NY1, _this.get$operateIntervalSetUnion());
      t1.addMethod$3(C.Type_RosterSet_eP4, C.Type_BuilderSet_6pJ, _this.get$operateRosterSetBuilderSet());
      t1.addMethod$3(C.Type_RosterSet_eP4, C.Type_IntensionalSetIntersection_3pJ, _this.get$operateRosterSetIntensionalSetIntersection());
      t1.addMethod$3(C.Type_RosterSet_eP4, C.Type_Interval_9NY, _this.get$operateRosterSetInterval());
      t1.addMethod$3(C.Type_RosterSet_eP4, C.Type_RosterSet_eP4, _this.get$operateRosterSetRosterSet());
      t1.addMethod$3(C.Type_RosterSet_eP4, C.Type_SetUnion_NY1, _this.get$operateRosterSetSetUnion());
      t1.addMethod$3(C.Type_SetUnion_NY1, C.Type_BuilderSet_6pJ, _this.get$operateSetUnionBuilderSet());
      t1.addMethod$3(C.Type_SetUnion_NY1, C.Type_IntensionalSetIntersection_3pJ, _this.get$operateSetUnionIntensionalSetIntersection());
      t1.addMethod$3(C.Type_SetUnion_NY1, C.Type_Interval_9NY, _this.get$operateSetUnionInterval());
      t1.addMethod$3(C.Type_SetUnion_NY1, C.Type_RosterSet_eP4, _this.get$operateSetUnionRosterSet());
      t1.addMethod$3(C.Type_SetUnion_NY1, C.Type_SetUnion_NY1, _this.get$operateSetUnionSetUnion());
    },
    call$2: function(first, second) {
      var t1 = type$.legacy_BSSet;
      return H._instanceType(this)._eval$1("SetOperation.0*")._as(this._methodTable.call$2(t1._as(first), t1._as(second)));
    }
  };
  X.EmptyFilteringSetOperation.prototype = {
    call$2: function(first, second) {
      var t1 = type$.legacy_BSSet;
      t1._as(first);
      t1._as(second);
      t1 = first === C.C_EmptySet || second === C.C_EmptySet ? this.onEmpty$2(first, second) : this._methodTable.call$2(first, second);
      return H._instanceType(this)._eval$1("EmptyFilteringSetOperation.0*")._as(t1);
    }
  };
  X.EmptyTreatingSetOperation.prototype = {
    EmptyTreatingSetOperation$0: function(ReturnType) {
      var _this = this,
        t1 = _this._methodTable;
      t1.addMethod$3(C.Type_BuilderSet_6pJ, C.Type_EmptySet_8co, _this.get$operateBuilderSetEmptySet());
      t1.addMethod$3(C.Type_EmptySet_8co, C.Type_BuilderSet_6pJ, _this.get$operateEmptySetBuilderSet());
      t1.addMethod$3(C.Type_IntensionalSetIntersection_3pJ, C.Type_EmptySet_8co, _this.get$operateIntensionalSetIntersectionEmptySet());
      t1.addMethod$3(C.Type_EmptySet_8co, C.Type_IntensionalSetIntersection_3pJ, _this.get$operateEmptySetIntensionalSetIntersection());
      t1.addMethod$3(C.Type_Interval_9NY, C.Type_EmptySet_8co, _this.get$operateIntervalEmptySet());
      t1.addMethod$3(C.Type_EmptySet_8co, C.Type_Interval_9NY, _this.get$operateEmptySetInterval());
      t1.addMethod$3(C.Type_RosterSet_eP4, C.Type_EmptySet_8co, _this.get$operateRosterSetEmptySet());
      t1.addMethod$3(C.Type_EmptySet_8co, C.Type_RosterSet_eP4, _this.get$operateEmptySetRosterSet());
      t1.addMethod$3(C.Type_SetUnion_NY1, C.Type_EmptySet_8co, _this.get$operateSetUnionEmptySet());
      t1.addMethod$3(C.Type_EmptySet_8co, C.Type_SetUnion_NY1, _this.get$operateEmptySetSetUnion());
      t1.addMethod$3(C.Type_EmptySet_8co, C.Type_EmptySet_8co, _this.get$operateEmptySetEmptySet());
    }
  };
  X.EmptyFilteringComutativeSetOperation.prototype = {
    operateBuilderSetIntensionalSetIntersection$2: function(first, second) {
      type$.legacy_BuilderSet._as(first);
      return this.operateIntensionalSetIntersectionBuilderSet$2(type$.legacy_IntensionalSetIntersection._as(second), first);
    },
    operateBuilderSetInterval$2: function(first, second) {
      type$.legacy_BuilderSet._as(first);
      return this.operateIntervalBuilderSet$2(type$.legacy_Interval._as(second), first);
    },
    operateBuilderSetRosterSet$2: function(first, second) {
      type$.legacy_BuilderSet._as(first);
      return this.operateRosterSetBuilderSet$2(type$.legacy_RosterSet._as(second), first);
    },
    operateBuilderSetSetUnion$2: function(first, second) {
      type$.legacy_BuilderSet._as(first);
      return this.operateSetUnionBuilderSet$2(type$.legacy_SetUnion._as(second), first);
    },
    operateIntensionalSetIntersectionInterval$2: function(first, second) {
      type$.legacy_IntensionalSetIntersection._as(first);
      return this.operateIntervalIntensionalSetIntersection$2(type$.legacy_Interval._as(second), first);
    },
    operateIntensionalSetIntersectionRosterSet$2: function(first, second) {
      type$.legacy_IntensionalSetIntersection._as(first);
      return this.operateRosterSetIntensionalSetIntersection$2(type$.legacy_RosterSet._as(second), first);
    },
    operateIntensionalSetIntersectionSetUnion$2: function(first, second) {
      type$.legacy_IntensionalSetIntersection._as(first);
      return this.operateSetUnionIntensionalSetIntersection$2(type$.legacy_SetUnion._as(second), first);
    },
    operateIntervalRosterSet$2: function(first, second) {
      type$.legacy_Interval._as(first);
      return this.operateRosterSetInterval$2(type$.legacy_RosterSet._as(second), first);
    },
    operateIntervalSetUnion$2: function(first, second) {
      type$.legacy_Interval._as(first);
      return this.operateSetUnionInterval$2(type$.legacy_SetUnion._as(second), first);
    },
    operateRosterSetSetUnion$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      return this.operateSetUnionRosterSet$2(type$.legacy_SetUnion._as(second), first);
    }
  };
  G.setUnion_closure.prototype = {
    call$1: function(element) {
      return type$.legacy_BSSet._as(element) !== C.C_EmptySet;
    },
    $signature: 23
  };
  G.setUnion_closure0.prototype = {
    call$1: function(element) {
      return type$.legacy_BSSet._as(element) !== C.C_EmptySet;
    },
    $signature: 23
  };
  G.SetUnion.prototype = {
    belongs$1: function(x) {
      var t1, i;
      for (t1 = this.subsets, i = 0; i < t1.length; ++i)
        if (t1[i].belongs$1(x))
          return true;
      return false;
    },
    complement$0: function() {
      return C.JSArray_methods.fold$1$2(this.subsets, C.Interval_i3t, new G.SetUnion_complement_closure(), type$.legacy_BSSet);
    },
    accept$1$1: function(_, visitor, ReturnType) {
      return ReturnType._eval$1("0*")._as(visitor.visitSetUnion$1(this));
    },
    get$isIntensional: function() {
      var t1, t2, _i;
      for (t1 = this.subsets, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        if (t1[_i].get$isIntensional())
          return true;
      return false;
    },
    get$knownElements: function() {
      return C.JSArray_methods.fold$1$2(this.subsets, C.C_EmptySet, new G.SetUnion_knownElements_closure(), type$.legacy_BSSet);
    }
  };
  G.SetUnion_complement_closure.prototype = {
    call$2: function(value, element) {
      var t1 = type$.legacy_BSSet;
      return t1._as(value).relativeComplement$1(t1._as(element));
    },
    $signature: 21
  };
  G.SetUnion_knownElements_closure.prototype = {
    call$2: function(previousValue, element) {
      var t1 = type$.legacy_BSSet;
      t1._as(previousValue);
      t1._as(element);
      previousValue.toString;
      return $.$get$BSSet__union().call$2(previousValue, element);
    },
    $signature: 21
  };
  Z.SetVisitor.prototype = {};
  Y.Signum.prototype = {
    evaluate$1: function(p) {
      return Y.sgn(this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p)));
    },
    copy$1: function(params) {
      return new Y.Signum(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$approx: function() {
      return Y.sgn(this.operand.get$approx());
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitSignum$1(this));
    }
  };
  U.Sin.prototype = {
    evaluate$1: function(p) {
      var v,
        op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      if (op instanceof T.Number) {
        v = Math.sin(H.checkNum(op.absvalue));
        if (v === C.JSNumber_methods.toInt$0(v))
          return T.n(v);
      }
      return op instanceof L.ArcSin ? op.operand : new U.Sin(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(Math.sin(H.checkNum(op.absvalue)));
      return op instanceof L.ArcSin ? op.operand : new U.Sin(op, null);
    },
    copy$1: function(params) {
      return new U.Sin(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitSin$1(this));
    }
  };
  M.SingleOperandFunction.prototype = {
    get$defaultParameters: function() {
      return P.SplayTreeSet_SplayTreeSet$from(this.operand.get$parameters(), type$.legacy_Variable);
    }
  };
  Y.SingleVariableLinearSolver.prototype = {
    appliesInternal$0: function() {
      var _terms, _this = this,
        t1 = _this._comp = _this.expr,
        t2 = type$.JSArray_legacy_BSFunction;
      t1 = _this._left = Z.add(H.setRuntimeTypeInfo([t1.left, F.negative(t1.right)], t2));
      if (t1 instanceof F.Negative) {
        _this.invertedInequality = true;
        _this._left = t1.operand;
      }
      _terms = H.setRuntimeTypeInfo([], t2);
      t1 = _this._left;
      if (t1 instanceof Z.Sum)
        C.JSArray_methods.addAll$1(_terms, t1.operands);
      else
        C.JSArray_methods.add$1(_terms, t1);
      return C.JSArray_methods.fold$1$2(_terms, true, new Y.SingleVariableLinearSolver_appliesInternal_closure(_this), type$.legacy_bool);
    },
    attemptSolveInternal$0: function() {
      var t1, aWithoutNegative, t2, t3, val, _this = this;
      if (J.$eq$(_this.a, T.n(0)))
        if (_this.expr.compare$2(_this.b.toNum$0(), 0))
          return C.Interval_i3t;
        else
          return C.C_EmptySet;
      else {
        t1 = type$.legacy_BSFunction;
        aWithoutNegative = B.extractFromNegative(_this.a, t1);
        if (H.boolConversionCheck(aWithoutNegative.second))
          _this.invertedInequality = !_this.invertedInequality;
        t2 = _this.b;
        t2.toString;
        t2 = F.negative(t2);
        t2.toString;
        t1 = t1._as(aWithoutNegative.first);
        t3 = type$.JSArray_legacy_BSFunction;
        val = S.divide(H.setRuntimeTypeInfo([t2], t3), H.setRuntimeTypeInfo([t1], t3));
        t1 = _this._comp;
        if (t1 instanceof Q.Equal)
          return E.rosterSet(H.setRuntimeTypeInfo([val], t3));
        t2 = t1 instanceof Z.LessThan;
        if (!(t2 && !_this.invertedInequality))
          t3 = t1 instanceof N.GreaterThan && _this.invertedInequality;
        else
          t3 = true;
        if (t3)
          return new O.Interval(false, false, C.Negative_T3K, val);
        if (!(t1 instanceof N.GreaterThan && !_this.invertedInequality))
          t2 = t2 && _this.invertedInequality;
        else
          t2 = true;
        if (t2)
          return new O.Interval(false, false, val, C.Number_8xB);
        t2 = t1 instanceof Q.LessOrEqual;
        if (!(t2 && !_this.invertedInequality))
          t3 = t1 instanceof B.GreaterOrEqual && _this.invertedInequality;
        else
          t3 = true;
        if (t3)
          return new O.Interval(false, true, C.Negative_T3K, val);
        if (!(t1 instanceof B.GreaterOrEqual && !_this.invertedInequality))
          t1 = t2 && _this.invertedInequality;
        else
          t1 = true;
        if (t1)
          return new O.Interval(true, false, val, C.Number_8xB);
      }
      return C.C_EmptySet;
    },
    _extractCoefficients$1: function(term) {
      var t1, t2, t3, constants, dependentTerms, t4, _i, op, constOp, _this = this,
        _asNumber = term.asConstant$0();
      if (_asNumber != null) {
        t1 = _this.b;
        t1.toString;
        _this.b = Z.add(H.setRuntimeTypeInfo([t1, _asNumber], type$.JSArray_legacy_BSFunction));
        return true;
      }
      t1 = type$.legacy_Variable;
      if (B.extractFromNegative(term, t1).first != null) {
        t1 = _this.a;
        t2 = T.n(1);
        t1.toString;
        _this.a = Z.add(H.setRuntimeTypeInfo([t1, t2], type$.JSArray_legacy_BSFunction));
        return true;
      }
      t2 = B.extractFromNegative(term, type$.legacy_Multiplication).first;
      if (t2 != null) {
        t3 = type$.JSArray_legacy_BSFunction;
        constants = H.setRuntimeTypeInfo([], t3);
        dependentTerms = H.setRuntimeTypeInfo([], t3);
        for (t2 = t2.operands, t4 = t2.length, _i = 0; _i < t2.length; t2.length === t4 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          op = t2[_i];
          constOp = op.asConstant$0();
          if (constOp != null)
            C.JSArray_methods.add$1(constants, constOp);
          else
            C.JSArray_methods.add$1(dependentTerms, op);
        }
        if (B.extractFromNegative(F.multiply(dependentTerms), t1).first == null)
          return false;
        else {
          t1 = _this.a;
          t2 = F.multiply(constants);
          t1.toString;
          _this.a = Z.add(H.setRuntimeTypeInfo([t1, t2], t3));
          return true;
        }
      }
      return false;
    }
  };
  Y.SingleVariableLinearSolver_appliesInternal_closure.prototype = {
    call$2: function(previousValue, element) {
      H._asBoolS(previousValue);
      type$.legacy_BSFunction._as(element);
      return H.boolConversionCheck(previousValue) && this.$this._extractCoefficients$1(element);
    },
    $signature: 89
  };
  S.SingleVariableSolver.prototype = {
    appliesInternal$0: function() {
      return this.expr.get$parameters()._count === 1;
    },
    attemptSolveInternal$0: function() {
      var solution,
        s1 = new Y.SingleVariableLinearSolver(T.n(0), T.n(0), this.expr),
        t1 = s1.appliesInternal$0();
      s1.doesApply = t1;
      if (H.boolConversionCheck(t1)) {
        solution = s1.attemptSolve$0();
        this.doesApply = this._everySolutionFound = true;
      } else
        solution = C.C_EmptySet;
      return solution;
    }
  };
  D.SinH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof Z.ArSinH ? op.operand : new D.SinH(op, null);
    },
    get$approx: function() {
      var t1, t2,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        t2 = Math.exp(H.checkNum(t1));
        if (typeof t1 !== "number")
          return t1.$negate();
        return T.n((t2 - Math.exp(-t1)) / 2);
      } else
        return op instanceof Z.ArSinH ? op.operand : new D.SinH(op, null);
    },
    copy$1: function(params) {
      return new D.SinH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitSinH$1(this));
    }
  };
  A.Solver.prototype = {
    attemptSolve$0: function() {
      return H.boolConversionCheck(this.doesApply) ? this.attemptSolveInternal$0() : H.throwExpression(new A.BetascriptSolverError("this type of solver does not apply to this expression", this.expr));
    }
  };
  A.BetascriptSolverError.prototype = {
    toString$0: function(_) {
      return "Error: " + this.message + " with expression '" + this.expression.toString$0(0) + "'";
    }
  };
  F.Stmt.prototype = {};
  F.ExpressionStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitExpressionStmt$1(this);
    }
  };
  F.PrintStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitPrintStmt$1(this);
    }
  };
  F.VarStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitVarStmt$1(this);
    }
  };
  F.BlockStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitBlockStmt$1(this);
    }
  };
  F.IfStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitIfStmt$1(this);
    }
  };
  F.RoutineStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitRoutineStmt$1(this);
    }
  };
  F.WhileStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitWhileStmt$1(this);
    }
  };
  F.ReturnStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitReturnStmt$1(this);
    }
  };
  F.ClassStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitClassStmt$1(this);
    }
  };
  F.DirectiveStmt.prototype = {
    accept$1: function(_, v) {
      return v.visitDirectiveStmt$1(this);
    }
  };
  Z.Sum.prototype = {
    evaluate$1: function(p) {
      var t1 = this.operands,
        t2 = H._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,BSFunction*>");
      return Z.add(P.List_List$from(new H.MappedListIterable(t1, t2._eval$1("BSFunction*(1)")._as(new Z.Sum_evaluate_closure(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p))), t3), true, t3._eval$1("ListIterable.E")));
    },
    copy$1: function(params) {
      return new Z.Sum(this.operands, type$.legacy_Set_legacy_Variable._as(params));
    },
    get$defaultParameters: function() {
      var t3, t4, _i, operand, t5,
        t1 = type$.legacy_Variable,
        t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = this.operands, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
        operand = t3[_i];
        t5 = operand._parameters;
        if (t5 == null)
          t5 = operand.get$defaultParameters();
        t5 = t5.get$iterator(t5);
        for (; t5.moveNext$0();)
          t2.add$1(0, t5.get$current());
      }
      return P.SplayTreeSet_SplayTreeSet$from(t2, t1);
    },
    get$approx: function() {
      var t2, t3, _i,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSFunction);
      for (t2 = this.operands, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i].get$approx());
      return Z.add(t1);
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitSum$1(this));
    }
  };
  Z.Sum_evaluate_closure.prototype = {
    call$1: function(f) {
      return type$.legacy_BSFunction._as(f).evaluate$1(this.p);
    },
    $signature: 3
  };
  M.Tan.prototype = {
    evaluate$1: function(p) {
      var v,
        op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      if (op instanceof T.Number) {
        v = Math.tan(H.checkNum(op.absvalue));
        if (v === C.JSNumber_methods.toInt$0(v))
          return T.n(v);
      }
      return op instanceof Q.ArcTan ? op.operand : new M.Tan(op, null);
    },
    get$approx: function() {
      var op = this.operand.get$approx();
      if (op instanceof T.Number)
        return T.n(Math.tan(H.checkNum(op.absvalue)));
      return op instanceof Q.ArcTan ? op.operand : new M.Tan(op, null);
    },
    copy$1: function(params) {
      return new M.Tan(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitTan$1(this));
    }
  };
  U.TanH.prototype = {
    evaluate$1: function(p) {
      var op = this.operand.evaluate$1(type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p));
      return op instanceof T.ArTanH ? op.operand : new U.TanH(op, null);
    },
    get$approx: function() {
      var t1, t2, t3,
        op = this.operand.get$approx();
      if (op instanceof T.Number) {
        t1 = op.absvalue;
        t2 = Math.exp(H.checkNum(t1));
        if (typeof t1 !== "number")
          return t1.$negate();
        t3 = -t1;
        return T.n((t2 - Math.exp(t3)) / (Math.exp(t1) + Math.exp(t3)));
      } else
        return op instanceof T.ArTanH ? op.operand : new U.TanH(op, null);
    },
    copy$1: function(params) {
      return new U.TanH(this.operand, type$.legacy_Set_legacy_Variable._as(params));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitTanH$1(this));
    }
  };
  S._logic.prototype = {
    toString$0: function(_) {
      return this._three_valued_logic$_name;
    }
  };
  S.BSLogical.prototype = {
    toString$0: function(_) {
      return this._three_valued_logic$_name;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof S.BSLogical)
        return this._value === other._value;
      if (H._isBool(other)) {
        t1 = this._value;
        return other ? t1 === C._logic_0 : t1 === C._logic_1;
      }
      return false;
    },
    $and: function(_, other) {
      var t1 = this._value,
        t2 = other._value;
      if (C.JSBool_methods.$or(t1 === C._logic_2, t2 === C._logic_2))
        return C.BSLogical_unknown__logic_2;
      if (C.JSBool_methods.$or(t1 === C._logic_1, t2 === C._logic_1))
        return C.BSLogical_false__logic_1;
      return C.BSLogical_true__logic_0;
    },
    $or: function(_, other) {
      var t1 = this._value,
        t2 = other._value;
      if (C.JSBool_methods.$or(t1 === C._logic_2, t2 === C._logic_2))
        return C.BSLogical_unknown__logic_2;
      if (C.JSBool_methods.$or(t1 === C._logic_0, t2 === C._logic_0))
        return C.BSLogical_true__logic_0;
      return C.BSLogical_false__logic_1;
    }
  };
  N.main_closure.prototype = {
    call$1: function($event) {
      var t1, t2, output;
      type$.legacy_MouseEvent._as($event);
      t1 = document;
      t2 = type$.legacy_TextAreaElement;
      output = t2._as(t1.getElementById("output"));
      (output && C.TextAreaElement_methods).set$value(output, M.BetaScript_runForWeb(t2._as(t1.getElementById("source")).value));
    },
    $signature: 90
  };
  L.TokenType.prototype = {
    toString$0: function(_) {
      return this._token$_name;
    }
  };
  L.Token.prototype = {
    toString$0: function(_) {
      var t1 = H.S(this.type) + " '" + this.lexeme + "' ",
        t2 = this.literal;
      return t1 + H.S(t2 != null ? t2 : "");
    }
  };
  G.Pair.prototype = {
    toString$0: function(_) {
      return "(" + H.S(this.first) + " , " + H.S(this.second) + ")";
    },
    set$second: function(second) {
      this.second = this.$ti._eval$1("2*")._as(second);
    }
  };
  T.Union.prototype = {
    operateBuilderSetBuilderSet$2: function(first, second) {
      var t2, t3, t4, t5, _i,
        t1 = type$.legacy_BuilderSet;
      t1._as(first);
      t1._as(second);
      t1 = first.rule;
      t2 = second.rule;
      t3 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_Variable);
      for (t4 = first.parameters, t5 = t4.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i)
        C.JSArray_methods.add$1(t3, t4[_i]);
      for (t4 = second.parameters, t5 = t4.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i)
        C.JSArray_methods.add$1(t3, t4[_i]);
      return K.builderSet(new L.Or(t1, t2), t3);
    },
    operateIntensionalSetIntersectionBuilderSet$2: function(first, second) {
      return G.setUnion(H.setRuntimeTypeInfo([type$.legacy_IntensionalSetIntersection._as(first), type$.legacy_BuilderSet._as(second)], type$.JSArray_legacy_BSSet));
    },
    operateIntensionalSetIntersectionIntensionalSetIntersection$2: function(first, second) {
      var t1 = type$.legacy_IntensionalSetIntersection;
      return G.setUnion(H.setRuntimeTypeInfo([t1._as(first), t1._as(second)], type$.JSArray_legacy_BSSet));
    },
    operateIntervalBuilderSet$2: function(first, second) {
      type$.legacy_Interval._as(first);
      type$.legacy_BuilderSet._as(second);
      return new G.SetUnion(H.setRuntimeTypeInfo([second, first.relativeComplement$1(second.rule.get$solution())], type$.JSArray_legacy_BSSet));
    },
    operateIntervalIntensionalSetIntersection$2: function(first, second) {
      return G.setUnion(H.setRuntimeTypeInfo([type$.legacy_Interval._as(first), type$.legacy_IntensionalSetIntersection._as(second)], type$.JSArray_legacy_BSSet));
    },
    operateIntervalInterval$2: function(first, second) {
      var t2, _a, t3, t4, _b, _leftClosed, _rightClosed,
        t1 = type$.legacy_Interval;
      t1._as(first);
      t1._as(second);
      first.toString;
      if ($.$get$BSSet__disjoined().call$2(first, second)._value === C._logic_0)
        return new G.SetUnion(H.setRuntimeTypeInfo([first, second], type$.JSArray_legacy_BSSet));
      t1 = first.a;
      t2 = second.a;
      _a = B.min(t1, t2);
      t3 = first.b;
      t4 = second.b;
      _b = B.max(t3, t4);
      if (J.$eq$(t1, t2))
        _leftClosed = first.leftClosed || second.leftClosed;
      else
        _leftClosed = t1.$lt(0, t2) ? first.leftClosed : second.leftClosed;
      if (J.$eq$(t3, t4))
        _rightClosed = first.rightClosed || second.rightClosed;
      else
        _rightClosed = t3.$gt(0, t4) ? first.rightClosed : second.rightClosed;
      return O.interval(_a, _b, _leftClosed, _rightClosed);
    },
    operateRosterSetBuilderSet$2: function(first, second) {
      type$.legacy_RosterSet._as(first);
      type$.legacy_BuilderSet._as(second);
      return new G.SetUnion(H.setRuntimeTypeInfo([second, first.relativeComplement$1(second.rule.get$solution())], type$.JSArray_legacy_BSSet));
    },
    operateRosterSetIntensionalSetIntersection$2: function(first, second) {
      return G.setUnion(H.setRuntimeTypeInfo([type$.legacy_RosterSet._as(first), type$.legacy_IntensionalSetIntersection._as(second)], type$.JSArray_legacy_BSSet));
    },
    operateRosterSetInterval$2: function(first, second) {
      var t1, t2, t3, t4, _second;
      type$.legacy_RosterSet._as(first);
      t1 = type$.legacy_Interval;
      t1._as(second);
      t2 = second.a;
      t3 = second.b;
      t4 = second.leftClosed || first.elements.contains$1(0, t2);
      t1._as(O.interval(t2, t3, t4, second.rightClosed || first.elements.contains$1(0, t3)));
      t1 = first.elements;
      t2 = t1.$ti;
      _second = E.rosterSet(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new T.Union_operateRosterSetInterval_closure(first)), t2._eval$1("WhereIterable<1>")));
      if (_second === C.C_EmptySet)
        return first;
      else
        return new G.SetUnion(H.setRuntimeTypeInfo([first, _second], type$.JSArray_legacy_BSSet));
    },
    operateRosterSetRosterSet$2: function(first, second) {
      var t2, t3, t4,
        t1 = type$.legacy_RosterSet;
      t1._as(first);
      t1._as(second);
      t1 = type$.legacy_BSFunction;
      t2 = P.LinkedHashSet_LinkedHashSet(t1);
      for (t3 = first.elements, t4 = t3.$ti, t4 = P._SplayTreeKeyIterator$(t3, t4._precomputed1, t4._eval$1("_SplayTreeSetNode<1>")); t4.moveNext$0();)
        t2.add$1(0, t4.get$current());
      for (t3 = second.elements, t4 = t3.$ti, t4 = P._SplayTreeKeyIterator$(t3, t4._precomputed1, t4._eval$1("_SplayTreeSetNode<1>")); t4.moveNext$0();)
        t2.add$1(0, t4.get$current());
      return new E.RosterSet(P.SplayTreeSet_SplayTreeSet$from(t2, t1));
    },
    operateSetUnionBuilderSet$2: function(first, second) {
      var t1, t2, t3, _i;
      type$.legacy_SetUnion._as(first);
      type$.legacy_BuilderSet._as(second);
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSSet);
      for (t2 = first.subsets, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i]);
      C.JSArray_methods.add$1(t1, second);
      return G.setUnion(t1);
    },
    operateSetUnionIntensionalSetIntersection$2: function(first, second) {
      var t1, t2, t3, _i;
      type$.legacy_SetUnion._as(first);
      type$.legacy_IntensionalSetIntersection._as(second);
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSSet);
      for (t2 = first.subsets, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i]);
      C.JSArray_methods.add$1(t1, second);
      return G.setUnion(t1);
    },
    operateSetUnionInterval$2: function(first, second) {
      var t1, t2, t3, _i;
      type$.legacy_SetUnion._as(first);
      type$.legacy_Interval._as(second);
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSSet);
      for (t2 = first.subsets, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i]);
      C.JSArray_methods.add$1(t1, second);
      return G.setUnion(t1);
    },
    operateSetUnionRosterSet$2: function(first, second) {
      var t1, t2, t3, _i;
      type$.legacy_SetUnion._as(first);
      type$.legacy_RosterSet._as(second);
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSSet);
      for (t2 = first.subsets, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i]);
      C.JSArray_methods.add$1(t1, second);
      return G.setUnion(t1);
    },
    operateSetUnionSetUnion$2: function(first, second) {
      var t2, t3, _i,
        t1 = type$.legacy_SetUnion;
      t1._as(first);
      t1._as(second);
      t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_BSSet);
      for (t2 = first.subsets, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i]);
      for (t2 = second.subsets, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        C.JSArray_methods.add$1(t1, t2[_i]);
      return G.setUnion(t1);
    },
    onEmpty$2: function(first, second) {
      return first === C.C_EmptySet ? second : first;
    }
  };
  T.Union_operateRosterSetInterval_closure.prototype = {
    call$1: function(element) {
      return !this.first.elements.contains$1(0, type$.legacy_BSFunction._as(element));
    },
    $signature: 2
  };
  N.UserRoutine.prototype = {
    get$arity: function() {
      return this._declaration.parameters.length;
    },
    callThing$2: function(interpreter, $arguments) {
      var r, t2, t3, i, t4, t5, exception, _this = this,
        t1 = _this._closure,
        environment = new O.Environment(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Object), t1);
      for (t2 = _this._declaration, t3 = t2.parameters, i = 0; i < t3.length; ++i) {
        t4 = t3[i].lexeme;
        if (i >= $arguments.length)
          return H.ioore($arguments, i);
        t5 = $arguments[i];
        environment.values.$indexSet(0, t4, t5);
      }
      try {
        interpreter.executeBlock$2(t2.body, environment);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        if (t2 instanceof A.Return) {
          r = t2;
          if (_this._isInitializer)
            return t1._ancestor$1(0).values.$index(0, "this");
          return r.value;
        } else
          throw exception;
      }
      return _this._isInitializer ? t1._ancestor$1(0).values.$index(0, "this") : null;
    },
    toString$0: function(_) {
      return "<fn " + this._declaration.name.lexeme + ">";
    },
    bind$1: function(instance) {
      var environment = new O.Environment(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Object), this._closure);
      environment.define$2("this", instance);
      return new N.UserRoutine(this._declaration, environment, this._isInitializer);
    },
    $isBSCallable: 1
  };
  S.Variable.prototype = {
    evaluate$1: function(p) {
      var t1;
      type$.legacy_HashMap_of_legacy_String_and_legacy_BSFunction._as(p);
      t1 = this.name;
      if (!p.containsKey$1(t1))
        throw H.wrapException(F.BetascriptFunctionError$(C.JSString_methods.$add("Error! Missing arguments in call call: ", t1) + " not defined"));
      return p.$index(0, t1);
    },
    copy$1: function(params) {
      type$.legacy_Set_legacy_Variable._as(params);
      return new S.Variable(this.name, this.get$parameters());
    },
    get$defaultParameters: function() {
      return P.SplayTreeSet_SplayTreeSet$from([this], type$.legacy_Variable);
    },
    get$approx: function() {
      return this;
    },
    compareTo$1: function(_, other) {
      if (other instanceof S.Variable)
        return J.compareTo$1$ns(this.name, other.name);
      else
        throw H.wrapException(P.Exception_Exception("Can't compare Variable with " + J.get$runtimeType$(other).toString$0(0) + "!"));
    },
    accept$1$1: function(_, visitor, $T) {
      return $T._eval$1("0*")._as(visitor.visitVariable$1(this));
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static_2 = hunkHelpers._static_2,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 4);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 4);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 4);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(P, "collection_MapBase__id$closure", "MapBase__id", 92);
    _static_2(P, "collection___dynamicCompare$closure", "_dynamicCompare", 93);
    _static_2(P, "core_Comparable_compare$closure", "Comparable_compare", 70);
    _static_2(M, "betascript_BetaScript_error$closure", "BetaScript_error", 63);
    var _;
    _instance_2_u(_ = U.Contains.prototype, "get$operateBuilderSetBuilderSet", "operateBuilderSetBuilderSet$2", 22);
    _instance_2_u(_, "get$operateBuilderSetEmptySet", "operateBuilderSetEmptySet$2", 67);
    _instance_2_u(_, "get$operateBuilderSetIntensionalSetIntersection", "operateBuilderSetIntensionalSetIntersection$2", 68);
    _instance_2_u(_, "get$operateBuilderSetInterval", "operateBuilderSetInterval$2", 69);
    _instance_2_u(_, "get$operateBuilderSetRosterSet", "operateBuilderSetRosterSet$2", 94);
    _instance_2_u(_, "get$operateBuilderSetSetUnion", "operateBuilderSetSetUnion$2", 85);
    _instance_2_u(_, "get$operateEmptySetBuilderSet", "operateEmptySetBuilderSet$2", 91);
    _instance_2_u(_, "get$operateEmptySetEmptySet", "operateEmptySetEmptySet$2", 46);
    _instance_2_u(_, "get$operateEmptySetIntensionalSetIntersection", "operateEmptySetIntensionalSetIntersection$2", 50);
    _instance_2_u(_, "get$operateEmptySetInterval", "operateEmptySetInterval$2", 66);
    _instance_2_u(_, "get$operateEmptySetRosterSet", "operateEmptySetRosterSet$2", 48);
    _instance_2_u(_, "get$operateEmptySetSetUnion", "operateEmptySetSetUnion$2", 49);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionBuilderSet", "operateIntensionalSetIntersectionBuilderSet$2", 24);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionEmptySet", "operateIntensionalSetIntersectionEmptySet$2", 51);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionIntensionalSetIntersection", "operateIntensionalSetIntersectionIntensionalSetIntersection$2", 25);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionInterval", "operateIntensionalSetIntersectionInterval$2", 47);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionRosterSet", "operateIntensionalSetIntersectionRosterSet$2", 43);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionSetUnion", "operateIntensionalSetIntersectionSetUnion$2", 44);
    _instance_2_u(_, "get$operateIntervalBuilderSet", "operateIntervalBuilderSet$2", 26);
    _instance_2_u(_, "get$operateIntervalEmptySet", "operateIntervalEmptySet$2", 41);
    _instance_2_u(_, "get$operateIntervalIntensionalSetIntersection", "operateIntervalIntensionalSetIntersection$2", 28);
    _instance_2_u(_, "get$operateIntervalInterval", "operateIntervalInterval$2", 29);
    _instance_2_u(_, "get$operateIntervalRosterSet", "operateIntervalRosterSet$2", 64);
    _instance_2_u(_, "get$operateIntervalSetUnion", "operateIntervalSetUnion$2", 65);
    _instance_2_u(_, "get$operateRosterSetBuilderSet", "operateRosterSetBuilderSet$2", 30);
    _instance_2_u(_, "get$operateRosterSetEmptySet", "operateRosterSetEmptySet$2", 88);
    _instance_2_u(_, "get$operateRosterSetIntensionalSetIntersection", "operateRosterSetIntensionalSetIntersection$2", 31);
    _instance_2_u(_, "get$operateRosterSetInterval", "operateRosterSetInterval$2", 32);
    _instance_2_u(_, "get$operateRosterSetRosterSet", "operateRosterSetRosterSet$2", 33);
    _instance_2_u(_, "get$operateRosterSetSetUnion", "operateRosterSetSetUnion$2", 45);
    _instance_2_u(_, "get$operateSetUnionBuilderSet", "operateSetUnionBuilderSet$2", 27);
    _instance_2_u(_, "get$operateSetUnionEmptySet", "operateSetUnionEmptySet$2", 95);
    _instance_2_u(_, "get$operateSetUnionIntensionalSetIntersection", "operateSetUnionIntensionalSetIntersection$2", 34);
    _instance_2_u(_, "get$operateSetUnionInterval", "operateSetUnionInterval$2", 35);
    _instance_2_u(_, "get$operateSetUnionRosterSet", "operateSetUnionRosterSet$2", 36);
    _instance_2_u(_, "get$operateSetUnionSetUnion", "operateSetUnionSetUnion$2", 37);
    _instance_2_u(_ = V.Disjoined.prototype, "get$operateBuilderSetBuilderSet", "operateBuilderSetBuilderSet$2", 22);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionBuilderSet", "operateIntensionalSetIntersectionBuilderSet$2", 24);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionIntensionalSetIntersection", "operateIntensionalSetIntersectionIntensionalSetIntersection$2", 25);
    _instance_2_u(_, "get$operateIntervalBuilderSet", "operateIntervalBuilderSet$2", 26);
    _instance_2_u(_, "get$operateIntervalIntensionalSetIntersection", "operateIntervalIntensionalSetIntersection$2", 28);
    _instance_2_u(_, "get$operateIntervalInterval", "operateIntervalInterval$2", 29);
    _instance_2_u(_, "get$operateRosterSetBuilderSet", "operateRosterSetBuilderSet$2", 30);
    _instance_2_u(_, "get$operateRosterSetIntensionalSetIntersection", "operateRosterSetIntensionalSetIntersection$2", 31);
    _instance_2_u(_, "get$operateRosterSetInterval", "operateRosterSetInterval$2", 32);
    _instance_2_u(_, "get$operateRosterSetRosterSet", "operateRosterSetRosterSet$2", 33);
    _instance_2_u(_, "get$operateSetUnionBuilderSet", "operateSetUnionBuilderSet$2", 27);
    _instance_2_u(_, "get$operateSetUnionIntensionalSetIntersection", "operateSetUnionIntensionalSetIntersection$2", 34);
    _instance_2_u(_, "get$operateSetUnionInterval", "operateSetUnionInterval$2", 35);
    _instance_2_u(_, "get$operateSetUnionRosterSet", "operateSetUnionRosterSet$2", 36);
    _instance_2_u(_, "get$operateSetUnionSetUnion", "operateSetUnionSetUnion$2", 37);
    _instance_2_u(_ = D.Intersection.prototype, "get$operateBuilderSetBuilderSet", "operateBuilderSetBuilderSet$2", 6);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionBuilderSet", "operateIntensionalSetIntersectionBuilderSet$2", 7);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionIntensionalSetIntersection", "operateIntensionalSetIntersectionIntensionalSetIntersection$2", 8);
    _instance_2_u(_, "get$operateIntervalBuilderSet", "operateIntervalBuilderSet$2", 9);
    _instance_2_u(_, "get$operateIntervalIntensionalSetIntersection", "operateIntervalIntensionalSetIntersection$2", 10);
    _instance_2_u(_, "get$operateIntervalInterval", "operateIntervalInterval$2", 11);
    _instance_2_u(_, "get$operateRosterSetBuilderSet", "operateRosterSetBuilderSet$2", 12);
    _instance_2_u(_, "get$operateRosterSetIntensionalSetIntersection", "operateRosterSetIntensionalSetIntersection$2", 13);
    _instance_2_u(_, "get$operateRosterSetInterval", "operateRosterSetInterval$2", 14);
    _instance_2_u(_, "get$operateRosterSetRosterSet", "operateRosterSetRosterSet$2", 15);
    _instance_2_u(_, "get$operateSetUnionBuilderSet", "operateSetUnionBuilderSet$2", 5);
    _instance_2_u(_, "get$operateSetUnionIntensionalSetIntersection", "operateSetUnionIntensionalSetIntersection$2", 16);
    _instance_2_u(_, "get$operateSetUnionInterval", "operateSetUnionInterval$2", 17);
    _instance_2_u(_, "get$operateSetUnionRosterSet", "operateSetUnionRosterSet$2", 18);
    _instance_2_u(_, "get$operateSetUnionSetUnion", "operateSetUnionSetUnion$2", 19);
    _instance_1_u(O.Interval.prototype, "get$belongs", "belongs$1", 2);
    _instance_2_u(_ = O.RelativeComplement.prototype, "get$operateBuilderSetBuilderSet", "operateBuilderSetBuilderSet$2", 6);
    _instance_2_u(_, "get$operateBuilderSetIntensionalSetIntersection", "operateBuilderSetIntensionalSetIntersection$2", 75);
    _instance_2_u(_, "get$operateBuilderSetInterval", "operateBuilderSetInterval$2", 76);
    _instance_2_u(_, "get$operateBuilderSetRosterSet", "operateBuilderSetRosterSet$2", 77);
    _instance_2_u(_, "get$operateBuilderSetSetUnion", "operateBuilderSetSetUnion$2", 78);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionBuilderSet", "operateIntensionalSetIntersectionBuilderSet$2", 7);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionIntensionalSetIntersection", "operateIntensionalSetIntersectionIntensionalSetIntersection$2", 8);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionInterval", "operateIntensionalSetIntersectionInterval$2", 79);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionRosterSet", "operateIntensionalSetIntersectionRosterSet$2", 80);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionSetUnion", "operateIntensionalSetIntersectionSetUnion$2", 81);
    _instance_2_u(_, "get$operateIntervalBuilderSet", "operateIntervalBuilderSet$2", 9);
    _instance_2_u(_, "get$operateIntervalIntensionalSetIntersection", "operateIntervalIntensionalSetIntersection$2", 10);
    _instance_2_u(_, "get$operateIntervalInterval", "operateIntervalInterval$2", 11);
    _instance_2_u(_, "get$operateIntervalRosterSet", "operateIntervalRosterSet$2", 82);
    _instance_2_u(_, "get$operateIntervalSetUnion", "operateIntervalSetUnion$2", 83);
    _instance_2_u(_, "get$operateRosterSetBuilderSet", "operateRosterSetBuilderSet$2", 12);
    _instance_2_u(_, "get$operateRosterSetIntensionalSetIntersection", "operateRosterSetIntensionalSetIntersection$2", 13);
    _instance_2_u(_, "get$operateRosterSetInterval", "operateRosterSetInterval$2", 14);
    _instance_2_u(_, "get$operateRosterSetRosterSet", "operateRosterSetRosterSet$2", 15);
    _instance_2_u(_, "get$operateRosterSetSetUnion", "operateRosterSetSetUnion$2", 84);
    _instance_2_u(_, "get$operateSetUnionBuilderSet", "operateSetUnionBuilderSet$2", 5);
    _instance_2_u(_, "get$operateSetUnionIntensionalSetIntersection", "operateSetUnionIntensionalSetIntersection$2", 16);
    _instance_2_u(_, "get$operateSetUnionInterval", "operateSetUnionInterval$2", 17);
    _instance_2_u(_, "get$operateSetUnionRosterSet", "operateSetUnionRosterSet$2", 18);
    _instance_2_u(_, "get$operateSetUnionSetUnion", "operateSetUnionSetUnion$2", 19);
    _instance_1_u(L.Resolver.prototype, "get$_resolveStmt", "_resolveStmt$1", 86);
    _instance_0_u(_ = O.BSScanner.prototype, "get$string", "string$0", 0);
    _instance_0_u(_, "get$directive", "directive$0", 0);
    _instance_2_u(_ = X.EmptyFilteringComutativeSetOperation.prototype, "get$operateBuilderSetIntensionalSetIntersection", "operateBuilderSetIntensionalSetIntersection$2", "EmptyFilteringComutativeSetOperation.0*(BuilderSet*,IntensionalSetIntersection*)");
    _instance_2_u(_, "get$operateBuilderSetInterval", "operateBuilderSetInterval$2", "EmptyFilteringComutativeSetOperation.0*(BuilderSet*,Interval*)");
    _instance_2_u(_, "get$operateBuilderSetRosterSet", "operateBuilderSetRosterSet$2", "EmptyFilteringComutativeSetOperation.0*(BuilderSet*,RosterSet*)");
    _instance_2_u(_, "get$operateBuilderSetSetUnion", "operateBuilderSetSetUnion$2", "EmptyFilteringComutativeSetOperation.0*(BuilderSet*,SetUnion*)");
    _instance_2_u(_, "get$operateIntensionalSetIntersectionInterval", "operateIntensionalSetIntersectionInterval$2", "EmptyFilteringComutativeSetOperation.0*(IntensionalSetIntersection*,Interval*)");
    _instance_2_u(_, "get$operateIntensionalSetIntersectionRosterSet", "operateIntensionalSetIntersectionRosterSet$2", "EmptyFilteringComutativeSetOperation.0*(IntensionalSetIntersection*,RosterSet*)");
    _instance_2_u(_, "get$operateIntensionalSetIntersectionSetUnion", "operateIntensionalSetIntersectionSetUnion$2", "EmptyFilteringComutativeSetOperation.0*(IntensionalSetIntersection*,SetUnion*)");
    _instance_2_u(_, "get$operateIntervalRosterSet", "operateIntervalRosterSet$2", "EmptyFilteringComutativeSetOperation.0*(Interval*,RosterSet*)");
    _instance_2_u(_, "get$operateIntervalSetUnion", "operateIntervalSetUnion$2", "EmptyFilteringComutativeSetOperation.0*(Interval*,SetUnion*)");
    _instance_2_u(_, "get$operateRosterSetSetUnion", "operateRosterSetSetUnion$2", "EmptyFilteringComutativeSetOperation.0*(RosterSet*,SetUnion*)");
    _instance_2_u(_ = T.Union.prototype, "get$operateBuilderSetBuilderSet", "operateBuilderSetBuilderSet$2", 6);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionBuilderSet", "operateIntensionalSetIntersectionBuilderSet$2", 7);
    _instance_2_u(_, "get$operateIntensionalSetIntersectionIntensionalSetIntersection", "operateIntensionalSetIntersectionIntensionalSetIntersection$2", 8);
    _instance_2_u(_, "get$operateIntervalBuilderSet", "operateIntervalBuilderSet$2", 9);
    _instance_2_u(_, "get$operateIntervalIntensionalSetIntersection", "operateIntervalIntensionalSetIntersection$2", 10);
    _instance_2_u(_, "get$operateIntervalInterval", "operateIntervalInterval$2", 11);
    _instance_2_u(_, "get$operateRosterSetBuilderSet", "operateRosterSetBuilderSet$2", 12);
    _instance_2_u(_, "get$operateRosterSetIntensionalSetIntersection", "operateRosterSetIntensionalSetIntersection$2", 13);
    _instance_2_u(_, "get$operateRosterSetInterval", "operateRosterSetInterval$2", 14);
    _instance_2_u(_, "get$operateRosterSetRosterSet", "operateRosterSetRosterSet$2", 15);
    _instance_2_u(_, "get$operateSetUnionBuilderSet", "operateSetUnionBuilderSet$2", 5);
    _instance_2_u(_, "get$operateSetUnionIntensionalSetIntersection", "operateSetUnionIntensionalSetIntersection$2", 16);
    _instance_2_u(_, "get$operateSetUnionInterval", "operateSetUnionInterval$2", 17);
    _instance_2_u(_, "get$operateSetUnionRosterSet", "operateSetUnionRosterSet$2", 18);
    _instance_2_u(_, "get$operateSetUnionSetUnion", "operateSetUnionSetUnion$2", 19);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Iterable, H.ListIterator, P.Iterator, H.ConstantMap, H.TypeErrorDecoder, P.Error, H.NullThrownFromJavaScriptException, H._StackTrace, H.Closure, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.Rti, H._FunctionParameters, H._Type, P._TimerImpl, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.AsyncError, P._Zone, P._HashMapKeyIterator, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.IterableMixin, P.SetMixin, P._SplayTreeNode, P._SplayTree, P._SplayTreeIterator, P.StackOverflowError, P._Exception, P.FormatException, P.Null, P._StringStackTrace, P.RuneIterator, P.StringBuffer, W.EventStreamProvider, F.BSFunction, G.LogicExpression, X.BSSet, X.BSClass, X.SetOperation, D.DirectiveManager, O.Environment, V.Expr, F.BetascriptFunctionError, F.FunctionAdapter, R.BSInstance, A.BSInterpreter, A.RuntimeError0, A.Return, Q.MethodTable, B.NativeCallable, G.ParseError, G.BSParser, N.PartialDerivative, N.PlainFunctionStringifier, Z.SetVisitor, L.RoutineType, L.ClassType, L.Resolver, O.BSScanner, X.SetDefinitionError, A.Solver, A.BetascriptSolverError, F.Stmt, S._logic, S.BSLogical, L.TokenType, L.Token, G.Pair, N.UserRoutine]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, W.EventTarget, W.DomException, W.Event]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H._ConstantMapKeyIterable, P.Runes]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator]);
    _inherit(H.MappedListIterable, H.ListIterable);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inheritMany(P.Error, [P.TypeError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, P.AssertionError, H._Error, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.Closure, [H.TearOffClosure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.HashMap_HashMap$from_closure, P.MapBase_mapToString_closure, P.SplayTreeSet_closure, W._EventStreamSubscription_closure, M.BetaScript_runForWeb_closure, K.builderSet_closure, M.Comparison_solution_closure, M.Comparison_parameters_closure, F.BSFunction_call_closure, F.FunctionAdapter_callThing_closure, D.Intersection_operateRosterSetBuilderSet_closure, D.Intersection_operateRosterSetInterval_closure, D.Intersection_operateRosterSetRosterSet_closure, D.Intersection_operateSetUnionInterval_closure, D.Intersection_operateSetUnionRosterSet_closure, D.Intersection_operateSetUnionSetUnion_closure, F._consolidateNegatives_closure, N.closure, N.PartialDerivative_visitSum_closure, M.PlainSetStringifier_visitBuilderSet_closure, M.PlainSetStringifier_visitRosterSet_closure, M.PlainSetStringifier_visitSetUnion_closure, O.RelativeComplement__removeIteratively_closure, O.RelativeComplement__removeWhereBelongs_closure, O.RelativeComplement_operateRosterSetRosterSet_closure, O.RelativeComplement__complementFromEvery_closure, L.Resolver_closure, E.rosterSet_closure, O.BSScanner__initializeMap_closure, O.BSScanner__initializeMap_closure0, O.BSScanner__initializeMap_closure1, O.BSScanner__initializeMap_closure2, O.BSScanner__initializeMap_closure3, O.BSScanner__initializeMap_closure4, O.BSScanner__initializeMap_closure5, O.BSScanner__initializeMap_closure6, O.BSScanner__initializeMap_closure7, O.BSScanner__initializeMap_closure8, O.BSScanner__initializeMap_closure9, O.BSScanner__initializeMap_closure10, O.BSScanner__initializeMap_closure11, O.BSScanner__initializeMap_closure12, O.BSScanner__initializeMap_closure13, O.BSScanner__initializeMap_closure14, O.BSScanner__initializeMap_closure15, O.BSScanner__initializeMap_closure16, O.BSScanner__initializeMap_closure17, O.BSScanner__initializeMap_closure18, O.BSScanner__initializeMap_closure19, O.BSScanner__initializeMap_closure20, O.BSScanner__initializeMap_closure21, O.BSScanner__initializeMap_closure22, O.BSScanner__initializeMap_closure23, O.BSScanner__initializeMap_closure24, O.BSScanner__initializeMap_closure25, O.BSScanner__initializeMap_closure26, O.BSScanner__initializeMap_closure27, O.BSScanner__initializeMap_closure28, O.BSScanner__initializeMap_closure29, O.BSScanner__initializeMap_closure30, O.BSScanner__initializeMap_closure31, O.BSScanner__initializeMap_closure32, O.BSScanner__initializeMap_closure33, O.BSScanner__initializeMap_closure34, O.BSScanner__initializeMap_closure35, G.setUnion_closure, G.setUnion_closure0, G.SetUnion_complement_closure, G.SetUnion_knownElements_closure, Y.SingleVariableLinearSolver_appliesInternal_closure, Z.Sum_evaluate_closure, N.main_closure, T.Union_operateRosterSetInterval_closure]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._HashMap]);
    _inherit(H._TypeError, H._Error);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inherit(P._SplayTreeSetNode, P._SplayTreeNode);
    _inherit(P._SplayTreeKeyIterator, P._SplayTreeIterator);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin, P._SplayTree);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(P.SplayTreeSet, P._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(W.Node, W.EventTarget);
    _inherit(W.Element, W.Node);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.FormElement, W.SelectElement, W.TextAreaElement]);
    _inherit(W.UIEvent, W.Event);
    _inherit(W.MouseEvent, W.UIEvent);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inheritMany(F.BSFunction, [M.SingleOperandFunction, S.Division, X.Exponentiation, O.Log, F.Multiplication, T.Number, O.Root, Z.Sum, S.Variable]);
    _inheritMany(M.SingleOperandFunction, [Y.AbsoluteValue, N.ArcCos, L.ArcCsc, U.ArcCtg, Y.ArCosH, L.ArCscH, Y.ArcSec, L.ArcSin, Q.ArcTan, V.ArCtgH, N.ArSecH, Z.ArSinH, T.ArTanH, A.Cos, D.CosH, U.Csc, M.CscH, X.Ctg, A.CtgH, F.Negative, S.Sec, D.SecH, Y.Signum, U.Sin, D.SinH, M.Tan, U.TanH]);
    _inheritMany(G.LogicExpression, [R.And, M.Comparison, A.Not, L.Or]);
    _inheritMany(X.BSSet, [K.BuilderSet, Y.EmptySet, E.IntensionalSetIntersection, O.Interval, E.RosterSet, G.SetUnion]);
    _inheritMany(X.SetOperation, [X.EmptyTreatingSetOperation, X.EmptyFilteringSetOperation]);
    _inherit(U.Contains, X.EmptyTreatingSetOperation);
    _inheritMany(X.EmptyFilteringSetOperation, [X.EmptyFilteringComutativeSetOperation, O.RelativeComplement]);
    _inheritMany(X.EmptyFilteringComutativeSetOperation, [V.Disjoined, D.Intersection, T.Union]);
    _inheritMany(M.Comparison, [Q.Equal, B.GreaterOrEqual, N.GreaterThan, Q.LessOrEqual, Z.LessThan]);
    _inheritMany(V.Expr, [V.AssignExpr, V.BinaryExpr, V.CallExpr, V.GetExpr, V.GroupingExpr, V.LiteralExpr, V.UnaryExpr, V.VariableExpr, V.LogicBinaryExpr, V.SetExpr, V.ThisExpr, V.SuperExpr, V.DerivativeExpr, V.IntervalDefinitionExpr, V.RosterDefinitionExpr, V.BuilderDefinitionExpr, V.SetBinaryExpr]);
    _inherit(M.PlainSetStringifier, Z.SetVisitor);
    _inheritMany(A.Solver, [Y.SingleVariableLinearSolver, S.SingleVariableSolver]);
    _inheritMany(F.Stmt, [F.ExpressionStmt, F.PrintStmt, F.VarStmt, F.BlockStmt, F.IfStmt, F.RoutineStmt, F.WhileStmt, F.ReturnStmt, F.ClassStmt, F.DirectiveStmt]);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin, P.IterableMixin);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P.SetMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["~()", "Null()", "bool*(BSFunction*)", "BSFunction*(BSFunction*)", "~(~())", "BSSet*(SetUnion*,BuilderSet*)", "BSSet*(BuilderSet*,BuilderSet*)", "BSSet*(IntensionalSetIntersection*,BuilderSet*)", "BSSet*(IntensionalSetIntersection*,IntensionalSetIntersection*)", "BSSet*(Interval*,BuilderSet*)", "BSSet*(Interval*,IntensionalSetIntersection*)", "BSSet*(Interval*,Interval*)", "BSSet*(RosterSet*,BuilderSet*)", "BSSet*(RosterSet*,IntensionalSetIntersection*)", "BSSet*(RosterSet*,Interval*)", "BSSet*(RosterSet*,RosterSet*)", "BSSet*(SetUnion*,IntensionalSetIntersection*)", "BSSet*(SetUnion*,Interval*)", "BSSet*(SetUnion*,RosterSet*)", "BSSet*(SetUnion*,SetUnion*)", "BSSet*(BSSet*)", "BSSet*(BSSet*,BSSet*)", "BSLogical*(BuilderSet*,BuilderSet*)", "bool*(BSSet*)", "BSLogical*(IntensionalSetIntersection*,BuilderSet*)", "BSLogical*(IntensionalSetIntersection*,IntensionalSetIntersection*)", "BSLogical*(Interval*,BuilderSet*)", "BSLogical*(SetUnion*,BuilderSet*)", "BSLogical*(Interval*,IntensionalSetIntersection*)", "BSLogical*(Interval*,Interval*)", "BSLogical*(RosterSet*,BuilderSet*)", "BSLogical*(RosterSet*,IntensionalSetIntersection*)", "BSLogical*(RosterSet*,Interval*)", "BSLogical*(RosterSet*,RosterSet*)", "BSLogical*(SetUnion*,IntensionalSetIntersection*)", "BSLogical*(SetUnion*,Interval*)", "BSLogical*(SetUnion*,RosterSet*)", "BSLogical*(SetUnion*,SetUnion*)", "Variable*(String*)", "String*(Variable*)", "Null(@)", "BSLogical*(Interval*,EmptySet*)", "@(@)", "BSLogical*(IntensionalSetIntersection*,RosterSet*)", "BSLogical*(IntensionalSetIntersection*,SetUnion*)", "BSLogical*(RosterSet*,SetUnion*)", "BSLogical*(EmptySet*,EmptySet*)", "BSLogical*(IntensionalSetIntersection*,Interval*)", "BSLogical*(EmptySet*,RosterSet*)", "BSLogical*(EmptySet*,SetUnion*)", "BSLogical*(EmptySet*,IntensionalSetIntersection*)", "BSLogical*(IntensionalSetIntersection*,EmptySet*)", "BSFunction*(Object*)", "Null(~())", "@(@,String)", "@(String)", "Null(Object,StackTrace)", "_Future<@>(@)", "Null(@,@)", "Null(Object?,Object?)", "bool(@)", "@(Event)", "Null(Object*)", "~(Object*,String*)", "BSLogical*(Interval*,RosterSet*)", "BSLogical*(Interval*,SetUnion*)", "BSLogical*(EmptySet*,Interval*)", "BSLogical*(BuilderSet*,EmptySet*)", "BSLogical*(BuilderSet*,IntensionalSetIntersection*)", "BSLogical*(BuilderSet*,Interval*)", "int(Comparable<@>,Comparable<@>)", "int*(BSInterpreter*,List<Object*>*)", "String*(String*,String*)", "String*(String*,BSFunction*)", "String*(String*,BSSet*)", "BSSet*(BuilderSet*,IntensionalSetIntersection*)", "BSSet*(BuilderSet*,Interval*)", "BSSet*(BuilderSet*,RosterSet*)", "BSSet*(BuilderSet*,SetUnion*)", "BSSet*(IntensionalSetIntersection*,Interval*)", "BSSet*(IntensionalSetIntersection*,RosterSet*)", "BSSet*(IntensionalSetIntersection*,SetUnion*)", "BSSet*(Interval*,RosterSet*)", "BSSet*(Interval*,SetUnion*)", "BSSet*(RosterSet*,SetUnion*)", "BSLogical*(BuilderSet*,SetUnion*)", "~(Stmt*)", "bool*(@)", "BSLogical*(RosterSet*,EmptySet*)", "bool*(bool*,BSFunction*)", "Null(MouseEvent*)", "BSLogical*(EmptySet*,BuilderSet*)", "Object?(Object?)", "int(@,@)", "BSLogical*(BuilderSet*,RosterSet*)", "BSLogical*(SetUnion*,EmptySet*)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"JavaScriptObject","PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","AElement":"SvgElement","GraphicsElement":"SvgElement","AudioElement":"HtmlElement","MediaElement":"HtmlElement","PointerEvent":"MouseEvent","CompositionEvent":"UIEvent","HtmlDocument":"Node","Document":"Node","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JavaScriptObject":{"Function":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"]},"JSDouble":{"double":[],"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"Iterable":["1"]},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"]},"LinkedHashMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_Future":{"Future":["1"]},"AsyncError":{"Error":[]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"HashMap":{"Map":["1","2"]},"_HashMap":{"MapMixin":["1","2"],"HashMap":["1","2"],"Map":["1","2"]},"_HashMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedHashSet":{"_SetBase":["1"],"Set":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"_SetBase":{"Set":["1"],"Iterable":["1"]},"_SplayTreeSetNode":{"_SplayTreeNode":["1","_SplayTreeSetNode<1>"],"_SplayTreeNode.K":"1","_SplayTreeNode.1":"_SplayTreeSetNode<1>"},"_SplayTreeIterator":{"Iterator":["3"]},"_SplayTreeKeyIterator":{"_SplayTreeIterator":["1","2","1"],"Iterator":["1"],"_SplayTreeIterator.1":"2","_SplayTreeIterator.K":"1"},"SplayTreeSet":{"SetMixin":["1"],"Set":["1"],"IterableMixin":["1"],"_SplayTree":["1","_SplayTreeSetNode<1>"],"Iterable":["1"],"_SplayTree.K":"1","_SplayTree.1":"_SplayTreeSetNode<1>"},"double":{"num":[],"Comparable":["num"]},"int":{"num":[],"Comparable":["num"]},"List":{"Iterable":["1"]},"num":{"Comparable":["num"]},"String":{"Comparable":["String"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"HtmlElement":{"Element":[],"EventTarget":[]},"AnchorElement":{"Element":[],"EventTarget":[]},"AreaElement":{"Element":[],"EventTarget":[]},"Element":{"EventTarget":[]},"FormElement":{"Element":[],"EventTarget":[]},"MouseEvent":{"Event":[]},"Node":{"EventTarget":[]},"SelectElement":{"Element":[],"EventTarget":[]},"TextAreaElement":{"Element":[],"EventTarget":[]},"UIEvent":{"Event":[]},"_EventStream":{"Stream":["1"]},"_ElementEventStreamImpl":{"_EventStream":["1"],"Stream":["1"]},"SvgElement":{"Element":[],"EventTarget":[]},"AbsoluteValue":{"BSFunction":[],"Comparable":["BSFunction*"]},"And":{"LogicExpression":[]},"ArcCos":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArcCsc":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArcCtg":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArCosH":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArCscH":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArcSec":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArcSin":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArcTan":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArCtgH":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArSecH":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArSinH":{"BSFunction":[],"Comparable":["BSFunction*"]},"ArTanH":{"BSFunction":[],"Comparable":["BSFunction*"]},"BuilderSet":{"BSSet":[]},"BSClass":{"BSCallable":[]},"Comparison":{"LogicExpression":[]},"Contains":{"EmptyTreatingSetOperation":["BSLogical*"],"SetOperation":["BSLogical*"],"SetOperation.0":"BSLogical*"},"Cos":{"BSFunction":[],"Comparable":["BSFunction*"]},"CosH":{"BSFunction":[],"Comparable":["BSFunction*"]},"Csc":{"BSFunction":[],"Comparable":["BSFunction*"]},"CscH":{"BSFunction":[],"Comparable":["BSFunction*"]},"Ctg":{"BSFunction":[],"Comparable":["BSFunction*"]},"CtgH":{"BSFunction":[],"Comparable":["BSFunction*"]},"Disjoined":{"EmptyFilteringComutativeSetOperation":["BSLogical*"],"EmptyFilteringSetOperation":["BSLogical*"],"SetOperation":["BSLogical*"],"SetOperation.0":"BSLogical*","EmptyFilteringSetOperation.0":"BSLogical*","EmptyFilteringComutativeSetOperation.0":"BSLogical*"},"Division":{"BSFunction":[],"Comparable":["BSFunction*"]},"EmptySet":{"BSSet":[]},"Equal":{"Comparison":[],"LogicExpression":[]},"Exponentiation":{"BSFunction":[],"Comparable":["BSFunction*"]},"AssignExpr":{"Expr":[]},"BinaryExpr":{"Expr":[]},"CallExpr":{"Expr":[]},"GetExpr":{"Expr":[]},"GroupingExpr":{"Expr":[]},"LiteralExpr":{"Expr":[]},"UnaryExpr":{"Expr":[]},"VariableExpr":{"Expr":[]},"LogicBinaryExpr":{"Expr":[]},"SetExpr":{"Expr":[]},"ThisExpr":{"Expr":[]},"SuperExpr":{"Expr":[]},"DerivativeExpr":{"Expr":[]},"IntervalDefinitionExpr":{"Expr":[]},"RosterDefinitionExpr":{"Expr":[]},"BuilderDefinitionExpr":{"Expr":[]},"SetBinaryExpr":{"Expr":[]},"BSFunction":{"Comparable":["BSFunction*"]},"FunctionAdapter":{"BSCallable":[]},"GreaterOrEqual":{"Comparison":[],"LogicExpression":[]},"GreaterThan":{"Comparison":[],"LogicExpression":[]},"IntensionalSetIntersection":{"BSSet":[]},"BSInterpreter":{"ExprVisitor":[],"StmtVisitor":[]},"Intersection":{"EmptyFilteringComutativeSetOperation":["BSSet*"],"EmptyFilteringSetOperation":["BSSet*"],"SetOperation":["BSSet*"],"SetOperation.0":"BSSet*","EmptyFilteringSetOperation.0":"BSSet*","EmptyFilteringComutativeSetOperation.0":"BSSet*"},"Interval":{"BSSet":[]},"LessOrEqual":{"Comparison":[],"LogicExpression":[]},"LessThan":{"Comparison":[],"LogicExpression":[]},"Log":{"BSFunction":[],"Comparable":["BSFunction*"]},"Multiplication":{"BSFunction":[],"Comparable":["BSFunction*"]},"NativeCallable":{"BSCallable":[]},"Negative":{"BSFunction":[],"Comparable":["BSFunction*"]},"Not":{"LogicExpression":[]},"Number":{"BSFunction":[],"Comparable":["BSFunction*"]},"Or":{"LogicExpression":[]},"PartialDerivative":{"FunctionVisitor":["BSFunction*"]},"PlainFunctionStringifier":{"FunctionVisitor":["String*"]},"PlainSetStringifier":{"SetVisitor":["String*"]},"RelativeComplement":{"EmptyFilteringSetOperation":["BSSet*"],"SetOperation":["BSSet*"],"SetOperation.0":"BSSet*","EmptyFilteringSetOperation.0":"BSSet*"},"Resolver":{"ExprVisitor":[],"StmtVisitor":[]},"Root":{"BSFunction":[],"Comparable":["BSFunction*"]},"RosterSet":{"BSSet":[]},"Sec":{"BSFunction":[],"Comparable":["BSFunction*"]},"SecH":{"BSFunction":[],"Comparable":["BSFunction*"]},"EmptyFilteringSetOperation":{"SetOperation":["1*"]},"EmptyTreatingSetOperation":{"SetOperation":["1*"]},"EmptyFilteringComutativeSetOperation":{"EmptyFilteringSetOperation":["1*"],"SetOperation":["1*"]},"SetUnion":{"BSSet":[]},"Signum":{"BSFunction":[],"Comparable":["BSFunction*"]},"Sin":{"BSFunction":[],"Comparable":["BSFunction*"]},"SingleOperandFunction":{"BSFunction":[],"Comparable":["BSFunction*"]},"SinH":{"BSFunction":[],"Comparable":["BSFunction*"]},"ExpressionStmt":{"Stmt":[]},"PrintStmt":{"Stmt":[]},"VarStmt":{"Stmt":[]},"BlockStmt":{"Stmt":[]},"IfStmt":{"Stmt":[]},"RoutineStmt":{"Stmt":[]},"WhileStmt":{"Stmt":[]},"ReturnStmt":{"Stmt":[]},"ClassStmt":{"Stmt":[]},"DirectiveStmt":{"Stmt":[]},"Sum":{"BSFunction":[],"Comparable":["BSFunction*"]},"Tan":{"BSFunction":[],"Comparable":["BSFunction*"]},"TanH":{"BSFunction":[],"Comparable":["BSFunction*"]},"Union":{"EmptyFilteringComutativeSetOperation":["BSSet*"],"EmptyFilteringSetOperation":["BSSet*"],"SetOperation":["BSSet*"],"SetOperation.0":"BSSet*","EmptyFilteringSetOperation.0":"BSSet*","EmptyFilteringComutativeSetOperation.0":"BSSet*"},"UserRoutine":{"BSCallable":[]},"Variable":{"BSFunction":[],"Comparable":["BSFunction*"]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"StreamSubscription":1,"MapBase":2,"_SplayTreeSet__SplayTree_IterableMixin":1,"_SplayTreeSet__SplayTree_IterableMixin_SetMixin":1,"Comparable":1,"SetVisitor":1}'));
  var string$ = {
    Expect: "Expected ] or ) ending interval definition",
    Parame: "Parameters to a function must always be Variables",
    Roster: "Roster sets can only be defined in constants!"
  };
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      AsyncError: findType("AsyncError"),
      Comparable_dynamic: findType("Comparable<@>"),
      Error: findType("Error"),
      Event: findType("Event"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_legacy_BSFunction: findType("JSArray<BSFunction*>"),
      JSArray_legacy_BSSet: findType("JSArray<BSSet*>"),
      JSArray_legacy_Division: findType("JSArray<Division*>"),
      JSArray_legacy_Expr: findType("JSArray<Expr*>"),
      JSArray_legacy_HashMap_of_legacy_String_and_legacy_bool: findType("JSArray<HashMap<String*,bool*>*>"),
      JSArray_legacy_Object: findType("JSArray<Object*>"),
      JSArray_legacy_RoutineStmt: findType("JSArray<RoutineStmt*>"),
      JSArray_legacy_Stmt: findType("JSArray<Stmt*>"),
      JSArray_legacy_Token: findType("JSArray<Token*>"),
      JSArray_legacy_TokenType: findType("JSArray<TokenType*>"),
      JSArray_legacy_Variable: findType("JSArray<Variable*>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      Null: findType("Null"),
      Object: findType("Object"),
      Pair_of_legacy_double_and_legacy_int: findType("Pair<double*,int*>"),
      Pair_of_legacy_num_and_legacy_num: findType("Pair<num*,num*>"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      _ElementEventStreamImpl_legacy_MouseEvent: findType("_ElementEventStreamImpl<MouseEvent*>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_AbsoluteValue: findType("AbsoluteValue*"),
      legacy_BSCallable: findType("BSCallable*"),
      legacy_BSClass: findType("BSClass*"),
      legacy_BSFunction: findType("BSFunction*"),
      legacy_BSInstance: findType("BSInstance*"),
      legacy_BSInterpreter: findType("BSInterpreter*"),
      legacy_BSSet: findType("BSSet*"),
      legacy_BuilderSet: findType("BuilderSet*"),
      legacy_Division: findType("Division*"),
      legacy_EmptySet: findType("EmptySet*"),
      legacy_Environment: findType("Environment*"),
      legacy_Expr: findType("Expr*"),
      legacy_Function: findType("Function*"),
      legacy_HashMap_of_legacy_String_and_legacy_BSFunction: findType("HashMap<String*,BSFunction*>*"),
      legacy_HashMap_of_legacy_String_and_legacy_void_Function: findType("HashMap<String*,~()*>*"),
      legacy_IntensionalSetIntersection: findType("IntensionalSetIntersection*"),
      legacy_Interval: findType("Interval*"),
      legacy_List_legacy_BSFunction: findType("List<BSFunction*>*"),
      legacy_List_legacy_BSSet: findType("List<BSSet*>*"),
      legacy_List_legacy_Object: findType("List<Object*>*"),
      legacy_List_legacy_Stmt: findType("List<Stmt*>*"),
      legacy_List_legacy_Token: findType("List<Token*>*"),
      legacy_List_legacy_TokenType: findType("List<TokenType*>*"),
      legacy_MouseEvent: findType("MouseEvent*"),
      legacy_Multiplication: findType("Multiplication*"),
      legacy_Never: findType("0&*"),
      legacy_Number: findType("Number*"),
      legacy_Object: findType("Object*"),
      legacy_Pair_of_legacy_double_and_legacy_int: findType("Pair<double*,int*>*"),
      legacy_RosterSet: findType("RosterSet*"),
      legacy_SetUnion: findType("SetUnion*"),
      legacy_Set_legacy_Variable: findType("Set<Variable*>*"),
      legacy_SplayTreeSet_legacy_BSFunction: findType("SplayTreeSet<BSFunction*>*"),
      legacy_Stmt: findType("Stmt*"),
      legacy_String: findType("String*"),
      legacy_Sum: findType("Sum*"),
      legacy_TextAreaElement: findType("TextAreaElement*"),
      legacy_Token: findType("Token*"),
      legacy_UserRoutine: findType("UserRoutine*"),
      legacy_Variable: findType("Variable*"),
      legacy_bool: findType("bool*"),
      legacy_int: findType("int*"),
      legacy_void_Function: findType("~()*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Object: findType("Object?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_void_Function: findType("~()?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSBool_methods = J.JSBool.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.TextAreaElement_methods = W.TextAreaElement.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C._logic_1 = new S._logic("_logic.bsF");
    C.BSLogical_false__logic_1 = new S.BSLogical("false", C._logic_1);
    C._logic_0 = new S._logic("_logic.bsT");
    C.BSLogical_true__logic_0 = new S.BSLogical("true", C._logic_0);
    C._logic_2 = new S._logic("_logic.bsU");
    C.BSLogical_unknown__logic_2 = new S.BSLogical("unknown", C._logic_2);
    C.C_EmptySet = new Y.EmptySet();
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.ClassType_0 = new L.ClassType("ClassType.none");
    C.ClassType_1 = new L.ClassType("ClassType.classType");
    C.ClassType_2 = new L.ClassType("ClassType.subClassType");
    C.Number_8xB = new T.Number(true, 1 / 0, "\u221e", null);
    C.Negative_T3K = new F.Negative(C.Number_8xB, null);
    C.Interval_i3t = new O.Interval(false, false, C.Negative_T3K, C.Number_8xB);
    C.List_m66 = H.setRuntimeTypeInfo(makeConstList(["and", "belongs", "class", "contained", "del", "disjoined", "else", "false", "for", "if", "intersection", "let", "nil", "not", "or", "print", "return", "routine", "set", "super", "this", "true", "while", "union", "unknown"]), H.findType("JSArray<String*>"));
    C.TokenType_31 = new L.TokenType("TokenType.and");
    C.TokenType_32 = new L.TokenType("TokenType.belongs");
    C.TokenType_33 = new L.TokenType("TokenType.classToken");
    C.TokenType_34 = new L.TokenType("TokenType.contained");
    C.TokenType_35 = new L.TokenType("TokenType.del");
    C.TokenType_36 = new L.TokenType("TokenType.disjoined");
    C.TokenType_37 = new L.TokenType("TokenType.elseToken");
    C.TokenType_38 = new L.TokenType("TokenType.falseToken");
    C.TokenType_39 = new L.TokenType("TokenType.forToken");
    C.TokenType_40 = new L.TokenType("TokenType.ifToken");
    C.TokenType_41 = new L.TokenType("TokenType.intersection");
    C.TokenType_42 = new L.TokenType("TokenType.let");
    C.TokenType_43 = new L.TokenType("TokenType.nil");
    C.TokenType_44 = new L.TokenType("TokenType.not");
    C.TokenType_45 = new L.TokenType("TokenType.or");
    C.TokenType_46 = new L.TokenType("TokenType.print");
    C.TokenType_47 = new L.TokenType("TokenType.returnToken");
    C.TokenType_48 = new L.TokenType("TokenType.routine");
    C.TokenType_49 = new L.TokenType("TokenType.setToken");
    C.TokenType_50 = new L.TokenType("TokenType.superToken");
    C.TokenType_51 = new L.TokenType("TokenType.thisToken");
    C.TokenType_52 = new L.TokenType("TokenType.trueToken");
    C.TokenType_55 = new L.TokenType("TokenType.whileToken");
    C.TokenType_53 = new L.TokenType("TokenType.union");
    C.TokenType_54 = new L.TokenType("TokenType.unknown");
    C.Map_m64CA = new H.ConstantStringMap(25, {and: C.TokenType_31, belongs: C.TokenType_32, class: C.TokenType_33, contained: C.TokenType_34, del: C.TokenType_35, disjoined: C.TokenType_36, else: C.TokenType_37, false: C.TokenType_38, for: C.TokenType_39, if: C.TokenType_40, intersection: C.TokenType_41, let: C.TokenType_42, nil: C.TokenType_43, not: C.TokenType_44, or: C.TokenType_45, print: C.TokenType_46, return: C.TokenType_47, routine: C.TokenType_48, set: C.TokenType_49, "super": C.TokenType_50, this: C.TokenType_51, true: C.TokenType_52, while: C.TokenType_55, union: C.TokenType_53, unknown: C.TokenType_54}, C.List_m66, H.findType("ConstantStringMap<String*,TokenType*>"));
    C.Number_oNt = new T.Number(true, 2.718281828459045, "e", null);
    C.Number_oqK = new T.Number(true, 3.141592653589793, "\u03c0", null);
    C.RoutineType_0 = new L.RoutineType("RoutineType.none");
    C.RoutineType_1 = new L.RoutineType("RoutineType.routine");
    C.RoutineType_2 = new L.RoutineType("RoutineType.initializer");
    C.RoutineType_3 = new L.RoutineType("RoutineType.method");
    C.TokenType_0 = new L.TokenType("TokenType.leftParentheses");
    C.TokenType_1 = new L.TokenType("TokenType.rightParentheses");
    C.TokenType_10 = new L.TokenType("TokenType.semicolon");
    C.TokenType_11 = new L.TokenType("TokenType.lineBreak");
    C.TokenType_12 = new L.TokenType("TokenType.slash");
    C.TokenType_13 = new L.TokenType("TokenType.invertedSlash");
    C.TokenType_14 = new L.TokenType("TokenType.star");
    C.TokenType_15 = new L.TokenType("TokenType.factorial");
    C.TokenType_16 = new L.TokenType("TokenType.apostrophe");
    C.TokenType_17 = new L.TokenType("TokenType.approx");
    C.TokenType_18 = new L.TokenType("TokenType.exp");
    C.TokenType_19 = new L.TokenType("TokenType.verticalBar");
    C.TokenType_2 = new L.TokenType("TokenType.leftBrace");
    C.TokenType_20 = new L.TokenType("TokenType.assigment");
    C.TokenType_21 = new L.TokenType("TokenType.equals");
    C.TokenType_22 = new L.TokenType("TokenType.identicallyEquals");
    C.TokenType_23 = new L.TokenType("TokenType.greater");
    C.TokenType_24 = new L.TokenType("TokenType.greaterEqual");
    C.TokenType_25 = new L.TokenType("TokenType.less");
    C.TokenType_26 = new L.TokenType("TokenType.lessEqual");
    C.TokenType_27 = new L.TokenType("TokenType.identifier");
    C.TokenType_28 = new L.TokenType("TokenType.string");
    C.TokenType_29 = new L.TokenType("TokenType.number");
    C.TokenType_3 = new L.TokenType("TokenType.rightBrace");
    C.TokenType_30 = new L.TokenType("TokenType.hash");
    C.TokenType_4 = new L.TokenType("TokenType.leftSquare");
    C.TokenType_5 = new L.TokenType("TokenType.rightSquare");
    C.TokenType_56 = new L.TokenType("TokenType.EOF");
    C.TokenType_6 = new L.TokenType("TokenType.comma");
    C.TokenType_7 = new L.TokenType("TokenType.dot");
    C.TokenType_8 = new L.TokenType("TokenType.minus");
    C.TokenType_9 = new L.TokenType("TokenType.plus");
    C.Type_BuilderSet_6pJ = H.typeLiteral("BuilderSet");
    C.Type_EmptySet_8co = H.typeLiteral("EmptySet");
    C.Type_IntensionalSetIntersection_3pJ = H.typeLiteral("IntensionalSetIntersection");
    C.Type_Interval_9NY = H.typeLiteral("Interval");
    C.Type_JSObject_8k0 = H.typeLiteral("JSObject");
    C.Type_Null_Yyn = H.typeLiteral("Null");
    C.Type_RosterSet_eP4 = H.typeLiteral("RosterSet");
    C.Type_SetUnion_NY1 = H.typeLiteral("SetUnion");
    C.Type_String_k8F = H.typeLiteral("String");
    C.Type_bool_lhE = H.typeLiteral("bool");
    C.Type_double_K1J = H.typeLiteral("double");
    C.Type_int_tHn = H.typeLiteral("int");
    C.Type_num_cv7 = H.typeLiteral("num");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
    $.BetaScript_hadError = false;
    $.BetaScript_printCallback = null;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy,
      _lazyOld = hunkHelpers.lazyOld;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazyOld($, "BetaScript__interpreter", "$get$BetaScript__interpreter", function() {
      return A.BSInterpreter$();
    });
    _lazyOld($, "_x", "$get$_x", function() {
      return S.variable("x");
    });
    _lazyOld($, "_b", "$get$_b", function() {
      return S.variable("b");
    });
    _lazyOld($, "nativeGlobals", "$get$nativeGlobals", function() {
      var t1 = $.$get$_x();
      return P.LinkedHashMap_LinkedHashMap$_literal(["clock", new B.NativeCallable(0, new N.closure()), "abs", Y.abs(t1), "sgn", Y.sgn(t1), "sqrt", O.root(t1), "log", O.log(t1, $.$get$_b()), "ln", O.log(t1, C.Number_oNt), "sin", U.sin(t1), "cos", A.cos(t1), "tan", M.tan(t1), "sec", S.sec(t1), "csc", U.csc(t1), "ctg", X.ctg(t1), "arcsin", L.arcsin(t1), "arccos", N.arccos(t1), "arctan", Q.arctan(t1), "arcsec", Y.arcsec(t1), "arccsc", L.arccsc(t1), "arcctg", U.arcctg(t1), "sinh", D.sinh(t1), "cosh", D.cosh(t1), "tanh", U.tanh(t1), "sech", D.sech(t1), "csch", M.csch(t1), "ctgh", A.ctgh(t1), "arsinh", Z.arsinh(t1), "arcosh", Y.arcosh(t1), "artanh", T.artanh(t1), "arsech", N.arsech(t1), "arcsch", L.arcsch(t1), "arctgh", V.arctgh(t1), "e", C.Number_oNt, "pi", C.Number_oqK, "\u03c0", C.Number_oqK, "infinity", C.Number_8xB, "\u221e", C.Number_8xB, "emptySet", C.C_EmptySet, "\u2205", C.C_EmptySet], type$.legacy_String, type$.legacy_Object);
    });
    _lazyOld($, "BSSet__union", "$get$BSSet__union", function() {
      var t1 = new T.Union(new Q.MethodTable(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Function), H.findType("MethodTable<BSSet*,BSSet*>")));
      t1.SetOperation$0(type$.legacy_BSSet);
      return t1;
    });
    _lazyOld($, "BSSet__intersection", "$get$BSSet__intersection", function() {
      var t1 = new D.Intersection(new Q.MethodTable(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Function), H.findType("MethodTable<BSSet*,BSSet*>")));
      t1.SetOperation$0(type$.legacy_BSSet);
      return t1;
    });
    _lazyOld($, "BSSet__relativeComplement", "$get$BSSet__relativeComplement", function() {
      var t1 = new O.RelativeComplement(new Q.MethodTable(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Function), H.findType("MethodTable<BSSet*,BSSet*>")));
      t1.SetOperation$0(type$.legacy_BSSet);
      return t1;
    });
    _lazyOld($, "BSSet__disjoined", "$get$BSSet__disjoined", function() {
      var t1 = new V.Disjoined(new Q.MethodTable(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Function), H.findType("MethodTable<BSLogical*,BSSet*>")));
      t1.SetOperation$0(H.findType("BSLogical*"));
      return t1;
    });
    _lazyOld($, "BSSet__contains", "$get$BSSet__contains", function() {
      var t1 = new U.Contains(new Q.MethodTable(P.HashMap_HashMap(type$.legacy_String, type$.legacy_Function), H.findType("MethodTable<BSLogical*,BSSet*>"))),
        t2 = H.findType("BSLogical*");
      t1.SetOperation$0(t2);
      t1.EmptyTreatingSetOperation$0(t2);
      return t1;
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({DOMError: J.Interceptor, MediaError: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, SQLError: J.Interceptor, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLBaseElement: W.HtmlElement, HTMLBodyElement: W.HtmlElement, HTMLButtonElement: W.HtmlElement, HTMLCanvasElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLDivElement: W.HtmlElement, HTMLEmbedElement: W.HtmlElement, HTMLFieldSetElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLInputElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMetaElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLObjectElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLOutputElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLParamElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTableElement: W.HtmlElement, HTMLTableRowElement: W.HtmlElement, HTMLTableSectionElement: W.HtmlElement, HTMLTemplateElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, DOMException: W.DomException, Element: W.Element, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, SubmitEvent: W.Event, EventTarget: W.EventTarget, HTMLFormElement: W.FormElement, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, PointerEvent: W.MouseEvent, WheelEvent: W.MouseEvent, Document: W.Node, HTMLDocument: W.Node, Node: W.Node, HTMLSelectElement: W.SelectElement, HTMLTextAreaElement: W.TextAreaElement, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, KeyboardEvent: W.UIEvent, TextEvent: W.UIEvent, TouchEvent: W.UIEvent, UIEvent: W.UIEvent, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGScriptElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement});
    hunkHelpers.setOrUpdateLeafTags({DOMError: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SQLError: true, HTMLAudioElement: true, HTMLBRElement: true, HTMLBaseElement: true, HTMLBodyElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLInputElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, HTMLAnchorElement: true, HTMLAreaElement: true, DOMException: true, Element: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, EventTarget: false, HTMLFormElement: true, MouseEvent: true, DragEvent: true, PointerEvent: true, WheelEvent: true, Document: true, HTMLDocument: true, Node: false, HTMLSelectElement: true, HTMLTextAreaElement: true, CompositionEvent: true, FocusEvent: true, KeyboardEvent: true, TextEvent: true, TouchEvent: true, UIEvent: false, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGScriptElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true});
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(N.main, []);
    else
      N.main([]);
  });
})();

//# sourceMappingURL=tojs.js.map
